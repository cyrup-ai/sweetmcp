    Blocking waiting for file lock on build directory
    Checking sweetmcp_memory v0.1.0 (/Volumes/samsung_t9/sweetmcp/packages/sweetmcp-memory)
error[E0432]: unresolved import `crate::cognitive::types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/quantum/recursive_improvement.rs:13:50
   |
13 |     types::{CognitiveError, OptimizationOutcome, OptimizationSpec},
   |                                                  ^^^^^^^^^^^^^^^^
   |                                                  |
   |                                                  no `OptimizationSpec` in `cognitive::types`
   |                                                  help: a similar name exists in the module: `OptimizationType`
   |
   = help: consider importing this struct through its public re-export instead:
           crate::vector::async_vector_optimization::OptimizationSpec

error[E0432]: unresolved import `crate::cognitive::types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/core.rs:22:29
   |
22 |     types::{CognitiveError, OptimizationSpec},
   |                             ^^^^^^^^^^^^^^^^
   |                             |
   |                             no `OptimizationSpec` in `cognitive::types`
   |                             help: a similar name exists in the module: `OptimizationType`
   |
   = help: consider importing this struct through its public re-export instead:
           crate::vector::async_vector_optimization::OptimizationSpec

error[E0432]: unresolved import `super::super::config`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/factory.rs:15:5
   |
15 |     config::QuantumMCTSConfig,
   |     ^^^^^^ could not find `config` in `super`

error[E0432]: unresolved import `super::balancing`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operation_types.rs:12:5
   |
12 |     balancing::BalancingResult,
   |     ^^^^^^^^^ could not find `balancing` in `super`

error[E0432]: unresolved import `self::balancing`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/mod.rs:50:5
   |
50 |     balancing::{BalancingResult, NodeBalance, BalancingStrategy, NetworkBalanceAnalysis, DistributionStatistics},
   |     ^^^^^^^^^ could not find `balancing` in `self`

error[E0432]: unresolved import `benchmarking_core`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/benchmarking_mod.rs:13:9
   |
13 | pub use benchmarking_core::{
   |         ^^^^^^^^^^^^^^^^^ help: a similar path exists: `super::benchmarking_core`

error[E0432]: unresolved import `benchmarking_results`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/benchmarking_mod.rs:17:9
   |
17 | pub use benchmarking_results::{
   |         ^^^^^^^^^^^^^^^^^^^^ help: a similar path exists: `super::benchmarking_results`

error[E0432]: unresolved import `benchmarking_comparison`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/benchmarking_mod.rs:21:9
   |
21 | pub use benchmarking_comparison::{
   |         ^^^^^^^^^^^^^^^^^^^^^^^ help: a similar path exists: `super::benchmarking_comparison`

error[E0432]: unresolved import `benchmarking_monitor`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/benchmarking_mod.rs:27:9
   |
27 | pub use benchmarking_monitor::{
   |         ^^^^^^^^^^^^^^^^^^^^ help: a similar path exists: `super::benchmarking_monitor`

error[E0432]: unresolved import `super::super::calculations::PerformanceCalculations`
 --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/generation.rs:8:5
  |
8 | use super::super::calculations::PerformanceCalculations;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `PerformanceCalculations` in `cognitive::quantum_mcts::entanglement::metrics::calculations`

error[E0432]: unresolved import `types::PerformanceGrade`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/mod.rs:16:42
   |
16 |     PerformanceTrend, AggregatedMetrics, PerformanceGrade, EntanglementMetricsSummary
   |                                          ^^^^^^^^^^^^^^^^
   |                                          |
   |                                          no `PerformanceGrade` in `cognitive::quantum_mcts::entanglement::metrics::reporting::types`
   |                                          help: a similar name exists in the module: `PerformanceTrend`

error[E0432]: unresolved imports `calculations::PerformanceCalculations`, `calculations::PerformanceSnapshot`, `calculations::TrendAnalysis`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/mod.rs:31:24
   |
31 | pub use calculations::{PerformanceCalculations, PerformanceSnapshot, TrendAnalysis};
   |                        ^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^ no `TrendAnalysis` in `cognitive::quantum_mcts::entanglement::metrics::calculations`
   |                        |                        |
   |                        |                        no `PerformanceSnapshot` in `cognitive::quantum_mcts::entanglement::metrics::calculations`
   |                        no `PerformanceCalculations` in `cognitive::quantum_mcts::entanglement::metrics::calculations`
   |
   = help: consider importing one of these items instead:
           crate::cognitive::quantum_mcts::statistics::TrendAnalysis
           crate::cognitive::quantum_mcts::statistics::tree_stats_mod::TrendAnalysis
           crate::memory::stats_analysis::TrendAnalysis

error[E0432]: unresolved import `benchmarking_comparison::BenchmarkingSuite`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/mod.rs:42:5
   |
42 |     BenchmarkingSuite
   |     ^^^^^^^^^^^^^^^^^ no `BenchmarkingSuite` in `cognitive::quantum_mcts::entanglement::metrics::benchmarking_comparison`
   |
   = help: consider importing this struct instead:
           crate::cognitive::quantum_mcts::entanglement::benchmarking_mod::BenchmarkingSuite

error[E0432]: unresolved import `super::analysis`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/mod.rs:74:16
   |
74 | pub use super::analysis::{NetworkTopology, EntanglementDistribution};
   |                ^^^^^^^^ could not find `analysis` in `super`

error[E0432]: unresolved import `super::metrics`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/mod.rs:75:16
   |
75 | pub use super::metrics::EntanglementMetrics;
   |                ^^^^^^^ could not find `metrics` in `super`

error[E0432]: unresolved import `crate::cognitive::types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/core.rs:16:29
   |
16 |     types::{CognitiveError, OptimizationSpec},
   |                             ^^^^^^^^^^^^^^^^
   |                             |
   |                             no `OptimizationSpec` in `cognitive::types`
   |                             help: a similar name exists in the module: `OptimizationType`
   |
   = help: consider importing this struct through its public re-export instead:
           crate::vector::async_vector_optimization::OptimizationSpec

error[E0432]: unresolved imports `super::node_state`, `super::config`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/core.rs:20:5
   |
20 |     node_state::{QuantumMCTSNode, QuantumNodeState, QuantumNodeFactory},
   |     ^^^^^^^^^^ could not find `node_state` in `super`
21 |     config::QuantumMCTSConfig,
   |     ^^^^^^ could not find `config` in `super`

error[E0432]: unresolved import `crate::cognitive::types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/engine.rs:13:29
   |
13 |     types::{CognitiveError, OptimizationSpec},
   |                             ^^^^^^^^^^^^^^^^
   |                             |
   |                             no `OptimizationSpec` in `cognitive::types`
   |                             help: a similar name exists in the module: `OptimizationType`
   |
   = help: consider importing this struct through its public re-export instead:
           crate::vector::async_vector_optimization::OptimizationSpec

error[E0432]: unresolved imports `super::node_state`, `super::config`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/engine.rs:18:5
   |
18 |     node_state::QuantumMCTSNode,
   |     ^^^^^^^^^^ could not find `node_state` in `super`
19 |     config::QuantumMCTSConfig,
   |     ^^^^^^ could not find `config` in `super`

error[E0432]: unresolved import `crate::cognitive::types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/evaluation.rs:16:29
   |
16 |     types::{CognitiveError, OptimizationSpec},
   |                             ^^^^^^^^^^^^^^^^
   |                             |
   |                             no `OptimizationSpec` in `cognitive::types`
   |                             help: a similar name exists in the module: `OptimizationType`
   |
   = help: consider importing this struct through its public re-export instead:
           crate::vector::async_vector_optimization::OptimizationSpec

error[E0432]: unresolved import `crate::cognitive::types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/node_creation.rs:16:29
   |
16 |     types::{CognitiveError, OptimizationSpec},
   |                             ^^^^^^^^^^^^^^^^
   |                             |
   |                             no `OptimizationSpec` in `cognitive::types`
   |                             help: a similar name exists in the module: `OptimizationType`
   |
   = help: consider importing this struct through its public re-export instead:
           crate::vector::async_vector_optimization::OptimizationSpec

error[E0432]: unresolved import `crate::cognitive::types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/tree_expansion.rs:18:29
   |
18 |     types::{CognitiveError, OptimizationSpec},
   |                             ^^^^^^^^^^^^^^^^
   |                             |
   |                             no `OptimizationSpec` in `cognitive::types`
   |                             help: a similar name exists in the module: `OptimizationType`
   |
   = help: consider importing this struct through its public re-export instead:
           crate::vector::async_vector_optimization::OptimizationSpec

error[E0432]: unresolved import `crate::cognitive::types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/mod.rs:36:29
   |
36 |     types::{CognitiveError, OptimizationSpec},
   |                             ^^^^^^^^^^^^^^^^
   |                             |
   |                             no `OptimizationSpec` in `cognitive::types`
   |                             help: a similar name exists in the module: `OptimizationType`
   |
   = help: consider importing this struct through its public re-export instead:
           crate::vector::async_vector_optimization::OptimizationSpec

error[E0432]: unresolved imports `entanglement::EntanglementCoordinator`, `entanglement::ComprehensiveAnalysisReport`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:28:52
   |
28 | pub use entanglement::{QuantumEntanglementManager, EntanglementCoordinator, ComprehensiveAnalysisReport};
   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `ComprehensiveAnalysisReport` in `cognitive::quantum_mcts::entanglement`
   |                                                    |
   |                                                    no `EntanglementCoordinator` in `cognitive::quantum_mcts::entanglement`
   |
   = help: consider importing this struct instead:
           crate::cognitive::quantum_mcts::entanglement_coordinator::EntanglementCoordinator
   = help: consider importing this struct instead:
           crate::cognitive::quantum_mcts::entanglement_analysis::ComprehensiveAnalysisReport
help: a similar name exists in the module
   |
28 - pub use entanglement::{QuantumEntanglementManager, EntanglementCoordinator, ComprehensiveAnalysisReport};
28 + pub use entanglement::{QuantumEntanglementManager, EntanglementCounters, ComprehensiveAnalysisReport};
   |
help: a similar name exists in the module
   |
28 - pub use entanglement::{QuantumEntanglementManager, EntanglementCoordinator, ComprehensiveAnalysisReport};
28 + pub use entanglement::{QuantumEntanglementManager, EntanglementCoordinator, ComprehensiveHealthReport};
   |

error[E0432]: unresolved import `crate::cognitive::types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/quantum_orchestrator.rs:11:50
   |
11 |     types::{CognitiveError, OptimizationOutcome, OptimizationSpec},
   |                                                  ^^^^^^^^^^^^^^^^
   |                                                  |
   |                                                  no `OptimizationSpec` in `cognitive::types`
   |                                                  help: a similar name exists in the module: `OptimizationType`
   |
   = help: consider importing this struct through its public re-export instead:
           crate::vector::async_vector_optimization::OptimizationSpec

error[E0432]: unresolved import `types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/mod.rs:38:44
   |
38 |     Model, ModelType, OptimizationOutcome, OptimizationSpec, OptimizationType,
   |                                            ^^^^^^^^^^^^^^^^
   |                                            |
   |                                            no `OptimizationSpec` in `cognitive::types`
   |                                            help: a similar name exists in the module: `OptimizationType`
   |
   = help: consider importing this struct through its public re-export instead:
           crate::vector::async_vector_optimization::OptimizationSpec

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `criterion`
 --> packages/sweetmcp-memory/src/memory/memory_benchmarks.rs:3:5
  |
3 | use criterion::{
  |     ^^^^^^^^^ use of unresolved module or unlinked crate `criterion`
  |
  = help: if you wanted to use a crate named `criterion`, use `cargo add criterion` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `sweetmcp_memory`
 --> packages/sweetmcp-memory/src/memory/memory_benchmarks.rs:8:5
  |
8 | use sweetmcp_memory::{
  |     ^^^^^^^^^^^^^^^ use of unresolved module or unlinked crate `sweetmcp_memory`
  |
  = help: if you wanted to use a crate named `sweetmcp_memory`, use `cargo add sweetmcp_memory` to add it to your `Cargo.toml`

error[E0432]: unresolved import `criterion`
 --> packages/sweetmcp-memory/src/memory/memory_benchmarks.rs:3:5
  |
3 | use criterion::{
  |     ^^^^^^^^^ use of unresolved module or unlinked crate `criterion`
  |
  = help: if you wanted to use a crate named `criterion`, use `cargo add criterion` to add it to your `Cargo.toml`

error[E0433]: failed to resolve: could not find `MemoryError` in `error`
   --> packages/sweetmcp-memory/src/cognitive/manager.rs:171:47
    |
171 |             .map_err(|e| crate::utils::error::MemoryError::ConnectionFailed(e.to_string()))?;
    |                                               ^^^^^^^^^^^ could not find `MemoryError` in `error`

error[E0433]: failed to resolve: could not find `MemoryError` in `error`
   --> packages/sweetmcp-memory/src/cognitive/manager.rs:176:47
    |
176 |             .map_err(|e| crate::utils::error::MemoryError::ConfigurationError(e.to_string()))?;
    |                                               ^^^^^^^^^^^ could not find `MemoryError` in `error`

error[E0433]: failed to resolve: could not find `MemoryError` in `error`
   --> packages/sweetmcp-memory/src/cognitive/manager.rs:383:38
    |
383 |                 crate::utils::error::MemoryError::OperationFailed("Operation channel closed".to_string())
    |                                      ^^^^^^^^^^^ could not find `MemoryError` in `error`

error[E0433]: failed to resolve: could not find `MemoryError` in `error`
   --> packages/sweetmcp-memory/src/cognitive/manager.rs:405:38
    |
405 |                 crate::utils::error::MemoryError::OperationFailed("Operation channel closed".to_string())
    |                                      ^^^^^^^^^^^ could not find `MemoryError` in `error`

error[E0407]: method `query_by_type` is not a member of trait `MemoryManager`
   --> packages/sweetmcp-memory/src/cognitive/manager.rs:435:5
    |
435 | /     fn query_by_type(&self, memory_type: MemoryType) -> MemoryStream {
436 | |         self.legacy_manager.query_by_type(memory_type)
437 | |     }
    | |_____^ not a member of trait `MemoryManager`

error[E0106]: missing lifetime specifier
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/config/builder.rs:266:37
    |
266 |     pub fn parallelism(mut self) -> ParallelismConfig {
    |                                     ^^^^^^^^^^^^^^^^^ expected named lifetime parameter
    |
    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from
help: consider using the `'static` lifetime, but this is uncommon unless you're returning a borrowed value from a `const` or a `static`, or if you will only have owned values
    |
266 |     pub fn parallelism(mut self) -> ParallelismConfig<'static> {
    |                                                      +++++++++

error[E0106]: missing lifetime specifier
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/config/builder.rs:271:36
    |
271 |     pub fn thresholds(mut self) -> ThresholdConfig {
    |                                    ^^^^^^^^^^^^^^^ expected named lifetime parameter
    |
    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from
help: consider using the `'static` lifetime, but this is uncommon unless you're returning a borrowed value from a `const` or a `static`, or if you will only have owned values
    |
271 |     pub fn thresholds(mut self) -> ThresholdConfig<'static> {
    |                                                   +++++++++

error[E0106]: missing lifetime specifier
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/config/builder.rs:276:37
    |
276 |     pub fn performance(mut self) -> PerformanceConfig {
    |                                     ^^^^^^^^^^^^^^^^^ expected named lifetime parameter
    |
    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from
help: consider using the `'static` lifetime, but this is uncommon unless you're returning a borrowed value from a `const` or a `static`, or if you will only have owned values
    |
276 |     pub fn performance(mut self) -> PerformanceConfig<'static> {
    |                                                      +++++++++

error[E0106]: missing lifetime specifier
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/config/builder.rs:281:34
    |
281 |     pub fn accuracy(mut self) -> AccuracyConfig {
    |                                  ^^^^^^^^^^^^^^ expected named lifetime parameter
    |
    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from
help: consider using the `'static` lifetime, but this is uncommon unless you're returning a borrowed value from a `const` or a `static`, or if you will only have owned values
    |
281 |     pub fn accuracy(mut self) -> AccuracyConfig<'static> {
    |                                                +++++++++

error[E0433]: failed to resolve: could not find `manager` in `super`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_integration.rs:16:36
   |
16 |     manager: std::sync::Arc<super::manager::QuantumEntanglementManager>,
   |                                    ^^^^^^^ could not find `manager` in `super`

error[E0433]: failed to resolve: could not find `config` in `super`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_integration.rs:18:20
   |
18 |     config: super::config::QuantumEntanglementConfig,
   |                    ^^^^^^ could not find `config` in `super`

error[E0433]: failed to resolve: could not find `manager` in `super`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_integration.rs:25:36
   |
25 |     manager: std::sync::Arc<super::manager::QuantumEntanglementManager>,
   |                                    ^^^^^^^ could not find `manager` in `super`

error[E0433]: failed to resolve: could not find `config` in `super`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_integration.rs:28:25
   |
28 |     let config = super::config::QuantumEntanglementConfig::default();
   |                         ^^^^^^ could not find `config` in `super`

error[E0433]: failed to resolve: could not find `manager` in `super`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/mod.rs:79:36
   |
79 |     manager: std::sync::Arc<super::manager::QuantumEntanglementManager>,
   |                                    ^^^^^^^ could not find `manager` in `super`

error[E0433]: failed to resolve: could not find `manager` in `super`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/mod.rs:88:36
   |
88 |     manager: std::sync::Arc<super::manager::QuantumEntanglementManager>,
   |                                    ^^^^^^^ could not find `manager` in `super`

error[E0433]: failed to resolve: could not find `QuantumEntanglementConfig` in `config`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/mod.rs:91:33
   |
91 |     let config = super::config::QuantumEntanglementConfig::default();
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^ could not find `QuantumEntanglementConfig` in `config`

error[E0433]: failed to resolve: could not find `manager` in `super`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/mod.rs:97:36
   |
97 |     manager: std::sync::Arc<super::manager::QuantumEntanglementManager>,
   |                                    ^^^^^^^ could not find `manager` in `super`

error[E0433]: failed to resolve: could not find `QuantumEntanglementConfig` in `config`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/mod.rs:100:37
    |
100 |     let mut config = super::config::QuantumEntanglementConfig::default();
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^ could not find `QuantumEntanglementConfig` in `config`

error[E0433]: failed to resolve: could not find `manager` in `super`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/mod.rs:113:36
    |
113 |     manager: std::sync::Arc<super::manager::QuantumEntanglementManager>,
    |                                    ^^^^^^^ could not find `manager` in `super`

error[E0433]: failed to resolve: could not find `QuantumEntanglementConfig` in `config`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/mod.rs:116:37
    |
116 |     let mut config = super::config::QuantumEntanglementConfig::default();
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^ could not find `QuantumEntanglementConfig` in `config`

error[E0433]: failed to resolve: could not find `manager` in `super`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/mod.rs:133:40
    |
133 |         manager: std::sync::Arc<super::manager::QuantumEntanglementManager>,
    |                                        ^^^^^^^ could not find `manager` in `super`

error[E0433]: failed to resolve: could not find `QuantumEntanglementConfig` in `config`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/mod.rs:136:41
    |
136 |         let mut config = super::config::QuantumEntanglementConfig::default();
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^ could not find `QuantumEntanglementConfig` in `config`

error[E0433]: failed to resolve: could not find `manager` in `super`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/mod.rs:148:40
    |
148 |         manager: std::sync::Arc<super::manager::QuantumEntanglementManager>,
    |                                        ^^^^^^^ could not find `manager` in `super`

error[E0433]: failed to resolve: could not find `QuantumEntanglementConfig` in `config`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/mod.rs:151:41
    |
151 |         let mut config = super::config::QuantumEntanglementConfig::default();
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^ could not find `QuantumEntanglementConfig` in `config`

error[E0433]: failed to resolve: could not find `manager` in `super`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/mod.rs:163:40
    |
163 |         manager: std::sync::Arc<super::manager::QuantumEntanglementManager>,
    |                                        ^^^^^^^ could not find `manager` in `super`

error[E0433]: failed to resolve: could not find `QuantumEntanglementConfig` in `config`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/mod.rs:166:41
    |
166 |         let mut config = super::config::QuantumEntanglementConfig::default();
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^ could not find `QuantumEntanglementConfig` in `config`

error[E0433]: failed to resolve: expected type, found function `executor` in `query`
  --> packages/sweetmcp-memory/src/memory/query/builder/mod.rs:50:65
   |
50 |     pub fn create_with_executor(executor: crate::memory::query::executor::MemoryQueryExecutor) -> ComplexQueryBuilder {
   |                                                                 ^^^^^^^^ expected type, found function `executor` in `query`

error[E0407]: method `get` is not a member of trait `VectorStore`
  --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:39:5
   |
39 | /     fn get(&self, id: String) -> PendingVectorOp {
40 | |         let (tx, rx) = oneshot::channel();
41 | |         let store = self.clone();
...  |
48 | |         PendingVectorOp::new(rx)
49 | |     }
   | |_____^ not a member of trait `VectorStore`

error[E0407]: method `remove` is not a member of trait `VectorStore`
  --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:51:5
   |
51 | /     fn remove(&self, id: String) -> PendingVectorOp {
52 | |         let (tx, rx) = oneshot::channel();
53 | |         let store = self.clone();
...  |
60 | |         PendingVectorOp::new(rx)
61 | |     }
   | |_____^ not a member of trait `VectorStore`

error[E0407]: method `batch_add` is not a member of trait `VectorStore`
  --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:80:5
   |
80 | /     fn batch_add(&self, items: Vec<(String, Vec<f32>, Option<serde_json::Value>)>) -> PendingVectorOp {
81 | |         let (tx, rx) = oneshot::channel();
82 | |         let store = self.clone();
...  |
89 | |         PendingVectorOp::new(rx)
90 | |     }
   | |_____^ not a member of trait `VectorStore`

error[E0407]: method `update_metadata` is not a member of trait `VectorStore`
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:92:5
    |
92  | /     fn update_metadata(&self, id: String, metadata: serde_json::Value) -> PendingVectorOp {
93  | |         let (tx, rx) = oneshot::channel();
94  | |         let store = self.clone();
...   |
101 | |         PendingVectorOp::new(rx)
102 | |     }
    | |_____^ not a member of trait `VectorStore`

error[E0412]: cannot find type `OptimizationSpec` in module `crate::cognitive::types`
   --> packages/sweetmcp-memory/src/cognitive/mcts/manager.rs:27:55
    |
27  |         spec: std::sync::Arc<crate::cognitive::types::OptimizationSpec>,
    |                                                       ^^^^^^^^^^^^^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/types.rs:352:1
    |
352 | pub enum OptimizationType {
    | ------------------------- similarly named enum `OptimizationType` defined here
    |
help: an enum with a similar name exists
    |
27  -         spec: std::sync::Arc<crate::cognitive::types::OptimizationSpec>,
27  +         spec: std::sync::Arc<crate::cognitive::types::OptimizationType>,
    |
help: consider importing this struct through its public re-export
    |
6   + use crate::vector::async_vector_optimization::OptimizationSpec;
    |
help: if you import `OptimizationSpec`, refer to it directly
    |
27  -         spec: std::sync::Arc<crate::cognitive::types::OptimizationSpec>,
27  +         spec: std::sync::Arc<OptimizationSpec>,
    |

error[E0412]: cannot find type `OptimizationSpec` in module `crate::cognitive::types`
   --> packages/sweetmcp-memory/src/cognitive/mcts/manager.rs:52:55
    |
52  |         spec: std::sync::Arc<crate::cognitive::types::OptimizationSpec>,
    |                                                       ^^^^^^^^^^^^^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/types.rs:352:1
    |
352 | pub enum OptimizationType {
    | ------------------------- similarly named enum `OptimizationType` defined here
    |
help: an enum with a similar name exists
    |
52  -         spec: std::sync::Arc<crate::cognitive::types::OptimizationSpec>,
52  +         spec: std::sync::Arc<crate::cognitive::types::OptimizationType>,
    |
help: consider importing this struct through its public re-export
    |
6   + use crate::vector::async_vector_optimization::OptimizationSpec;
    |
help: if you import `OptimizationSpec`, refer to it directly
    |
52  -         spec: std::sync::Arc<crate::cognitive::types::OptimizationSpec>,
52  +         spec: std::sync::Arc<OptimizationSpec>,
    |

error[E0412]: cannot find type `OptimizationSpec` in module `crate::cognitive::types`
   --> packages/sweetmcp-memory/src/cognitive/quantum/mcts_integration.rs:64:44
    |
64  |         spec: Arc<crate::cognitive::types::OptimizationSpec>,
    |                                            ^^^^^^^^^^^^^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/types.rs:352:1
    |
352 | pub enum OptimizationType {
    | ------------------------- similarly named enum `OptimizationType` defined here
    |
help: an enum with a similar name exists
    |
64  -         spec: Arc<crate::cognitive::types::OptimizationSpec>,
64  +         spec: Arc<crate::cognitive::types::OptimizationType>,
    |
help: consider importing this struct through its public re-export
    |
3   + use crate::vector::async_vector_optimization::OptimizationSpec;
    |
help: if you import `OptimizationSpec`, refer to it directly
    |
64  -         spec: Arc<crate::cognitive::types::OptimizationSpec>,
64  +         spec: Arc<OptimizationSpec>,
    |

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `factory`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_mod.rs:73:9
   |
73 |         factory::create_balanced_coordinator(entanglement_graph)
   |         ^^^^^^^ use of unresolved module or unlinked crate `factory`
   |
   = help: if you wanted to use a crate named `factory`, use `cargo add factory` to add it to your `Cargo.toml`
help: consider importing this module
   |
67 +     use crate::cognitive::quantum_mcts::selection::factory;
   |

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `factory`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_mod.rs:80:9
   |
80 |         factory::create_high_performance_coordinator(entanglement_graph)
   |         ^^^^^^^ use of unresolved module or unlinked crate `factory`
   |
   = help: if you wanted to use a crate named `factory`, use `cargo add factory` to add it to your `Cargo.toml`
help: consider importing this module
   |
67 +     use crate::cognitive::quantum_mcts::selection::factory;
   |

error[E0412]: cannot find type `MetricsCollector` in this scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_coordinator.rs:29:24
   |
29 |     metrics_collector: MetricsCollector,
   |                        ^^^^^^^^^^^^^^^^ not found in this scope
   |
help: consider importing this struct through its public re-export
   |
6  + use crate::monitoring::MetricsCollector;
   |

error[E0433]: failed to resolve: use of undeclared type `MetricsCollector`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_coordinator.rs:39:33
   |
39 |         let metrics_collector = MetricsCollector::new(std::time::Duration::from_secs(60));
   |                                 ^^^^^^^^^^^^^^^^ use of undeclared type `MetricsCollector`
   |
help: consider importing this struct through its public re-export
   |
6  + use crate::monitoring::MetricsCollector;
   |

error[E0433]: failed to resolve: use of undeclared type `MetricsCollector`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_coordinator.rs:51:33
   |
51 |         let metrics_collector = MetricsCollector::new(reporting_interval);
   |                                 ^^^^^^^^^^^^^^^^ use of undeclared type `MetricsCollector`
   |
help: consider importing this struct through its public re-export
   |
6  + use crate::monitoring::MetricsCollector;
   |

error[E0412]: cannot find type `EntanglementMetricsSummary` in this scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_coordinator.rs:154:42
    |
154 |     pub fn get_metrics_summary(&self) -> EntanglementMetricsSummary {
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/mod.rs:57:1
    |
57  | pub struct EntanglementMetrics {
    | ------------------------------ similarly named struct `EntanglementMetrics` defined here
    |
help: a struct with a similar name exists
    |
154 -     pub fn get_metrics_summary(&self) -> EntanglementMetricsSummary {
154 +     pub fn get_metrics_summary(&self) -> EntanglementMetrics {
    |
help: consider importing one of these items
    |
6   + use crate::cognitive::quantum_mcts::entanglement::EntanglementMetricsSummary;
    |
6   + use crate::cognitive::quantum_mcts::entanglement::reporting::EntanglementMetricsSummary;
    |

error[E0412]: cannot find type `EntanglementDistribution` in module `crate::cognitive::quantum_mcts::entanglement::analysis`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_health.rs:150:79
    |
150 |     pub distribution: crate::cognitive::quantum_mcts::entanglement::analysis::EntanglementDistribution,
    |                                                                               ^^^^^^^^^^^^^^^^^^^^^^^^ not found in `crate::cognitive::quantum_mcts::entanglement::analysis`

error[E0412]: cannot find type `EntanglementDistribution` in module `crate::cognitive::quantum_mcts::entanglement::analysis`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_health.rs:197:79
    |
197 |     pub distribution: crate::cognitive::quantum_mcts::entanglement::analysis::EntanglementDistribution,
    |                                                                               ^^^^^^^^^^^^^^^^^^^^^^^^ not found in `crate::cognitive::quantum_mcts::entanglement::analysis`

error[E0412]: cannot find type `NetworkAnalysisReport` in this scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_types.rs:125:26
    |
125 |     pub analysis_report: NetworkAnalysisReport,
    |                          ^^^^^^^^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing this struct through its public re-export
    |
6   + use crate::cognitive::quantum_mcts::entanglement::NetworkAnalysisReport;
    |

error[E0412]: cannot find type `NetworkAnalysisReport` in this scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_types.rs:133:26
    |
133 |         analysis_report: NetworkAnalysisReport,
    |                          ^^^^^^^^^^^^^^^^^^^^^ not found in this scope
    |
help: consider importing this struct through its public re-export
    |
6   + use crate::cognitive::quantum_mcts::entanglement::NetworkAnalysisReport;
    |

error[E0412]: cannot find type `HealthStatus` in this scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/mod.rs:313:36
    |
313 |     pub fn health_status(&self) -> HealthStatus {
    |                                    ^^^^^^^^^^^^ not found in this scope
    |
help: consider importing one of these items
    |
25  + use crate::cognitive::quantum_mcts::entanglement::HealthStatus;
    |
25  + use crate::cognitive::quantum_mcts::expansion::HealthStatus;
    |
25  + use crate::cognitive::quantum_mcts::improvement::HealthStatus;
    |
25  + use crate::memory::HealthStatus;
    |
      and 2 other candidates

error[E0433]: failed to resolve: could not find `analysis` in `super`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/mod.rs:80:37
   |
80 |     analyzer: std::sync::Arc<super::analysis::NetworkTopologyAnalyzer>,
   |                                     ^^^^^^^^ could not find `analysis` in `super`
   |
note: module `crate::cognitive::quantum_mcts::entanglement_mod::quick::analysis` exists but is inaccessible
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/mod.rs:24:1
   |
24 | pub mod analysis;
   | ^^^^^^^^^^^^^^^^^ not accessible

error[E0412]: cannot find type `QuantumEntanglementConfig` in module `super::config`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/mod.rs:81:28
   |
81 |     config: super::config::QuantumEntanglementConfig,
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ not found in `super::config`

error[E0433]: failed to resolve: could not find `analysis` in `super`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/mod.rs:89:37
   |
89 |     analyzer: std::sync::Arc<super::analysis::NetworkTopologyAnalyzer>,
   |                                     ^^^^^^^^ could not find `analysis` in `super`
   |
note: module `crate::cognitive::quantum_mcts::entanglement_mod::quick::analysis` exists but is inaccessible
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/mod.rs:24:1
   |
24 | pub mod analysis;
   | ^^^^^^^^^^^^^^^^^ not accessible

error[E0433]: failed to resolve: could not find `analysis` in `super`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/mod.rs:98:37
   |
98 |     analyzer: std::sync::Arc<super::analysis::NetworkTopologyAnalyzer>,
   |                                     ^^^^^^^^ could not find `analysis` in `super`
   |
note: module `crate::cognitive::quantum_mcts::entanglement_mod::quick::analysis` exists but is inaccessible
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/mod.rs:24:1
   |
24 | pub mod analysis;
   | ^^^^^^^^^^^^^^^^^ not accessible

error[E0433]: failed to resolve: could not find `analysis` in `super`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/mod.rs:114:37
    |
114 |     analyzer: std::sync::Arc<super::analysis::NetworkTopologyAnalyzer>,
    |                                     ^^^^^^^^ could not find `analysis` in `super`
    |
note: module `crate::cognitive::quantum_mcts::entanglement_mod::quick::analysis` exists but is inaccessible
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/mod.rs:24:1
    |
24  | pub mod analysis;
    | ^^^^^^^^^^^^^^^^^ not accessible

error[E0433]: failed to resolve: could not find `analysis` in `super`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/mod.rs:134:41
    |
134 |         analyzer: std::sync::Arc<super::analysis::NetworkTopologyAnalyzer>,
    |                                         ^^^^^^^^ could not find `analysis` in `super`
    |
note: module `crate::cognitive::quantum_mcts::entanglement_mod::quick::analysis` exists but is inaccessible
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/mod.rs:24:1
    |
24  | pub mod analysis;
    | ^^^^^^^^^^^^^^^^^ not accessible

error[E0433]: failed to resolve: could not find `analysis` in `super`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/mod.rs:149:41
    |
149 |         analyzer: std::sync::Arc<super::analysis::NetworkTopologyAnalyzer>,
    |                                         ^^^^^^^^ could not find `analysis` in `super`
    |
note: module `crate::cognitive::quantum_mcts::entanglement_mod::quick::analysis` exists but is inaccessible
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/mod.rs:24:1
    |
24  | pub mod analysis;
    | ^^^^^^^^^^^^^^^^^ not accessible

error[E0433]: failed to resolve: could not find `analysis` in `super`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/mod.rs:164:41
    |
164 |         analyzer: std::sync::Arc<super::analysis::NetworkTopologyAnalyzer>,
    |                                         ^^^^^^^^ could not find `analysis` in `super`
    |
note: module `crate::cognitive::quantum_mcts::entanglement_mod::quick::analysis` exists but is inaccessible
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/mod.rs:24:1
    |
24  | pub mod analysis;
    | ^^^^^^^^^^^^^^^^^ not accessible

error[E0412]: cannot find type `ExpansionStats` in module `super`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/core.rs:249:45
    |
249 |     pub fn expansion_stats(&self) -> super::ExpansionStats {
    |                                             ^^^^^^^^^^^^^^ not found in `super`
    |
help: consider importing this struct
    |
6   + use crate::cognitive::quantum_mcts::expansion::metadata::ExpansionStats;
    |
help: if you import `ExpansionStats`, refer to it directly
    |
249 -     pub fn expansion_stats(&self) -> super::ExpansionStats {
249 +     pub fn expansion_stats(&self) -> ExpansionStats {
    |

error[E0422]: cannot find struct, variant or union type `ExpansionStats` in module `super`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/core.rs:250:16
    |
250 |         super::ExpansionStats {
    |                ^^^^^^^^^^^^^^ not found in `super`
    |
help: consider importing this struct
    |
6   + use crate::cognitive::quantum_mcts::expansion::metadata::ExpansionStats;
    |
help: if you import `ExpansionStats`, refer to it directly
    |
250 -         super::ExpansionStats {
250 +         ExpansionStats {
    |

error[E0425]: cannot find value `execution_time` in this scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_implementations.rs:191:13
    |
191 |             execution_time,
    |             ^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `execution_time` in this scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_implementations.rs:222:13
    |
222 |             execution_time,
    |             ^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `execution_time` in this scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_implementations.rs:254:13
    |
254 |             execution_time,
    |             ^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `execution_time` in this scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_implementations.rs:291:13
    |
291 |             execution_time,
    |             ^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `execution_time` in this scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_implementations.rs:328:13
    |
328 |             execution_time,
    |             ^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `execution_time` in this scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_implementations.rs:364:13
    |
364 |             execution_time,
    |             ^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `execution_time` in this scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_implementations.rs:405:13
    |
405 |             execution_time,
    |             ^^^^^^^^^^^^^^ not found in this scope

error[E0433]: failed to resolve: could not find `RecommendationGenerator` in `coordinator_analysis`
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_operations.rs:277:38
    |
277 |         super::coordinator_analysis::RecommendationGenerator::generate_recommendations(characteristics)
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^ could not find `RecommendationGenerator` in `coordinator_analysis`
    |
help: consider importing this struct through its public re-export
    |
6   + use crate::memory::memory_optimization::RecommendationGenerator;
    |
help: if you import `RecommendationGenerator`, refer to it directly
    |
277 -         super::coordinator_analysis::RecommendationGenerator::generate_recommendations(characteristics)
277 +         RecommendationGenerator::generate_recommendations(characteristics)
    |

error[E0603]: struct import `TrainingConfig` is private
  --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/mod.rs:23:5
   |
23 |     TrainingConfig, TrainingReport, CrossValidationReport, HyperparameterGrid,
   |     ^^^^^^^^^^^^^^ private struct import
   |
note: the struct import `TrainingConfig` is defined here...
  --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/training.rs:12:5
   |
12 | use super::config::*;
   |     ^^^^^^^^^^^^^^^^
note: ...and refers to the struct `TrainingConfig` which is defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/config.rs:8:1
   |
8  | pub struct TrainingConfig {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `TrainingConfig` through the re-export
   |
23 |     config::TrainingConfig, TrainingReport, CrossValidationReport, HyperparameterGrid,
   |     ++++++++

error[E0603]: struct import `TrainingReport` is private
  --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/mod.rs:23:21
   |
23 |     TrainingConfig, TrainingReport, CrossValidationReport, HyperparameterGrid,
   |                     ^^^^^^^^^^^^^^ private struct import
   |
note: the struct import `TrainingReport` is defined here...
  --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/training.rs:12:5
   |
12 | use super::config::*;
   |     ^^^^^^^^^^^^^^^^
note: ...and refers to the struct `TrainingReport` which is defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/config.rs:32:1
   |
32 | pub struct TrainingReport {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `TrainingReport` through the re-export
   |
23 |     TrainingConfig, config::TrainingReport, CrossValidationReport, HyperparameterGrid,
   |                     ++++++++

error[E0603]: struct import `CrossValidationReport` is private
  --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/mod.rs:23:37
   |
23 |     TrainingConfig, TrainingReport, CrossValidationReport, HyperparameterGrid,
   |                                     ^^^^^^^^^^^^^^^^^^^^^ private struct import
   |
note: the struct import `CrossValidationReport` is defined here...
  --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/training.rs:12:5
   |
12 | use super::config::*;
   |     ^^^^^^^^^^^^^^^^
note: ...and refers to the struct `CrossValidationReport` which is defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/config.rs:54:1
   |
54 | pub struct CrossValidationReport {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CrossValidationReport` through the re-export
   |
23 |     TrainingConfig, TrainingReport, config::CrossValidationReport, HyperparameterGrid,
   |                                     ++++++++

error[E0603]: struct import `HyperparameterGrid` is private
  --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/mod.rs:23:60
   |
23 |     TrainingConfig, TrainingReport, CrossValidationReport, HyperparameterGrid,
   |                                                            ^^^^^^^^^^^^^^^^^^ private struct import
   |
note: the struct import `HyperparameterGrid` is defined here...
  --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/training.rs:12:5
   |
12 | use super::config::*;
   |     ^^^^^^^^^^^^^^^^
note: ...and refers to the struct `HyperparameterGrid` which is defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/config.rs:92:1
   |
92 | pub struct HyperparameterGrid {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `HyperparameterGrid` through the re-export
   |
23 |     TrainingConfig, TrainingReport, CrossValidationReport, config::HyperparameterGrid,
   |                                                            ++++++++

error[E0603]: struct import `HyperparameterTrial` is private
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/mod.rs:24:5
    |
24  |     HyperparameterTrial, HyperparameterResult, EarlyStoppingConfig,
    |     ^^^^^^^^^^^^^^^^^^^ private struct import
    |
note: the struct import `HyperparameterTrial` is defined here...
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/training.rs:12:5
    |
12  | use super::config::*;
    |     ^^^^^^^^^^^^^^^^
note: ...and refers to the struct `HyperparameterTrial` which is defined here
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/config.rs:114:1
    |
114 | pub struct HyperparameterTrial {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `HyperparameterTrial` through the re-export
    |
24  |     config::HyperparameterTrial, HyperparameterResult, EarlyStoppingConfig,
    |     ++++++++

error[E0603]: struct import `HyperparameterResult` is private
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/mod.rs:24:26
    |
24  |     HyperparameterTrial, HyperparameterResult, EarlyStoppingConfig,
    |                          ^^^^^^^^^^^^^^^^^^^^ private struct import
    |
note: the struct import `HyperparameterResult` is defined here...
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/training.rs:12:5
    |
12  | use super::config::*;
    |     ^^^^^^^^^^^^^^^^
note: ...and refers to the struct `HyperparameterResult` which is defined here
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/config.rs:126:1
    |
126 | pub struct HyperparameterResult {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `HyperparameterResult` through the re-export
    |
24  |     HyperparameterTrial, config::HyperparameterResult, EarlyStoppingConfig,
    |                          ++++++++

error[E0603]: struct import `EarlyStoppingConfig` is private
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/mod.rs:24:48
    |
24  |     HyperparameterTrial, HyperparameterResult, EarlyStoppingConfig,
    |                                                ^^^^^^^^^^^^^^^^^^^ private struct import
    |
note: the struct import `EarlyStoppingConfig` is defined here...
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/training.rs:12:5
    |
12  | use super::config::*;
    |     ^^^^^^^^^^^^^^^^
note: ...and refers to the struct `EarlyStoppingConfig` which is defined here
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/config.rs:169:1
    |
169 | pub struct EarlyStoppingConfig {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `EarlyStoppingConfig` through the re-export
    |
24  |     HyperparameterTrial, HyperparameterResult, config::EarlyStoppingConfig,
    |                                                ++++++++

error[E0603]: enum import `LearningRateScheduler` is private
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/mod.rs:25:5
    |
25  |     LearningRateScheduler, MetricsTracker
    |     ^^^^^^^^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `LearningRateScheduler` is defined here...
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/training.rs:12:5
    |
12  | use super::config::*;
    |     ^^^^^^^^^^^^^^^^
note: ...and refers to the enum `LearningRateScheduler` which is defined here
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/config.rs:189:1
    |
189 | pub enum LearningRateScheduler {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `LearningRateScheduler` through the re-export
    |
25  |     config::LearningRateScheduler, MetricsTracker
    |     ++++++++

error[E0603]: struct import `MetricsTracker` is private
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/mod.rs:25:28
    |
25  |     LearningRateScheduler, MetricsTracker
    |                            ^^^^^^^^^^^^^^ private struct import
    |
note: the struct import `MetricsTracker` is defined here...
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/training.rs:12:5
    |
12  | use super::config::*;
    |     ^^^^^^^^^^^^^^^^
note: ...and refers to the struct `MetricsTracker` which is defined here
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/config.rs:204:1
    |
204 | pub struct MetricsTracker {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `MetricsTracker` through the re-export
    |
25  |     LearningRateScheduler, config::MetricsTracker
    |                            ++++++++

error[E0603]: struct import `CounterSnapshot` is private
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/coordinator.rs:14:49
   |
14 | pub use collector::{QuantumStatisticsCollector, CounterSnapshot};
   |                                                 ^^^^^^^^^^^^^^^ private struct import
   |
note: the struct import `CounterSnapshot` is defined here...
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/collector.rs:23:5
   |
23 |     counter_snapshot::CounterSnapshot,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the struct `CounterSnapshot` which is defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/counter_snapshot.rs:8:1
   |
8  | pub struct CounterSnapshot {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CounterSnapshot` through the re-export
   |
14 | pub use collector::{QuantumStatisticsCollector, counter_snapshot::CounterSnapshot};
   |                                                 ++++++++++++++++++

error[E0603]: struct import `CounterSnapshot` is private
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/performance.rs:7:23
   |
7  | use super::collector::CounterSnapshot;
   |                       ^^^^^^^^^^^^^^^ private struct import
   |
note: the struct import `CounterSnapshot` is defined here...
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/collector.rs:23:5
   |
23 |     counter_snapshot::CounterSnapshot,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the struct `CounterSnapshot` which is defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/counter_snapshot.rs:8:1
   |
8  | pub struct CounterSnapshot {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CounterSnapshot` through the re-export
   |
7  - use super::collector::CounterSnapshot;
7  + use counter_snapshot::CounterSnapshot;
   |

error[E0603]: struct import `AnalysisComparison` is private
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/mod.rs:124:33
    |
124 | pub use tree_stats_mod::{utils::AnalysisComparison, utils::TrendAnalysis, utils::TrendDirection};
    |                                 ^^^^^^^^^^^^^^^^^^ private struct import
    |
note: the struct import `AnalysisComparison` is defined here...
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/tree_stats_mod.rs:261:9
    |
261 |     use super::*;
    |         ^^^^^^^^
note: ...and refers to the struct `AnalysisComparison` which is defined here
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/tree_stats_mod.rs:360:1
    |
360 | pub struct AnalysisComparison {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `AnalysisComparison` directly
    |
124 - pub use tree_stats_mod::{utils::AnalysisComparison, utils::TrendAnalysis, utils::TrendDirection};
124 + pub use tree_stats_mod::{cognitive::quantum_mcts::statistics::tree_stats_mod::AnalysisComparison, utils::TrendAnalysis, utils::TrendDirection};
    |

error[E0603]: struct import `TrendAnalysis` is private
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/mod.rs:124:60
    |
124 | pub use tree_stats_mod::{utils::AnalysisComparison, utils::TrendAnalysis, utils::TrendDirection};
    |                                                            ^^^^^^^^^^^^^ private struct import
    |
note: the struct import `TrendAnalysis` is defined here...
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/tree_stats_mod.rs:261:9
    |
261 |     use super::*;
    |         ^^^^^^^^
note: ...and refers to the struct `TrendAnalysis` which is defined here
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/tree_stats_mod.rs:371:1
    |
371 | pub struct TrendAnalysis {
    | ^^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `TrendAnalysis` directly
    |
124 - pub use tree_stats_mod::{utils::AnalysisComparison, utils::TrendAnalysis, utils::TrendDirection};
124 + pub use tree_stats_mod::{utils::AnalysisComparison, cognitive::quantum_mcts::statistics::tree_stats_mod::TrendAnalysis, utils::TrendDirection};
    |

error[E0603]: enum import `TrendDirection` is private
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/mod.rs:124:82
    |
124 | pub use tree_stats_mod::{utils::AnalysisComparison, utils::TrendAnalysis, utils::TrendDirection};
    |                                                                                  ^^^^^^^^^^^^^^ private enum import
    |
note: the enum import `TrendDirection` is defined here...
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/tree_stats_mod.rs:261:9
    |
261 |     use super::*;
    |         ^^^^^^^^
note: ...and refers to the enum `TrendDirection` which is defined here
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/tree_stats_mod.rs:380:1
    |
380 | pub enum TrendDirection {
    | ^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `TrendDirection` directly
    |
124 - pub use tree_stats_mod::{utils::AnalysisComparison, utils::TrendAnalysis, utils::TrendDirection};
124 + pub use tree_stats_mod::{utils::AnalysisComparison, utils::TrendAnalysis, cognitive::quantum_mcts::statistics::tree_stats_mod::TrendDirection};
    |

error[E0603]: struct import `OptimizationExecutor` is private
  --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/mod.rs:31:33
   |
31 |     operations_implementations::OptimizationExecutor,
   |                                 ^^^^^^^^^^^^^^^^^^^^ private struct import
   |
note: the struct import `OptimizationExecutor` is defined here...
  --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_implementations.rs:13:23
   |
13 |     operations_core::{OptimizationExecutor, SingleOptimizationResult, SafetyConstraints},
   |                       ^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the struct import `OptimizationExecutor` which is defined here...
  --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_core/mod.rs:15:5
   |
15 |     OptimizationExecutor,
   |     ^^^^^^^^^^^^^^^^^^^^ you could import this re-export
note: ...and refers to the struct `OptimizationExecutor` which is defined here
  --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_core/optimization_executor.rs:27:1
   |
27 | pub struct OptimizationExecutor {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `OptimizationExecutor` through the re-export
   |
31 -     operations_implementations::OptimizationExecutor,
31 +     operations_core::OptimizationExecutor,
   |

error[E0603]: struct import `OptimizationExecutor` is private
  --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/mod.rs:33:27
   |
33 |     operations_utilities::OptimizationExecutor as OptimizationUtils,
   |                           ^^^^^^^^^^^^^^^^^^^^ private struct import
   |
note: the struct import `OptimizationExecutor` is defined here...
  --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_utilities.rs:14:5
   |
14 | use super::operations_core::OptimizationExecutor;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the struct import `OptimizationExecutor` which is defined here...
  --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_core/mod.rs:15:5
   |
15 |     OptimizationExecutor,
   |     ^^^^^^^^^^^^^^^^^^^^ you could import this re-export
note: ...and refers to the struct `OptimizationExecutor` which is defined here
  --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_core/optimization_executor.rs:27:1
   |
27 | pub struct OptimizationExecutor {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `OptimizationExecutor` through the re-export
   |
33 -     operations_utilities::OptimizationExecutor as OptimizationUtils,
33 +     operations_core::OptimizationExecutor,
   |

error[E0603]: struct import `EvolutionRules` is private
   --> packages/sweetmcp-memory/src/cognitive/types.rs:12:27
    |
12  | pub use super::evolution::EvolutionRules;
    |                           ^^^^^^^^^^^^^^ private struct import
    |
note: the struct import `EvolutionRules` is defined here...
   --> packages/sweetmcp-memory/src/cognitive/evolution.rs:10:32
    |
10  |     PendingOptimizationResult, EvolutionRules,
    |                                ^^^^^^^^^^^^^^
note: ...and refers to the struct `EvolutionRules` which is defined here
   --> packages/sweetmcp-memory/src/cognitive/types.rs:335:1
    |
335 | pub struct EvolutionRules {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `EvolutionRules` directly
    |
12  - pub use super::evolution::EvolutionRules;
12  + pub use cognitive::types::EvolutionRules;
    |

error[E0603]: struct import `EvolutionRules` is private
   --> packages/sweetmcp-memory/src/cognitive/types.rs:13:27
    |
13  | pub use super::evolution::EvolutionRules as EvolutionRule;
    |                           ^^^^^^^^^^^^^^ private struct import
    |
note: the struct import `EvolutionRules` is defined here...
   --> packages/sweetmcp-memory/src/cognitive/evolution.rs:10:32
    |
10  |     PendingOptimizationResult, EvolutionRules,
    |                                ^^^^^^^^^^^^^^
note: ...and refers to the struct `EvolutionRules` which is defined here
   --> packages/sweetmcp-memory/src/cognitive/types.rs:335:1
    |
335 | pub struct EvolutionRules {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `EvolutionRules` directly
    |
13  - pub use super::evolution::EvolutionRules as EvolutionRule;
13  + pub use cognitive::types::EvolutionRules;
    |

error[E0603]: enum import `OptimizationPriority` is private
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_analysis.rs:12:64
   |
12 |     engine_health::{EngineHealthReport, NetworkAnalysisReport, OptimizationPriority},
   |                                                                ^^^^^^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `OptimizationPriority` is defined here...
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_health.rs:12:58
   |
12 |     engine_health_types::{CriticalNode, CriticalityType, OptimizationPriority},
   |                                                          ^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `OptimizationPriority` which is defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_health_types.rs:88:1
   |
88 | pub enum OptimizationPriority {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `OptimizationPriority` through the re-export
   |
12 |     engine_health::{EngineHealthReport, NetworkAnalysisReport, engine_health_types::OptimizationPriority},
   |                                                                +++++++++++++++++++++

error[E0603]: enum import `OptimizationPriority` is private
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_types.rs:16:52
   |
16 | pub use super::engine_health::{EngineHealthReport, OptimizationPriority};
   |                                                    ^^^^^^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `OptimizationPriority` is defined here...
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_health.rs:12:58
   |
12 |     engine_health_types::{CriticalNode, CriticalityType, OptimizationPriority},
   |                                                          ^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `OptimizationPriority` which is defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_health_types.rs:88:1
   |
88 | pub enum OptimizationPriority {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `OptimizationPriority` through the re-export
   |
16 | pub use super::engine_health::{EngineHealthReport, engine_health_types::OptimizationPriority};
   |                                                    +++++++++++++++++++++

error[E0603]: enum import `OptimizationPriority` is private
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/mod.rs:37:68
   |
37 | pub use engine_health::{EngineHealthReport, NetworkAnalysisReport, OptimizationPriority};
   |                                                                    ^^^^^^^^^^^^^^^^^^^^ private enum import
   |
note: the enum import `OptimizationPriority` is defined here...
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_health.rs:12:58
   |
12 |     engine_health_types::{CriticalNode, CriticalityType, OptimizationPriority},
   |                                                          ^^^^^^^^^^^^^^^^^^^^
note: ...and refers to the enum `OptimizationPriority` which is defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_health_types.rs:88:1
   |
88 | pub enum OptimizationPriority {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `OptimizationPriority` through the re-export
   |
37 | pub use engine_health::{EngineHealthReport, NetworkAnalysisReport, engine_health_types::OptimizationPriority};
   |                                                                    +++++++++++++++++++++

error[E0603]: enum `QuantumTransformation` is private
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/mod.rs:18:47
    |
18  | pub use tree_expansion::{TreeExpansionEngine, QuantumTransformation};
    |                                               ^^^^^^^^^^^^^^^^^^^^^ private enum
    |
note: the enum `QuantumTransformation` is defined here
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/tree_expansion.rs:359:1
    |
359 | enum QuantumTransformation {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0603]: struct import `MemoryStatistics` is private
  --> packages/sweetmcp-memory/src/memory/semantic/coordinator.rs:21:32
   |
21 |         SemanticMemoryManager, MemoryStatistics, CleanupConfig, OptimizationStrategy,
   |                                ^^^^^^^^^^^^^^^^ private struct import
   |
note: the struct import `MemoryStatistics` is defined here...
  --> packages/sweetmcp-memory/src/memory/semantic/memory_cleanup.rs:12:34
   |
12 | use super::memory_manager_core::{MemoryStatistics, CleanupConfig};
   |                                  ^^^^^^^^^^^^^^^^
note: ...and refers to the struct import `MemoryStatistics` which is defined here...
  --> packages/sweetmcp-memory/src/memory/semantic/memory_manager_core/mod.rs:11:9
   |
11 | pub use statistics::MemoryStatistics;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ you could import this re-export
note: ...and refers to the struct import `MemoryStatistics` which is defined here...
  --> packages/sweetmcp-memory/src/memory/semantic/memory_manager_core/statistics/mod.rs:8:9
   |
8  | pub use statistics::MemoryStatistics;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ you could import this re-export
note: ...and refers to the struct `MemoryStatistics` which is defined here
  --> packages/sweetmcp-memory/src/memory/semantic/memory_manager_core/statistics/statistics.rs:12:1
   |
12 | pub struct MemoryStatistics {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `MemoryStatistics` through the re-export
   |
21 |         SemanticMemoryManager, memory_manager_core::MemoryStatistics, CleanupConfig, OptimizationStrategy,
   |                                +++++++++++++++++++++

error[E0603]: struct import `CleanupConfig` is private
  --> packages/sweetmcp-memory/src/memory/semantic/coordinator.rs:21:50
   |
21 |         SemanticMemoryManager, MemoryStatistics, CleanupConfig, OptimizationStrategy,
   |                                                  ^^^^^^^^^^^^^ private struct import
   |
note: the struct import `CleanupConfig` is defined here...
  --> packages/sweetmcp-memory/src/memory/semantic/memory_cleanup.rs:12:52
   |
12 | use super::memory_manager_core::{MemoryStatistics, CleanupConfig};
   |                                                    ^^^^^^^^^^^^^
note: ...and refers to the struct import `CleanupConfig` which is defined here...
  --> packages/sweetmcp-memory/src/memory/semantic/memory_manager_core/mod.rs:10:18
   |
10 | pub use config::{CleanupConfig, OptimizationStrategy};
   |                  ^^^^^^^^^^^^^ you could import this re-export
note: ...and refers to the struct import `CleanupConfig` which is defined here...
  --> packages/sweetmcp-memory/src/memory/semantic/memory_manager_core/config/mod.rs:8:18
   |
8  | pub use config::{CleanupConfig, OptimizationStrategy};
   |                  ^^^^^^^^^^^^^ you could import this re-export
note: ...and refers to the struct `CleanupConfig` which is defined here
  --> packages/sweetmcp-memory/src/memory/semantic/memory_manager_core/config/config.rs:11:1
   |
11 | pub struct CleanupConfig {
   | ^^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `CleanupConfig` through the re-export
   |
21 |         SemanticMemoryManager, MemoryStatistics, memory_manager_core::CleanupConfig, OptimizationStrategy,
   |                                                  +++++++++++++++++++++

error[E0603]: struct import `VectorSearchResult` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/mod.rs:43:42
    |
43  | pub use super::async_vector_operations::{VectorSearchResult, VectorStore, DistanceMetric};
    |                                          ^^^^^^^^^^^^^^^^^^ private struct import
    |
note: the struct import `VectorSearchResult` is defined here...
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:15:61
    |
15  |     PendingEmbedding, PendingVectorOp, PendingVectorSearch, VectorSearchResult, VectorStore,
    |                                                             ^^^^^^^^^^^^^^^^^^
note: ...and refers to the struct `VectorSearchResult` which is defined here
   --> packages/sweetmcp-memory/src/vector/mod.rs:162:1
    |
162 | pub struct VectorSearchResult {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `VectorSearchResult` directly
    |
43  | pub use super::async_vector_operations::{vector::VectorSearchResult, VectorStore, DistanceMetric};
    |                                          ++++++++

error[E0603]: trait import `VectorStore` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/mod.rs:43:62
    |
43  | pub use super::async_vector_operations::{VectorSearchResult, VectorStore, DistanceMetric};
    |                                                              ^^^^^^^^^^^ private trait import
    |
note: the trait import `VectorStore` is defined here...
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:15:81
    |
15  |     PendingEmbedding, PendingVectorOp, PendingVectorSearch, VectorSearchResult, VectorStore,
    |                                                                                 ^^^^^^^^^^^
note: ...and refers to the trait `VectorStore` which is defined here
   --> packages/sweetmcp-memory/src/vector/mod.rs:128:1
    |
128 | pub trait VectorStore: Send + Sync {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ you could import this directly
help: import `VectorStore` directly
    |
43  | pub use super::async_vector_operations::{VectorSearchResult, vector::VectorStore, DistanceMetric};
    |                                                              ++++++++

warning: unused import: `std::collections::HashMap`
 --> packages/sweetmcp-memory/src/cognitive/committee/core/agents.rs:8:5
  |
8 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `RwLock`
 --> packages/sweetmcp-memory/src/cognitive/committee/core/committee.rs:9:19
  |
9 | use tokio::sync::{RwLock, Semaphore, mpsc};
  |                   ^^^^^^

warning: unused imports: `debug` and `info`
  --> packages/sweetmcp-memory/src/cognitive/committee/core/committee.rs:12:15
   |
12 | use tracing::{debug, info, warn};
   |               ^^^^^  ^^^^

warning: unused imports: `Deserialize` and `Serialize`
  --> packages/sweetmcp-memory/src/cognitive/committee/core/committee.rs:13:13
   |
13 | use serde::{Deserialize, Serialize};
   |             ^^^^^^^^^^^  ^^^^^^^^^

warning: unused import: `Sha256`
  --> packages/sweetmcp-memory/src/cognitive/committee/core/committee.rs:14:20
   |
14 | use sha2::{Digest, Sha256};
   |                    ^^^^^^

warning: unused import: `ImpactFactors`
  --> packages/sweetmcp-memory/src/cognitive/committee/core/committee.rs:17:47
   |
17 | use crate::cognitive::types::{CognitiveError, ImpactFactors};
   |                                               ^^^^^^^^^^^^^

warning: unused import: `std::sync::Arc`
  --> packages/sweetmcp-memory/src/cognitive/committee/core/mod.rs:34:5
   |
34 | use std::sync::Arc;
   |     ^^^^^^^^^^^^^^

warning: unused import: `SteeringFeedback`
  --> packages/sweetmcp-memory/src/cognitive/committee/consensus/committee.rs:15:39
   |
15 | use super::steering::{SteeringSystem, SteeringFeedback};
   |                                       ^^^^^^^^^^^^^^^^

warning: unused import: `crate::vector::async_vector_optimization::OptimizationSpec`
 --> packages/sweetmcp-memory/src/cognitive/committee/consensus/evaluation_phases.rs:5:5
  |
5 | use crate::vector::async_vector_optimization::OptimizationSpec;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `FeedbackType`
 --> packages/sweetmcp-memory/src/cognitive/committee/consensus/events.rs:4:41
  |
4 | use super::steering::{SteeringFeedback, FeedbackType};
  |                                         ^^^^^^^^^^^^

warning: unused import: `super::super::core::AgentEvaluation`
 --> packages/sweetmcp-memory/src/cognitive/committee/consensus/steering.rs:4:5
  |
4 | use super::super::core::AgentEvaluation;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::cognitive::mcts::CodeState`
 --> packages/sweetmcp-memory/src/cognitive/committee/evaluation/timeout_handling.rs:6:5
  |
6 | use crate::cognitive::mcts::CodeState;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::vector::async_vector_optimization::OptimizationSpec`
 --> packages/sweetmcp-memory/src/cognitive/committee/evaluation/timeout_handling.rs:8:5
  |
8 | use crate::vector::async_vector_optimization::OptimizationSpec;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `CompiledCode` and `RuntimeCompiler`
 --> packages/sweetmcp-memory/src/cognitive/evolution.rs:5:34
  |
5 | use crate::cognitive::compiler::{CompiledCode, RuntimeCompiler};
  |                                  ^^^^^^^^^^^^  ^^^^^^^^^^^^^^^

warning: unused import: `EvolutionMetadata`
 --> packages/sweetmcp-memory/src/cognitive/evolution.rs:9:21
  |
9 |     CognitiveError, EvolutionMetadata, OptimizationOutcome, OptimizationType,
  |                     ^^^^^^^^^^^^^^^^^

warning: unused import: `EvaluationCommittee`
 --> packages/sweetmcp-memory/src/cognitive/evolution_manager.rs:7:54
  |
7 | use crate::cognitive::committee::{ConsensusDecision, EvaluationCommittee};
  |                                                      ^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::vector::async_vector_optimization::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/evolution_manager.rs:10:5
   |
10 | use crate::vector::async_vector_optimization::OptimizationSpec;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `CognitiveQueryEnhancer`, `CognitiveState`, `EnhancedQuery`, `LLMProvider`, `QuantumSignature`, `QueryIntent`, and `types::EvolutionMetadata`
  --> packages/sweetmcp-memory/src/cognitive/manager.rs:5:45
   |
5  |     CognitiveMemoryNode, CognitiveSettings, CognitiveState, QuantumSignature,
   |                                             ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^
...
8  |     llm_integration::{create_llm_provider, CognitiveQueryEnhancer, LLMProvider},
   |                                            ^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^
9  |     mesh::CognitiveMesh,
10 |     quantum::{EnhancedQuery, QuantumConfig, QuantumRouter, QueryIntent},
   |               ^^^^^^^^^^^^^                                ^^^^^^^^^^^
...
13 |     types::EvolutionMetadata,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::future::Future`
  --> packages/sweetmcp-memory/src/cognitive/manager.rs:20:5
   |
20 | use std::future::Future;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> packages/sweetmcp-memory/src/cognitive/manager.rs:21:5
   |
21 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused import: `surrealdb::Surreal`
  --> packages/sweetmcp-memory/src/cognitive/manager.rs:24:5
   |
24 | use surrealdb::Surreal;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `ActionMetadata`
 --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_generator.rs:6:38
  |
6 | use super::super::types::{CodeState, ActionMetadata};
  |                                      ^^^^^^^^^^^^^^

warning: unused imports: `CognitiveError` and `ImpactFactors`
 --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_generator.rs:7:31
  |
7 | use crate::cognitive::types::{CognitiveError, ImpactFactors};
  |                               ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^

warning: unused import: `ActionMetadata`
 --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:6:38
  |
6 | use super::super::types::{CodeState, ActionMetadata};
  |                                      ^^^^^^^^^^^^^^

warning: unused import: `ImpactFactors`
 --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:7:47
  |
7 | use crate::cognitive::types::{CognitiveError, ImpactFactors};
  |                                               ^^^^^^^^^^^^^

warning: unused import: `ActionMetadata`
 --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_validator.rs:6:38
  |
6 | use super::super::types::{CodeState, ActionMetadata};
  |                                      ^^^^^^^^^^^^^^

warning: unused import: `ImpactFactors`
 --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_validator.rs:7:47
  |
7 | use crate::cognitive::types::{CognitiveError, ImpactFactors};
  |                                               ^^^^^^^^^^^^^

warning: unused import: `warn`
  --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_validator.rs:10:22
   |
10 | use tracing::{debug, warn};
   |                      ^^^^

warning: unused import: `NodeStatistics`
  --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_coordinator.rs:10:43
   |
10 | use super::super::types::{ActionMetadata, NodeStatistics, CodeState};
   |                                           ^^^^^^^^^^^^^^

warning: unused import: `ActionMetadata`
  --> packages/sweetmcp-memory/src/cognitive/mcts/actions/mod.rs:34:31
   |
34 | use super::types::{CodeState, ActionMetadata};
   |                               ^^^^^^^^^^^^^^

warning: unused import: `ImpactFactors`
  --> packages/sweetmcp-memory/src/cognitive/mcts/actions/mod.rs:35:47
   |
35 | use crate::cognitive::types::{CognitiveError, ImpactFactors};
   |                                               ^^^^^^^^^^^^^

warning: unused import: `debug`
  --> packages/sweetmcp-memory/src/cognitive/mcts/actions/mod.rs:39:15
   |
39 | use tracing::{debug, info};
   |               ^^^^^

warning: unused import: `CodeState`
 --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/tree_analyzer.rs:6:37
  |
6 | use super::super::types::{MCTSNode, CodeState};
  |                                     ^^^^^^^^^

warning: unused import: `CodeState`
 --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/path_finder.rs:6:37
  |
6 | use super::super::types::{MCTSNode, CodeState};
  |                                     ^^^^^^^^^

warning: unused imports: `NodeTypeCounts` and `VisitStatistics`
 --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/structure_analysis.rs:6:42
  |
6 | use super::tree_analyzer::{TreeAnalyzer, NodeTypeCounts, VisitStatistics};
  |                                          ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^

warning: unused import: `PathInfo`
 --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/structure_analysis.rs:7:38
  |
7 | use super::path_finder::{PathFinder, PathInfo, PathDiversityMetrics};
  |                                      ^^^^^^^^

warning: unused import: `CodeState`
 --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/structure_analysis.rs:9:37
  |
9 | use super::super::types::{MCTSNode, CodeState};
  |                                     ^^^^^^^^^

warning: unused import: `super::node_search_types::NodeMatch`
 --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_bottleneck.rs:6:5
  |
6 | use super::node_search_types::NodeMatch;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `CodeState`
 --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_basic.rs:6:44
  |
6 | use super::super::super::types::{MCTSNode, CodeState};
  |                                            ^^^^^^^^^

warning: unused import: `CodeState`
 --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_statistics.rs:6:44
  |
6 | use super::super::super::types::{MCTSNode, CodeState};
  |                                            ^^^^^^^^^

warning: unused import: `CodeState`
 --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_advanced.rs:6:44
  |
6 | use super::super::super::types::{MCTSNode, CodeState};
  |                                            ^^^^^^^^^

warning: unused import: `CodeState`
  --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_mod.rs:36:44
   |
36 | use super::super::super::types::{MCTSNode, CodeState};
   |                                            ^^^^^^^^^

warning: unused import: `node_search_types::*`
  --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/mod.rs:34:9
   |
34 | pub use node_search_types::*;
   |         ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `CodeState`
  --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/mod.rs:50:30
   |
50 | use super::types::{MCTSNode, CodeState};
   |                              ^^^^^^^^^

warning: unused imports: `error`, `info`, and `warn`
  --> packages/sweetmcp-memory/src/cognitive/mcts/controller.rs:10:22
   |
10 | use tracing::{debug, error, info, warn};
   |                      ^^^^^  ^^^^  ^^^^

warning: unused imports: `CoordinatorStatistics` and `ExecutionResult`
  --> packages/sweetmcp-memory/src/cognitive/mcts/controller.rs:20:31
   |
20 |     execution::{MCTSExecutor, ExecutionResult},
   |                               ^^^^^^^^^^^^^^^
21 |     analysis::{TreeAnalyzer, TreeStructureAnalysis, Bottleneck},
22 |     actions::{ActionCoordinator, CoordinatorStatistics},
   |                                  ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ExecutionSummary`
 --> packages/sweetmcp-memory/src/cognitive/mcts/results.rs:8:34
  |
8 |     execution::{ExecutionResult, ExecutionSummary},
  |                                  ^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:6:5
  |
6 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Bottleneck`, `MCTSNode`, `TreeStructureAnalysis`, and `actions::CoordinatorStatistics`
  --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:13:24
   |
13 |     types::{CodeState, MCTSNode},
   |                        ^^^^^^^^
...
16 |     analysis::{TreeStructureAnalysis, Bottleneck},
   |                ^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^
17 |     actions::CoordinatorStatistics,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> packages/sweetmcp-memory/src/cognitive/mcts/types/node_types.rs:7:5
  |
7 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
  --> packages/sweetmcp-memory/src/cognitive/mcts/types/mod.rs:10:5
   |
10 | use std::collections::HashMap;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `AtomicUsize`
 --> packages/sweetmcp-memory/src/cognitive/mesh.rs:8:36
  |
8 | use std::sync::atomic::{AtomicU64, AtomicUsize, Ordering};
  |                                    ^^^^^^^^^^^

warning: unused import: `CodeEvolution`
 --> packages/sweetmcp-memory/src/cognitive/orchestrator/iteration.rs:7:35
  |
7 | use crate::cognitive::evolution::{CodeEvolution, CognitiveCodeEvolution};
  |                                   ^^^^^^^^^^^^^

warning: unused import: `std::path::Path`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/iteration.rs:11:5
   |
11 | use std::path::Path;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `tracing::debug`
 --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_extraction.rs:6:5
  |
6 | use tracing::debug;
  |     ^^^^^^^^^^^^^^

warning: unused import: `super::*`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_extraction.rs:315:9
    |
315 |     use super::*;
    |         ^^^^^^^^

warning: unnecessary parentheses around assigned value
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_validation.rs:328:37
    |
328 |       analysis.overall_completeness = (
    |  _____________________________________^
329 | |         analysis.objective_score * 0.3 +
    | |________^
...
332 |           config_score * 0.2
    |  ___________________________^
333 | |     );
    | |_____^
    |
    = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
    |
328 ~     analysis.overall_completeness = analysis.objective_score * 0.3 +
329 |         analysis.constraints_score * 0.25 +
330 |         analysis.criteria_score * 0.25 +
331 ~         config_score * 0.2;
    |

warning: unused import: `CommitteeEvent`
 --> packages/sweetmcp-memory/src/cognitive/performance.rs:4:35
  |
4 | use crate::cognitive::committee::{CommitteeEvent, EvaluationCommittee};
  |                                   ^^^^^^^^^^^^^^

warning: unused import: `Duration`
 --> packages/sweetmcp-memory/src/cognitive/performance.rs:9:17
  |
9 | use std::time::{Duration, Instant};
  |                 ^^^^^^^^

warning: unused imports: `info` and `warn`
  --> packages/sweetmcp-memory/src/cognitive/performance.rs:11:22
   |
11 | use tracing::{debug, info, warn};
   |                      ^^^^  ^^^^

warning: unused import: `CognitiveState`
 --> packages/sweetmcp-memory/src/cognitive/subsystem_coordinator.rs:4:26
  |
4 |     CognitiveMemoryNode, CognitiveState, QuantumSignature,
  |                          ^^^^^^^^^^^^^^

warning: unused import: `MemoryType`
  --> packages/sweetmcp-memory/src/cognitive/subsystem_coordinator.rs:11:33
   |
11 | use crate::memory::{MemoryNode, MemoryType};
   |                                 ^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> packages/sweetmcp-memory/src/cognitive/state.rs:6:5
  |
6 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::sync::Arc`
 --> packages/sweetmcp-memory/src/cognitive/state.rs:7:5
  |
7 | use std::sync::Arc;
  |     ^^^^^^^^^^^^^^

warning: unused imports: `CognitiveError`, `CognitiveResult`, and `Complex64`
 --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/stabilizer_core_types.rs:7:5
  |
7 |     Complex64,
  |     ^^^^^^^^^
8 |     types::{CognitiveError, CognitiveResult},
  |             ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^

warning: unused import: `HashSet`
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/stabilizer_core_types.rs:10:33
   |
10 | use std::collections::{HashMap, HashSet};
   |                                 ^^^^^^^

warning: unused import: `CognitiveError`
 --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/stabilizer_decoders.rs:7:40
  |
7 | use crate::cognitive::quantum::types::{CognitiveError, CognitiveResult};
  |                                        ^^^^^^^^^^^^^^

warning: unused import: `Complex64`
 --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/stabilizer_types.rs:8:5
  |
8 |     Complex64,
  |     ^^^^^^^^^

warning: unused import: `HashSet`
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/stabilizer_types.rs:11:33
   |
11 | use std::collections::{HashMap, HashSet};
   |                                 ^^^^^^^

warning: unused import: `CognitiveError`
 --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/surface_code/syndrome_detection.rs:8:13
  |
8 |     types::{CognitiveError, CognitiveResult},
  |             ^^^^^^^^^^^^^^

warning: unused imports: `CognitiveError` and `Complex64`
 --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/surface_code/correction_algorithms.rs:7:5
  |
7 |     Complex64,
  |     ^^^^^^^^^
8 |     types::{CognitiveError, CognitiveResult},
  |             ^^^^^^^^^^^^^^

warning: unused import: `HashSet`
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/surface_code/correction_algorithms.rs:10:33
   |
10 | use std::collections::{HashMap, HashSet, VecDeque};
   |                                 ^^^^^^^

warning: unused import: `smallvec::SmallVec`
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/surface_code/correction_algorithms.rs:11:5
   |
11 | use smallvec::SmallVec;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `PauliType`
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/surface_code/correction_algorithms.rs:14:48
   |
14 | use super::syndrome_detection::{QubitPosition, PauliType, SurfaceCodeSyndrome};
   |                                                ^^^^^^^^^

warning: unused import: `Complex64`
 --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/surface_code/layout_management.rs:7:5
  |
7 |     Complex64,
  |     ^^^^^^^^^

warning: unused import: `HashMap`
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/surface_code/layout_management.rs:10:24
   |
10 | use std::collections::{HashMap, HashSet};
   |                        ^^^^^^^

warning: unnecessary parentheses around block return value
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/surface_code/layout_management.rs:553:9
    |
553 |         (connectivity_score * 0.4 + efficiency_score * 0.3 + distance_score * 0.3)
    |         ^                                                                        ^
    |
help: remove these parentheses
    |
553 -         (connectivity_score * 0.4 + efficiency_score * 0.3 + distance_score * 0.3)
553 +         connectivity_score * 0.4 + efficiency_score * 0.3 + distance_score * 0.3
    |

warning: unused import: `smallvec::SmallVec`
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/surface_code/logical_operations.rs:11:5
   |
11 | use smallvec::SmallVec;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `CognitiveError`
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/surface_code/mod.rs:14:13
   |
14 |     types::{CognitiveError, CognitiveResult},
   |             ^^^^^^^^^^^^^^

warning: unused import: `CognitiveError`
 --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_lattice.rs:6:31
  |
6 | use crate::cognitive::types::{CognitiveError, CognitiveResult};
  |                               ^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_lattice.rs:8:5
  |
8 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::cognitive::quantum::error_correction::BoundaryConditions as LatticeBoundaryConditions`
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_lattice.rs:12:5
   |
12 | use crate::cognitive::quantum::error_correction::BoundaryConditions as LatticeBoundaryConditions;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `CognitiveError`
 --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_logical_operators.rs:6:31
  |
6 | use crate::cognitive::types::{CognitiveError, CognitiveResult};
  |                               ^^^^^^^^^^^^^^

warning: unused import: `smallvec::SmallVec`
 --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_logical_operators.rs:7:5
  |
7 | use smallvec::SmallVec;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `PauliType`
 --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_logical_operators.rs:9:32
  |
9 | use super::topological_pauli::{PauliType};
  |                                ^^^^^^^^^

warning: unused import: `smallvec::SmallVec`
 --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_pauli.rs:7:5
  |
7 | use smallvec::SmallVec;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `CognitiveError`
 --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_stabilizers.rs:6:31
  |
6 | use crate::cognitive::types::{CognitiveError, CognitiveResult};
  |                               ^^^^^^^^^^^^^^

warning: unused import: `smallvec::SmallVec`
 --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_stabilizers.rs:7:5
  |
7 | use smallvec::SmallVec;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_stabilizers.rs:8:5
  |
8 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `PauliType` and `TopologicalPauli`
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_stabilizers.rs:10:32
   |
10 | use super::topological_pauli::{TopologicalPauli, PauliType};
   |                                ^^^^^^^^^^^^^^^^  ^^^^^^^^^

warning: unused imports: `CognitiveError`, `CognitiveResult`, and `Complex64`
 --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_types.rs:7:5
  |
7 |     Complex64,
  |     ^^^^^^^^^
8 |     types::{CognitiveError, CognitiveResult},
  |             ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^

warning: unused imports: `HashMap` and `HashSet`
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_types.rs:10:24
   |
10 | use std::collections::{HashMap, HashSet};
   |                        ^^^^^^^  ^^^^^^^

warning: unused import: `smallvec::SmallVec`
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_types.rs:11:5
   |
11 | use smallvec::SmallVec;
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `CognitiveError`
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/mod.rs:78:31
   |
78 | use crate::cognitive::types::{CognitiveError, CognitiveResult};
   |                               ^^^^^^^^^^^^^^

warning: unused import: `crate::cognitive::quantum::Complex64`
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/mod.rs:79:5
   |
79 | use crate::cognitive::quantum::Complex64;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `RwLock`
 --> packages/sweetmcp-memory/src/cognitive/quantum/mcts_integration.rs:4:19
  |
4 | use tokio::sync::{RwLock, mpsc};
  |                   ^^^^^^

warning: unused import: `std::collections::HashMap`
 --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/core.rs:8:5
  |
8 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::f64::consts::PI`
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/core.rs:192:13
    |
192 |         use std::f64::consts::PI;
    |             ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `super::decoding::*`
 --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/training.rs:8:5
  |
8 | use super::decoding::*;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `super::optimizers::*`
 --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/training.rs:9:5
  |
9 | use super::optimizers::*;
  |     ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `super::gradients::*`
  --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/training.rs:10:5
   |
10 | use super::gradients::*;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `super::quantum_ops::*`
  --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/training.rs:11:5
   |
11 | use super::quantum_ops::*;
   |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `GradientMethod`
  --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/training.rs:14:51
   |
14 | use super::core::{MLDecoder, OptimizationBackend, GradientMethod};
   |                                                   ^^^^^^^^^^^^^^

warning: unused imports: `GradientMethod` and `TrainingData`
 --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/optimizers.rs:6:30
  |
6 | use super::core::{MLDecoder, TrainingData, OptimizationBackend, GradientMethod};
  |                              ^^^^^^^^^^^^                       ^^^^^^^^^^^^^^

warning: unused imports: `EntanglementLink`, `EntanglementType`, `MeasurementBasis`, `PhaseEvolution`, and `TimeDependentTerm`
 --> packages/sweetmcp-memory/src/cognitive/quantum/router.rs:4:46
  |
4 |     BasisType, Complex64, EntanglementGraph, EntanglementLink, EntanglementType, MeasurementBasis,
  |                                              ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^
5 |     PhaseEvolution, QuantumConfig, QuantumErrorCorrection, QuantumMetrics, SuperpositionState,
  |     ^^^^^^^^^^^^^^
6 |     TimeDependentTerm, types::*,
  |     ^^^^^^^^^^^^^^^^^

warning: unused import: `BTreeMap`
 --> packages/sweetmcp-memory/src/cognitive/quantum/router.rs:9:24
  |
9 | use std::collections::{BTreeMap, HashMap, VecDeque};
  |                        ^^^^^^^^

warning: unused import: `config::QuantumMCTSConfig`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/adaptive.rs:17:9
   |
17 |         config::QuantumMCTSConfig,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `warn`
 --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/engine.rs:9:28
  |
9 | use tracing::{debug, info, warn};
  |                            ^^^^

warning: unused import: `super::*`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/config/validation.rs:382:9
    |
382 |     use super::*;
    |         ^^^^^^^^

warning: unused imports: `Complex`, `DMatrix`, and `DVector`
 --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/core.rs:4:16
  |
4 | use nalgebra::{Complex, DMatrix, DVector};
  |                ^^^^^^^  ^^^^^^^  ^^^^^^^

warning: unused import: `ordered_float::OrderedFloat`
 --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/core.rs:5:5
  |
5 | use ordered_float::OrderedFloat;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `rand::Rng`
 --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/core.rs:6:5
  |
6 | use rand::Rng;
  |     ^^^^^^^^^

warning: unused import: `tokio::task::JoinSet`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/core.rs:11:5
   |
11 | use tokio::task::JoinSet;
   |     ^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `debug`, `error`, `info`, and `trace`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/core.rs:12:15
   |
12 | use tracing::{debug, error, info, trace};
   |               ^^^^^  ^^^^^  ^^^^  ^^^^^

warning: unused imports: `EntanglementType`, `MeasurementBasis`, and `TreeStatistics`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/core.rs:16:23
   |
16 |     mcts::{CodeState, TreeStatistics},
   |                       ^^^^^^^^^^^^^^
...
19 |         Complex64, EntanglementGraph, EntanglementType, MeasurementBasis, PhaseEvolution,
   |                                       ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^

warning: unused import: `config::QuantumMCTSConfig`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_mod.rs:16:5
   |
16 |     config::QuantumMCTSConfig,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `entanglement_coordinator::*`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_mod.rs:32:9
   |
32 | pub use entanglement_coordinator::*;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `entanglement_analysis::*`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_mod.rs:33:9
   |
33 | pub use entanglement_analysis::*;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `entanglement_factory::*`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_mod.rs:63:9
   |
63 | pub use entanglement_factory::*;
   |         ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_analysis.rs:6:5
  |
6 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `super::super::node_state::QuantumMCTSNode`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_analysis.rs:14:5
   |
14 | use super::super::node_state::QuantumMCTSNode;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_health.rs:6:5
  |
6 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `super::super::node_state::QuantumMCTSNode`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_health.rs:14:5
   |
14 | use super::super::node_state::QuantumMCTSNode;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `warn`
 --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/health.rs:7:28
  |
7 | use tracing::{debug, info, warn};
  |                            ^^^^

warning: unused import: `metrics::EntanglementMetrics`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/health.rs:12:5
   |
12 |     metrics::EntanglementMetrics,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `CreationResult`, `OptimizationResult`, `PruningResult`, and `health::NetworkHealthReport`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:18:5
   |
18 |     OptimizationResult, CreationResult, PruningResult, BalancingResult,
   |     ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^
19 |     health::NetworkHealthReport,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `config::QuantumMCTSConfig`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/optimization.rs:17:5
   |
17 |     config::QuantumMCTSConfig,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `config::QuantumMCTSConfig`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/pruning.rs:17:5
   |
17 |     config::QuantumMCTSConfig,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `EntanglementMetrics`, `NetworkTopologyAnalyzer`, `NetworkTopology`, and `core::QuantumEntanglementManager`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/mod.rs:25:5
   |
25 |     core::QuantumEntanglementManager,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
26 |     analysis::{NetworkTopology, NetworkTopologyAnalyzer},
   |                ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^
27 |     metrics::{EntanglementMetrics, PerformanceTracker},
   |               ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `analysis::NetworkTopology`, `core::EngineStatus`, and `metrics::EntanglementMetricsSummary`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operation_types.rs:9:5
   |
9  |     core::EngineStatus,
   |     ^^^^^^^^^^^^^^^^^^
...
15 |         analysis::NetworkTopology,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^
16 |         metrics::EntanglementMetricsSummary,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `tokio::sync::RwLock`
 --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operation_executor.rs:8:5
  |
8 | use tokio::sync::RwLock;
  |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `tokio::sync::RwLock`
 --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:6:5
  |
6 | use tokio::sync::RwLock;
  |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `tracing::debug`
 --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:9:5
  |
9 | use tracing::debug;
  |     ^^^^^^^^^^^^^^

warning: unused import: `tracing::debug`
 --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/quality_assessment.rs:9:5
  |
9 | use tracing::debug;
  |     ^^^^^^^^^^^^^^

warning: unused import: `tracing::debug`
 --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/neighborhood_analysis.rs:9:5
  |
9 | use tracing::debug;
  |     ^^^^^^^^^^^^^^

warning: unused import: `tracing::debug`
 --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/bottleneck_detection.rs:9:5
  |
9 | use tracing::debug;
  |     ^^^^^^^^^^^^^^

warning: unused import: `tracing::debug`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/mod.rs:40:5
   |
40 | use tracing::debug;
   |     ^^^^^^^^^^^^^^

warning: unused import: `PerformanceCategory`
 --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/benchmark_suite.rs:8:23
  |
8 | use super::tracking::{PerformanceCategory, TimingUtils};
  |                       ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ActionPriority` and `TrendAnalyzer`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/benchmark_suite.rs:12:51
   |
12 | use super::performance_trends::{PerformanceTrend, ActionPriority, TrendAnalyzer};
   |                                                   ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^

warning: unused import: `std::time::Duration`
 --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/benchmarking_comparison.rs:7:5
  |
7 | use std::time::Duration;
  |     ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `PerformanceTrend` and `ResultQuality`
 --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/benchmarking_comparison.rs:8:74
  |
8 | use super::benchmarking_results::{BenchmarkResults, PerformanceCategory, PerformanceTrend, ResultQuality};
  |                                                                          ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^

warning: unused imports: `PerformanceCategory` and `TimingUtils`
 --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/benchmarking_core.rs:7:23
  |
7 | use super::tracking::{PerformanceCategory, TimingUtils};
  |                       ^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^

warning: ambiguous glob re-exports
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/benchmarking_mod.rs:10:9
   |
8  | pub use super::benchmarking_results::*;
   |         ------------------------------ but the name `PerformanceTrend` in the type namespace is also re-exported here
9  | pub use super::benchmarking_comparison::*;
10 | pub use super::benchmarking_monitor::*;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the name `PerformanceTrend` in the type namespace is first re-exported here
   |
   = note: `#[warn(ambiguous_glob_reexports)]` on by default

warning: unused import: `std::time::Duration`
 --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/benchmarking_results.rs:6:5
  |
6 | use std::time::Duration;
  |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `Duration`
 --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/generation.rs:6:17
  |
6 | use std::time::{Duration, Instant};
  |                 ^^^^^^^^

warning: unused import: `PerformanceDashboard`
 --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/formatting.rs:7:50
  |
7 | use super::types::{MetricsReport, SummaryReport, PerformanceDashboard, HistoricalDataPoint};
  |                                                  ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `super::super::tracking::TimingUtils`
 --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/dashboard.rs:7:5
  |
7 | use super::super::tracking::TimingUtils;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `HistoricalDataPoint` and `PerformanceTrend`
 --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/dashboard.rs:8:42
  |
8 | use super::types::{PerformanceDashboard, HistoricalDataPoint, PerformanceTrend};
  |                                          ^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^

warning: unused import: `super::dashboard::KeyMetrics`
 --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/visualization.rs:7:5
  |
7 | use super::dashboard::KeyMetrics;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::monitoring::metrics::MetricsCollector`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/mod.rs:27:5
   |
27 | use crate::monitoring::metrics::MetricsCollector;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `QuantumNodeState`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:17:39
   |
17 |         node_state::{QuantumMCTSNode, QuantumNodeState},
   |                                       ^^^^^^^^^^^^^^^^

warning: unused import: `tokio::task::JoinSet`
 --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/core.rs:9:5
  |
9 | use tokio::task::JoinSet;
  |     ^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `debug` and `warn`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/core.rs:10:15
   |
10 | use tracing::{debug, warn};
   |               ^^^^^  ^^^^

warning: unused imports: `Complex64` and `mcts::CodeState`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/core.rs:14:5
   |
14 |     mcts::CodeState,
   |     ^^^^^^^^^^^^^^^
15 |     quantum::{Complex64, MeasurementBasis, PhaseEvolution, SuperpositionState},
   |               ^^^^^^^^^

warning: unused import: `debug`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/evaluation.rs:10:15
   |
10 | use tracing::{debug, warn};
   |               ^^^^^

warning: unused import: `MeasurementBasis`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/evaluation.rs:15:46
   |
15 |     quantum::{Complex64, SuperpositionState, MeasurementBasis},
   |                                              ^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/node_creation.rs:7:5
  |
7 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `rand::Rng`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/node_creation.rs:10:5
   |
10 | use rand::Rng;
   |     ^^^^^^^^^

warning: unused import: `std::sync::Arc`
 --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/pruning.rs:9:5
  |
9 | use std::sync::Arc;
  |     ^^^^^^^^^^^^^^

warning: unused import: `warn`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/pruning.rs:11:22
   |
11 | use tracing::{debug, warn};
   |                      ^^^^

warning: unused import: `quantum::Complex64`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/pruning.rs:14:5
   |
14 |     quantum::Complex64,
   |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::sync::Arc`
 --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/quantum_expander.rs:8:5
  |
8 | use std::sync::Arc;
  |     ^^^^^^^^^^^^^^

warning: unused import: `tokio::task::JoinSet`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/tree_expansion.rs:11:5
   |
11 | use tokio::task::JoinSet;
   |     ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `warn`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/tree_expansion.rs:12:22
   |
12 | use tracing::{debug, warn};
   |                      ^^^^

warning: unused import: `debug`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/mod.rs:30:15
   |
30 | use tracing::{debug, warn};
   |               ^^^^^

warning: unused import: `Complex64`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/mod.rs:35:15
   |
35 |     quantum::{Complex64, PhaseEvolution},
   |               ^^^^^^^^^

warning: unused import: `QuantumNodeState`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/mod.rs:39:35
   |
39 |     node_state::{QuantumMCTSNode, QuantumNodeState},
   |                                   ^^^^^^^^^^^^^^^^

warning: unused import: `Complex64`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/improvement/parallel_execution.rs:15:15
   |
15 |     quantum::{Complex64, QuantumErrorCorrection},
   |               ^^^^^^^^^

warning: unused import: `Duration`
 --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/improvement/memory_health.rs:6:17
  |
6 | use std::time::{Duration, Instant};
  |                 ^^^^^^^^

warning: unused import: `Complex64`
 --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/quantum_state.rs:7:33
  |
7 | use crate::cognitive::quantum::{Complex64, QuantumMetrics};
  |                                 ^^^^^^^^^

warning: unused import: `std::cmp::Ordering`
 --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/analysis.rs:6:5
  |
6 | use std::cmp::Ordering;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/atomic_operations.rs:6:5
  |
6 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `EntanglementGraph` and `QuantumMetrics`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/atomic_operations.rs:14:15
   |
14 |     quantum::{EntanglementGraph, QuantumMetrics},
   |               ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^

warning: unused import: `super::node_state::QuantumMCTSNode`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/atomic_operations.rs:18:5
   |
18 |     super::node_state::QuantumMCTSNode,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::sync::Arc`
 --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/collector.rs:8:5
  |
8 | use std::sync::Arc;
  |     ^^^^^^^^^^^^^^

warning: unused import: `std::sync::Arc`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/coordinator.rs:30:5
   |
30 | use std::sync::Arc;
   |     ^^^^^^^^^^^^^^

warning: unused import: `Complex64`
 --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/types.rs:9:33
  |
9 | use crate::cognitive::quantum::{Complex64, QuantumMetrics};
  |                                 ^^^^^^^^^

warning: unused import: `types::QuantumTreeStatistics`
 --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/tree_stats_types.rs:8:5
  |
8 |     types::QuantumTreeStatistics,
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ConvergenceMetrics`, `DepthStatistics`, `RewardStatistics`, and `performance::PerformanceMetrics`
 --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/tree_stats_analyzer.rs:8:15
  |
8 |     metrics::{DepthStatistics, RewardStatistics, ConvergenceMetrics},
  |               ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^
9 |     performance::PerformanceMetrics,
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ConvergenceMetrics` and `RewardStatistics`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/tree_stats_mod.rs:17:15
   |
17 |     metrics::{RewardStatistics, ConvergenceMetrics},
   |               ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^

warning: unused import: `info`
 --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/tree_operations.rs:7:22
  |
7 | use tracing::{error, info};
  |                      ^^^^

warning: unused imports: `Deserialize` and `Serialize`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:37:13
   |
37 | use serde::{Deserialize, Serialize};
   |             ^^^^^^^^^^^  ^^^^^^^^^

warning: unused import: `crate::utils::error::Error`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:42:5
   |
42 | use crate::utils::error::Error;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::sync::Arc`
 --> packages/sweetmcp-memory/src/cognitive/quantum_orchestrator.rs:3:5
  |
3 | use std::sync::Arc;
  |     ^^^^^^^^^^^^^^

warning: unused import: `tokio::sync::mpsc`
 --> packages/sweetmcp-memory/src/cognitive/quantum_orchestrator.rs:4:5
  |
4 | use tokio::sync::mpsc;
  |     ^^^^^^^^^^^^^^^^^

warning: unused imports: `CognitiveError`, `OptimizationOutcome`, `committee::CommitteeEvent`, `mcts::CodeState`, `performance::PerformanceAnalyzer`, and `quantum_mcts::QuantumMCTSConfig`
  --> packages/sweetmcp-memory/src/cognitive/quantum_orchestrator.rs:7:5
   |
7  |     committee::CommitteeEvent,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^
8  |     mcts::CodeState,
   |     ^^^^^^^^^^^^^^^
9  |     performance::PerformanceAnalyzer,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
10 |     quantum_mcts::QuantumMCTSConfig,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
11 |     types::{CognitiveError, OptimizationOutcome, OptimizationSpec},
   |             ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^

warning: unused import: `recursive_improvement::RecursiveImprovement`
  --> packages/sweetmcp-memory/src/cognitive/quantum_orchestrator.rs:16:5
   |
16 |     recursive_improvement::RecursiveImprovement,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `GraphError`, `GraphQueryOptions`, `Node`, and `Result`
 --> packages/sweetmcp-memory/src/graph/entity/queries.rs:7:45
  |
7 | use crate::graph::graph_db::{GraphDatabase, GraphError, GraphQueryOptions, Node, Result};
  |                                             ^^^^^^^^^^  ^^^^^^^^^^^^^^^^^  ^^^^  ^^^^^^

warning: unused import: `HashSet`
  --> packages/sweetmcp-memory/src/graph/entity/queries.rs:11:33
   |
11 | use std::collections::{HashMap, HashSet};
   |                                 ^^^^^^^

warning: unused import: `HashSet`
  --> packages/sweetmcp-memory/src/graph/entity/relationships.rs:10:33
   |
10 | use std::collections::{HashMap, HashSet};
   |                                 ^^^^^^^

warning: unused import: `async_trait::async_trait`
 --> packages/sweetmcp-memory/src/llm/completion/mod.rs:3:5
  |
3 | use async_trait::async_trait;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `Serialize`
 --> packages/sweetmcp-memory/src/llm/completion/mod.rs:4:26
  |
4 | use serde::{Deserialize, Serialize};
  |                          ^^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> packages/sweetmcp-memory/src/llm/content_analyzer/mod.rs:4:5
  |
4 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::utils::Result`
 --> packages/sweetmcp-memory/src/memory/caching.rs:7:5
  |
7 | use crate::utils::Result;
  |     ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `super::trait_def::MemoryManager`
  --> packages/sweetmcp-memory/src/memory/memory_manager/core.rs:14:5
   |
14 | use super::trait_def::MemoryManager;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::memory::memory_stream::MemoryStream`
  --> packages/sweetmcp-memory/src/memory/memory_manager/mod.rs:22:5
   |
22 | use crate::memory::memory_stream::MemoryStream;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `MemoryType`
 --> packages/sweetmcp-memory/src/memory/query/core.rs:7:21
  |
7 | use crate::memory::{MemoryType, filter::MemoryFilter};
  |                     ^^^^^^^^^^

warning: unused import: `futures::StreamExt`
 --> packages/sweetmcp-memory/src/memory/query/executor_core.rs:6:5
  |
6 | use futures::StreamExt;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `smallvec::SmallVec`
 --> packages/sweetmcp-memory/src/memory/query/executor_core.rs:7:5
  |
7 | use smallvec::SmallVec;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `Instant`
 --> packages/sweetmcp-memory/src/memory/query/executor_core.rs:8:27
  |
8 | use std::time::{Duration, Instant};
  |                           ^^^^^^^

warning: unused imports: `debug` and `warn`
 --> packages/sweetmcp-memory/src/memory/query/executor_core.rs:9:15
  |
9 | use tracing::{debug, warn};
  |               ^^^^^  ^^^^

warning: unused imports: `Result` and `error::Error`
  --> packages/sweetmcp-memory/src/memory/query/executor_core.rs:11:20
   |
11 | use crate::utils::{Result, error::Error};
   |                    ^^^^^^  ^^^^^^^^^^^^

warning: unused imports: `MemoryQuery` and `SortOrder`
  --> packages/sweetmcp-memory/src/memory/query/executor_core.rs:12:19
   |
12 | use super::core::{MemoryQuery, SortOrder};
   |                   ^^^^^^^^^^^  ^^^^^^^^^

warning: unused imports: `memory_manager::MemoryManager` and `memory_node::MemoryNode`
  --> packages/sweetmcp-memory/src/memory/query/executor_core.rs:14:5
   |
14 |     memory_manager::MemoryManager,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
15 |     memory_node::MemoryNode,
   |     ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `SortOrder`
  --> packages/sweetmcp-memory/src/memory/query/executor_operations.rs:12:32
   |
12 | use super::core::{MemoryQuery, SortOrder};
   |                                ^^^^^^^^^

warning: unused import: `QueryConfig`
  --> packages/sweetmcp-memory/src/memory/query/executor_operations.rs:17:49
   |
17 | use super::executor_core::{MemoryQueryExecutor, QueryConfig, QueryExecutionStats};
   |                                                 ^^^^^^^^^^^

warning: unused import: `warn`
 --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:8:22
  |
8 | use tracing::{debug, warn};
  |                      ^^^^

warning: unused import: `error::Error`
  --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:10:28
   |
10 | use crate::utils::{Result, error::Error};
   |                            ^^^^^^^^^^^^

warning: unused import: `warn`
 --> packages/sweetmcp-memory/src/memory/semantic/coordinator.rs:9:28
  |
9 | use tracing::{debug, info, warn};
  |                            ^^^^

warning: unused imports: `ConfidenceLevel`, `HealthScore`, `ItemSummary`, `MemoryReport`, `OptimizationRecommendation`, `RelationshipDirection`, `RelationshipPattern`, `RelationshipQueryBuilder`, `RelationshipStatistics`, `RelationshipSummary`, and `SemanticItemTypeStatistics`
  --> packages/sweetmcp-memory/src/memory/semantic/coordinator.rs:14:18
   |
14 |     confidence::{ConfidenceLevel, ConfidenceCalculator, ConfidenceStatistics},
   |                  ^^^^^^^^^^^^^^^
15 |     item_types::{SemanticItemType, SemanticItemTypeClassifier, SemanticItemTypeStatistics},
   |                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^
16 |     relationships::{
17 |         SemanticRelationshipType, RelationshipDirection, RelationshipPattern,
   |                                   ^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^
18 |         RelationshipStatistics, RelationshipValidator, RelationshipQueryBuilder,
   |         ^^^^^^^^^^^^^^^^^^^^^^                         ^^^^^^^^^^^^^^^^^^^^^^^^
...
22 |         MemoryReport,
   |         ^^^^^^^^^^^^
...
25 |         OptimizationRecommendation, HealthCheckReport, HealthScore,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^                     ^^^^^^^^^^^
26 |     },
27 |     semantic_item::{SemanticItem, ItemSummary, ArchiveConfig, DeleteConfig},
   |                                   ^^^^^^^^^^^
28 |     semantic_relationship::{SemanticRelationship, RelationshipSummary, RelationshipArchiveConfig, RelationshipDeleteConfig},
   |                                                   ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ConfidenceLevel` and `SemanticItemType`
  --> packages/sweetmcp-memory/src/memory/semantic/memory.rs:11:20
   |
11 | use super::types::{ConfidenceLevel, SemanticItemType};
   |                    ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^

warning: unused import: `error::Error`
 --> packages/sweetmcp-memory/src/memory/semantic/memory_cleanup.rs:6:28
  |
6 | use crate::utils::{Result, error::Error};
  |                            ^^^^^^^^^^^^

warning: unused import: `warn`
  --> packages/sweetmcp-memory/src/memory/semantic/memory_cleanup.rs:10:28
   |
10 | use tracing::{debug, info, warn};
   |                            ^^^^

warning: unnecessary parentheses around block return value
   --> packages/sweetmcp-memory/src/memory/semantic/memory_comparison.rs:220:9
    |
220 |         (items_score * 0.2 + relationships_score * 0.2 + density_score * 0.2 + diversity_score * 0.2 + health_score * 0.2)
    |         ^                                                                                                                ^
    |
help: remove these parentheses
    |
220 -         (items_score * 0.2 + relationships_score * 0.2 + density_score * 0.2 + diversity_score * 0.2 + health_score * 0.2)
220 +         items_score * 0.2 + relationships_score * 0.2 + density_score * 0.2 + diversity_score * 0.2 + health_score * 0.2
    |

warning: unused imports: `Deserialize` and `Serialize`
 --> packages/sweetmcp-memory/src/memory/semantic/memory_manager_core/config/config.rs:6:13
  |
6 | use serde::{Deserialize, Serialize};
  |             ^^^^^^^^^^^  ^^^^^^^^^

warning: unused import: `std::time::Duration`
 --> packages/sweetmcp-memory/src/memory/semantic/memory_manager_core/config/config.rs:7:5
  |
7 | use std::time::Duration;
  |     ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `debug` and `warn`
 --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/health_check/health_report.rs:9:15
  |
9 | use tracing::{debug, warn};
  |               ^^^^^  ^^^^

warning: unused import: `info`
 --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_core/optimization_executor.rs:7:22
  |
7 | use tracing::{debug, info, warn};
  |                      ^^^^

warning: unused imports: `AnalysisResults`, `HealthCheckReport`, `HealthIssue`, `IssueSeverity`, `OptimizationRecommendation`, `PerformanceMetrics`, `RecommendationType`, and `ResourceUtilization`
  --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_core/optimization_executor.rs:17:36
   |
17 |     optimization_recommendations::{OptimizationRecommendation, RecommendationType, AnalysisResults},
   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^
18 |     health_check::{HealthCheckReport, HealthIssue, IssueSeverity, PerformanceMetrics, ResourceUtilization},
   |                    ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `memory_manager_core::MemoryStatistics`, `semantic_item::SemanticItem`, and `semantic_relationship::SemanticRelationship`
  --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_core/optimization_executor.rs:21:5
   |
21 |     semantic_item::SemanticItem,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
22 |     semantic_relationship::SemanticRelationship,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
23 |     memory_manager_core::MemoryStatistics,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `warn`
 --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_implementations.rs:8:28
  |
8 | use tracing::{debug, info, warn};
  |                            ^^^^

warning: unused import: `error::Error`
  --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_implementations.rs:10:28
   |
10 | use crate::utils::{Result, error::Error};
   |                            ^^^^^^^^^^^^

warning: unused import: `SafetyConstraints`
  --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_implementations.rs:13:71
   |
13 |     operations_core::{OptimizationExecutor, SingleOptimizationResult, SafetyConstraints},
   |                                                                       ^^^^^^^^^^^^^^^^^

warning: unused imports: `debug` and `warn`
 --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_utilities.rs:8:15
  |
8 | use tracing::{debug, warn};
  |               ^^^^^  ^^^^

warning: unused import: `SystemTime`
  --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/mod.rs:37:27
   |
37 | use std::time::{Duration, SystemTime};
   |                           ^^^^^^^^^^

warning: unused import: `error::Error`
  --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/mod.rs:40:28
   |
40 | use crate::utils::{Result, error::Error};
   |                            ^^^^^^^^^^^^

warning: unused imports: `Deserialize` and `Serialize`
 --> packages/sweetmcp-memory/src/memory/semantic/relationships/relationship_patterns.rs:7:13
  |
7 | use serde::{Deserialize, Serialize};
  |             ^^^^^^^^^^^  ^^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> packages/sweetmcp-memory/src/memory/semantic/statistics.rs:7:5
  |
7 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `MemoryType`
 --> packages/sweetmcp-memory/src/memory/storage_coordinator.rs:6:37
  |
6 |     MemoryNode, MemoryRelationship, MemoryType, filter::MemoryFilter,
  |                                     ^^^^^^^^^^

warning: unused import: `crate::query::Result`
 --> packages/sweetmcp-memory/src/query/query_builder/operations.rs:8:5
  |
8 | use crate::query::Result;
  |     ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `operations::*`
  --> packages/sweetmcp-memory/src/query/query_builder/mod.rs:19:9
   |
19 | pub use operations::*; // All the builder methods are implemented as inherent methods
   |         ^^^^^^^^^^^^^

warning: ambiguous glob re-exports
  --> packages/sweetmcp-memory/src/query/mod.rs:15:9
   |
13 | pub use query_builder::*;
   |         ---------------- but the name `QueryStatistics` in the type namespace is also re-exported here
14 | pub use query_monitor::*;
15 | pub use query_optimizer::*;
   |         ^^^^^^^^^^^^^^^^^^ the name `QueryStatistics` in the type namespace is first re-exported here

warning: unused import: `std::collections::HashMap`
 --> packages/sweetmcp-memory/src/vector/collection_operations.rs:4:5
  |
4 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `smallvec::SmallVec`
 --> packages/sweetmcp-memory/src/vector/async_vector_core.rs:7:5
  |
7 | use smallvec::SmallVec;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `tokio::sync::oneshot`
  --> packages/sweetmcp-memory/src/vector/async_vector_core.rs:10:5
   |
10 | use tokio::sync::oneshot;
   |     ^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `debug` and `warn`
  --> packages/sweetmcp-memory/src/vector/async_vector_core.rs:11:15
   |
11 | use tracing::{debug, info, warn};
   |               ^^^^^        ^^^^

warning: unused imports: `PendingEmbedding`, `PendingVectorOp`, `PendingVectorSearch`, `VectorSearchResult`, and `VectorStore`
  --> packages/sweetmcp-memory/src/vector/async_vector_core.rs:14:5
   |
14 |     PendingEmbedding, PendingVectorOp, PendingVectorSearch, VectorSearchResult, VectorStore,
   |     ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `crate::memory::filter::MemoryFilter`
  --> packages/sweetmcp-memory/src/vector/async_vector_core.rs:16:5
   |
16 | use crate::memory::filter::MemoryFilter;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `dashmap::DashMap`
 --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:6:5
  |
6 | use dashmap::DashMap;
  |     ^^^^^^^^^^^^^^^^

warning: unused imports: `AtomicUsize` and `Ordering`
 --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:9:25
  |
9 | use std::sync::atomic::{AtomicUsize, Ordering};
  |                         ^^^^^^^^^^^  ^^^^^^^^

warning: unused import: `PendingEmbedding`
  --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:15:5
   |
15 |     PendingEmbedding, PendingVectorOp, PendingVectorSearch, VectorSearchResult, VectorStore,
   |     ^^^^^^^^^^^^^^^^

warning: unused import: `VectorStoreMetrics`
  --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:17:53
   |
17 | use super::async_vector_core::{InMemoryVectorStore, VectorStoreMetrics};
   |                                                     ^^^^^^^^^^^^^^^^^^

warning: unused import: `smallvec::SmallVec`
 --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_core.rs:6:5
  |
6 | use smallvec::SmallVec;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::time::Instant`
 --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_core.rs:8:5
  |
8 | use std::time::Instant;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `warn`
  --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_core.rs:10:28
   |
10 | use tracing::{debug, info, warn};
   |                            ^^^^

warning: unused import: `crate::memory::filter::MemoryFilter`
  --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_core.rs:12:5
   |
12 | use crate::memory::filter::MemoryFilter;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `VectorSearchResult` and `VectorStore`
  --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_core.rs:14:13
   |
14 | use super::{VectorSearchResult, VectorStore};
   |             ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^

warning: unused import: `crate::vector::async_vector_operations::DistanceMetric`
  --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_core.rs:15:5
   |
15 | use crate::vector::async_vector_operations::DistanceMetric;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `OptimizationAlgorithm`
  --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_core.rs:17:95
   |
17 | use crate::vector::async_vector_optimization::optimization_algorithms::{OptimizationExecutor, OptimizationAlgorithm};
   |                                                                                               ^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `OptimizationPipelineResult`, `OptimizationRecommendation`, `OptimizationSpec`, and `VectorCharacteristics`
  --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_core.rs:20:45
   |
20 |     CoordinationMetrics, CoordinatorConfig, OptimizationSpec, OptimizationPipelineResult,
   |                                             ^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^
21 |     VectorCharacteristics, OptimizationRecommendation
   |     ^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `smallvec::SmallVec`
 --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_analysis.rs:6:5
  |
6 | use smallvec::SmallVec;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `tracing::debug`
 --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_analysis.rs:8:5
  |
8 | use tracing::debug;
  |     ^^^^^^^^^^^^^^

warning: unused import: `tokio::sync::RwLock`
 --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_operations.rs:8:5
  |
8 | use tokio::sync::RwLock;
  |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `warn`
 --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_operations.rs:9:28
  |
9 | use tracing::{debug, info, warn};
  |                            ^^^^

warning: unused import: `VectorStore`
  --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_operations.rs:13:33
   |
13 | use super::{VectorSearchResult, VectorStore};
   |                                 ^^^^^^^^^^^

warning: unused import: `SearchStrategyExecutor`
  --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_operations.rs:15:48
   |
15 | use super::search_strategies::{SearchStrategy, SearchStrategyExecutor};
   |                                                ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `super::optimization_algorithms::OptimizationExecutor`
  --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_operations.rs:16:5
   |
16 | use super::optimization_algorithms::OptimizationExecutor;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `OptimizationParameters`
  --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_operations.rs:19:56
   |
19 |     VectorCharacteristics, OptimizationRecommendation, OptimizationParameters
   |                                                        ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `warn`
 --> packages/sweetmcp-memory/src/vector/async_vector_optimization/search_strategies.rs:9:22
  |
9 | use tracing::{debug, warn};
  |                      ^^^^

warning: use of deprecated function `rand::thread_rng`: Renamed to `rng`
   --> packages/sweetmcp-memory/src/cognitive/mcts/tree_operations.rs:152:42
    |
152 |                 let action_index = rand::thread_rng().gen_range(0..possible_actions.len());
    |                                          ^^^^^^^^^^
    |
    = note: `#[warn(deprecated)]` on by default

warning: use of deprecated function `rand::thread_rng`: Renamed to `rng`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/action_manager.rs:79:29
   |
79 |         let mut rng = rand::thread_rng();
   |                             ^^^^^^^^^^

warning: use of deprecated function `rand::thread_rng`: Renamed to `rng`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/core.rs:179:29
    |
179 |         let mut rng = rand::thread_rng();
    |                             ^^^^^^^^^^

warning: use of deprecated function `rand::thread_rng`: Renamed to `rng`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/node_creation.rs:332:29
    |
332 |         let mut rng = rand::thread_rng();
    |                             ^^^^^^^^^^

warning: use of deprecated function `rand::thread_rng`: Renamed to `rng`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/tree_expansion.rs:192:29
    |
192 |         let mut rng = rand::thread_rng();
    |                             ^^^^^^^^^^

warning: use of deprecated function `rand::thread_rng`: Renamed to `rng`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/selection/scoring.rs:82:33
   |
82 |             let mut rng = rand::thread_rng();
   |                                 ^^^^^^^^^^

warning: use of deprecated function `rand::thread_rng`: Renamed to `rng`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/selection/scoring.rs:94:29
   |
94 |         let mut rng = rand::thread_rng();
   |                             ^^^^^^^^^^

warning: use of deprecated function `rand::thread_rng`: Renamed to `rng`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/tree_operations.rs:94:29
   |
94 |         let mut rng = rand::thread_rng();
   |                             ^^^^^^^^^^

warning: use of deprecated function `rand::thread_rng`: Renamed to `rng`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/tree_operations.rs:172:29
    |
172 |         let mut rng = rand::thread_rng();
    |                             ^^^^^^^^^^

warning: use of deprecated function `rand::thread_rng`: Renamed to `rng`
  --> packages/sweetmcp-memory/src/memory/memory_benchmarks.rs:60:25
   |
60 |     let mut rng = rand::thread_rng();
   |                         ^^^^^^^^^^

error[E0119]: conflicting implementations of trait `MemoryManager` for type `SurrealDBMemoryManager`
  --> packages/sweetmcp-memory/src/memory/memory_manager/relationships.rs:14:1
   |
14 | impl MemoryManager for SurrealDBMemoryManager {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `SurrealDBMemoryManager`
   |
  ::: packages/sweetmcp-memory/src/memory/memory_manager/crud.rs:13:1
   |
13 | impl MemoryManager for SurrealDBMemoryManager {
   | --------------------------------------------- first implementation here

error[E0119]: conflicting implementations of trait `MemoryManager` for type `SurrealDBMemoryManager`
  --> packages/sweetmcp-memory/src/memory/memory_manager/search.rs:12:1
   |
12 | impl MemoryManager for SurrealDBMemoryManager {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `SurrealDBMemoryManager`
   |
  ::: packages/sweetmcp-memory/src/memory/memory_manager/crud.rs:13:1
   |
13 | impl MemoryManager for SurrealDBMemoryManager {
   | --------------------------------------------- first implementation here

error[E0061]: this method takes 1 argument but 3 arguments were supplied
  --> packages/sweetmcp-memory/src/api/sdk.rs:51:29
   |
51 |         self.memory_manager.create_memory(content, metadata, embedding).await
   |                             ^^^^^^^^^^^^^ -------  --------  --------- unexpected argument #3 of type `std::option::Option<&[f32]>`
   |                                           |        |
   |                                           |        unexpected argument #2 of type `std::option::Option<serde_json::Value>`
   |                                           expected `MemoryNode`, found `&str`
   |
note: method defined here
  --> packages/sweetmcp-memory/src/memory/memory_manager/trait_def.rs:33:8
   |
33 |     fn create_memory(&self, memory: MemoryNode) -> MemoryFuture<MemoryNode>;
   |        ^^^^^^^^^^^^^        ------
help: remove the extra arguments
   |
51 -         self.memory_manager.create_memory(content, metadata, embedding).await
51 +         self.memory_manager.create_memory(/* MemoryNode */).await
   |

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/api/sdk.rs:51:9
   |
51 |         self.memory_manager.create_memory(content, metadata, embedding).await
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Result<String, Error>`, found `Result<MemoryNode, Error>`
   |
   = note: expected enum `std::result::Result<std::string::String, _>`
              found enum `std::result::Result<MemoryNode, _>`

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/api/sdk.rs:56:9
   |
56 |         self.memory_manager.get_memory(id).await
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Result<Memory, Error>`, found `Result<Option<MemoryNode>, Error>`
   |
   = note: expected enum `std::result::Result<schema::memory_schema::Memory, _>`
              found enum `std::result::Result<std::option::Option<MemoryNode>, _>`

error[E0061]: this method takes 1 argument but 4 arguments were supplied
  --> packages/sweetmcp-memory/src/api/sdk.rs:67:29
   |
67 |         self.memory_manager.update_memory(id, content, metadata, embedding).await
   |                             ^^^^^^^^^^^^^ --  -------  --------  --------- unexpected argument #4 of type `std::option::Option<&[f32]>`
   |                                           |   |        |
   |                                           |   |        unexpected argument #3 of type `std::option::Option<serde_json::Value>`
   |                                           |   unexpected argument #2 of type `std::option::Option<&str>`
   |                                           expected `MemoryNode`, found `&str`
   |
note: method defined here
  --> packages/sweetmcp-memory/src/memory/memory_manager/trait_def.rs:51:8
   |
51 |     fn update_memory(&self, memory: MemoryNode) -> MemoryFuture<MemoryNode>;
   |        ^^^^^^^^^^^^^        ------
help: remove the extra arguments
   |
67 -         self.memory_manager.update_memory(id, content, metadata, embedding).await
67 +         self.memory_manager.update_memory(/* MemoryNode */).await
   |

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/api/sdk.rs:67:9
   |
67 |         self.memory_manager.update_memory(id, content, metadata, embedding).await
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Result<(), Error>`, found `Result<MemoryNode, Error>`
   |
   = note: expected enum `std::result::Result<(), _>`
              found enum `std::result::Result<MemoryNode, _>`

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/api/sdk.rs:72:9
   |
72 |         self.memory_manager.delete_memory(id).await
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Result<(), Error>`, found `Result<bool, Error>`
   |
   = note: expected enum `std::result::Result<(), _>`
              found enum `std::result::Result<bool, _>`

error[E0599]: no method named `list_memories` found for struct `std::sync::Arc<(dyn MemoryManager + 'static)>` in the current scope
  --> packages/sweetmcp-memory/src/api/sdk.rs:82:29
   |
82 |         self.memory_manager.list_memories(limit, offset, filter).await
   |                             ^^^^^^^^^^^^^ method not found in `std::sync::Arc<(dyn MemoryManager + 'static)>`

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/api/sdk.rs:109:12
    |
105 |                 memories.push(memory);
    |                 --------      ------ this argument has type `std::option::Option<MemoryNode>`...
    |                 |
    |                 ... which causes `memories` to have type `Vec<std::option::Option<MemoryNode>>`
...
109 |         Ok(memories)
    |         -- ^^^^^^^^ expected `Vec<Memory>`, found `Vec<Option<MemoryNode>>`
    |         |
    |         arguments to this enum variant are incorrect
    |
    = note: expected struct `Vec<schema::memory_schema::Memory>`
               found struct `Vec<std::option::Option<MemoryNode>>`
help: the type constructed contains `Vec<std::option::Option<MemoryNode>>` due to the type of the argument passed
   --> packages/sweetmcp-memory/src/api/sdk.rs:109:9
    |
109 |         Ok(memories)
    |         ^^^--------^
    |            |
    |            this argument influences the type of `Ok`
note: tuple variant defined here
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:552:5
    |
552 |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ^^

error[E0061]: this method takes 1 argument but 4 arguments were supplied
   --> packages/sweetmcp-memory/src/api/sdk.rs:120:29
    |
120 |         self.memory_manager.create_relationship(source_id, target_id, relationship_type, metadata).await
    |                             ^^^^^^^^^^^^^^^^^^^ ---------  ---------  -----------------  -------- unexpected argument #4 of type `std::option::Option<serde_json::Value>`
    |                                                 |          |          |
    |                                                 |          |          unexpected argument #3 of type `&str`
    |                                                 |          unexpected argument #2 of type `&str`
    |                                                 expected `MemoryRelationship`, found `&str`
    |
note: method defined here
   --> packages/sweetmcp-memory/src/memory/memory_manager/trait_def.rs:69:8
    |
69  |     fn create_relationship(&self, relationship: MemoryRelationship) -> MemoryFuture<MemoryRelationship>;
    |        ^^^^^^^^^^^^^^^^^^^        ------------
help: remove the extra arguments
    |
120 -         self.memory_manager.create_relationship(source_id, target_id, relationship_type, metadata).await
120 +         self.memory_manager.create_relationship(/* MemoryRelationship */).await
    |

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/api/sdk.rs:120:9
    |
120 |         self.memory_manager.create_relationship(source_id, target_id, relationship_type, metadata).await
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Result<String, Error>`, found `Result<MemoryRelationship, Error>`
    |
    = note: expected enum `std::result::Result<std::string::String, _>`
               found enum `std::result::Result<MemoryRelationship, _>`

error[E0599]: no method named `get_relationship` found for struct `std::sync::Arc<(dyn MemoryManager + 'static)>` in the current scope
   --> packages/sweetmcp-memory/src/api/sdk.rs:125:29
    |
125 |         self.memory_manager.get_relationship(id).await
    |                             ^^^^^^^^^^^^^^^^
    |
help: there is a method `get_relationships` with a similar name, but with different arguments
   --> packages/sweetmcp-memory/src/memory/memory_manager/trait_def.rs:79:5
    |
79  |     fn get_relationships(&self, memory_id: &str, relationship_type: Option<&str>) -> MemoryStream;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/api/sdk.rs:130:9
    |
130 |         self.memory_manager.delete_relationship(id).await
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Result<(), Error>`, found `Result<bool, Error>`
    |
    = note: expected enum `std::result::Result<(), _>`
               found enum `std::result::Result<bool, _>`

error[E0599]: no method named `list_relationships` found for struct `std::sync::Arc<(dyn MemoryManager + 'static)>` in the current scope
   --> packages/sweetmcp-memory/src/api/sdk.rs:140:29
    |
140 |         self.memory_manager.list_relationships(limit, offset, filter).await
    |                             ^^^^^^^^^^^^^^^^^^
    |
help: there is a method `get_relationships` with a similar name, but with different arguments
   --> packages/sweetmcp-memory/src/memory/memory_manager/trait_def.rs:79:5
    |
79  |     fn get_relationships(&self, memory_id: &str, relationship_type: Option<&str>) -> MemoryStream;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `get_memory_relationships` found for struct `std::sync::Arc<(dyn MemoryManager + 'static)>` in the current scope
   --> packages/sweetmcp-memory/src/api/sdk.rs:150:29
    |
150 |         self.memory_manager.get_memory_relationships(memory_id, relationship_type, direction).await
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: there is a method `get_relationships` with a similar name, but with different arguments
   --> packages/sweetmcp-memory/src/memory/memory_manager/trait_def.rs:79:5
    |
79  |     fn get_relationships(&self, memory_id: &str, relationship_type: Option<&str>) -> MemoryStream;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/api/sdk.rs:155:9
    |
155 |         self.content_analyzer.analyze_content(content).await
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Result<ContentAnalysis, Error>`, found `Result<ContentAnalysis, LLMError>`
    |
    = note: expected enum `std::result::Result<_, utils::error::Error>`
               found enum `std::result::Result<_, LLMError>`

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/api/sdk.rs:164:9
    |
164 |         self.content_analyzer.analyze_relationship(content1, content2).await
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Result<RelationshipAnalysis, Error>`, found `Result<RelationshipAnalysis, LLMError>`
    |
    = note: expected enum `std::result::Result<_, utils::error::Error>`
               found enum `std::result::Result<_, LLMError>`

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/api/sdk.rs:172:9
    |
172 |         self.completion_service.generate_completion(messages).await
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Result<String, Error>`, found `Result<String, LLMError>`
    |
    = note: expected enum `std::result::Result<_, utils::error::Error>`
               found enum `std::result::Result<_, LLMError>`

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/api/sdk.rs:181:9
    |
181 |         self.completion_service.generate_completion_with_tools(messages, tools).await
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Result<HashMap<String, String>, Error>`, found `Result<HashMap<String, String>, ...>`
    |
    = note: expected enum `std::result::Result<_, utils::error::Error>`
               found enum `std::result::Result<_, LLMError>`

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/api/sdk.rs:189:9
    |
189 |         self.completion_service.generate_json_completion(messages).await
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Result<String, Error>`, found `Result<String, LLMError>`
    |
    = note: expected enum `std::result::Result<_, utils::error::Error>`
               found enum `std::result::Result<_, LLMError>`

error[E0503]: cannot use `self.config.timeout_seconds` because it was mutably borrowed
   --> packages/sweetmcp-memory/src/cognitive/committee/core/committee.rs:167:33
    |
165 |         let evaluation_future = self.perform_evaluation(state, action);
    |                                 ---- `*self` is borrowed here
166 |         let result = timeout(
167 |             Duration::from_secs(self.config.timeout_seconds),
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ use of borrowed `*self`
168 |             evaluation_future
    |             ----------------- borrow later used here

error[E0277]: `?` couldn't convert the error to `cognitive::types::CognitiveError`
   --> packages/sweetmcp-memory/src/cognitive/committee/core/committee.rs:225:56
    |
225 |                 let _permit = semaphore.acquire().await?;
    |                               -------------------------^ the trait `std::convert::From<AcquireError>` is not implemented for `cognitive::types::CognitiveError`
    |                               |
    |                               this can't be annotated with `?` because it has type `Result<_, AcquireError>`
    |
note: `cognitive::types::CognitiveError` needs to implement `From<AcquireError>`
   --> packages/sweetmcp-memory/src/cognitive/types.rs:233:1
    |
233 | pub enum CognitiveError {
    | ^^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait

error[E0615]: attempted to take value of method `performance_score` on type `&node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/committee/core/committee.rs:421:39
    |
421 |         let performance_score = state.performance_score;
    |                                       ^^^^^^^^^^^^^^^^^ method, not a field
    |
help: use parentheses to call the method
    |
421 |         let performance_score = state.performance_score();
    |                                                        ++

error[E0609]: no field `memory_usage` on type `&node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/committee/core/committee.rs:422:40
    |
422 |         let memory_score = 1.0 - state.memory_usage;
    |                                        ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `complexity_score` on type `&node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/committee/core/committee.rs:423:51
    |
423 |         let complexity_score = 1.0 / (1.0 + state.complexity_score / 10.0);
    |                                                   ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/committee/core/committee.rs:452:13
    |
451 |         match &self.perspective {
    |               ----------------- this expression has type `&agents::AgentPerspective`
452 |             AgentPerspective::Performance => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `agents::AgentPerspective`, found `agent_perspectives::AgentPerspective`
    |
   ::: packages/sweetmcp-memory/src/cognitive/committee/core/agent_perspectives.rs:11:5
    |
11  |     Performance,
    |     ----------- unit variant defined here
    |
    = note: `agent_perspectives::AgentPerspective` and `agents::AgentPerspective` have similar names, but are actually distinct types
note: `agent_perspectives::AgentPerspective` is defined in module `crate::cognitive::committee::core::agent_perspectives` of the current crate
   --> packages/sweetmcp-memory/src/cognitive/committee/core/agent_perspectives.rs:10:1
    |
10  | pub enum AgentPerspective {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^
note: `agents::AgentPerspective` is defined in module `crate::cognitive::committee::core::agents` of the current crate
   --> packages/sweetmcp-memory/src/cognitive/committee/core/agents.rs:14:1
    |
14  | pub enum AgentPerspective {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/committee/core/committee.rs:459:13
    |
451 |         match &self.perspective {
    |               ----------------- this expression has type `&agents::AgentPerspective`
...
459 |             AgentPerspective::Security => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `agents::AgentPerspective`, found `agent_perspectives::AgentPerspective`
    |
   ::: packages/sweetmcp-memory/src/cognitive/committee/core/agent_perspectives.rs:12:5
    |
12  |     Security,
    |     -------- unit variant defined here
    |
    = note: `agent_perspectives::AgentPerspective` and `agents::AgentPerspective` have similar names, but are actually distinct types
note: `agent_perspectives::AgentPerspective` is defined in module `crate::cognitive::committee::core::agent_perspectives` of the current crate
   --> packages/sweetmcp-memory/src/cognitive/committee/core/agent_perspectives.rs:10:1
    |
10  | pub enum AgentPerspective {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^
note: `agents::AgentPerspective` is defined in module `crate::cognitive::committee::core::agents` of the current crate
   --> packages/sweetmcp-memory/src/cognitive/committee/core/agents.rs:14:1
    |
14  | pub enum AgentPerspective {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/committee/core/committee.rs:466:13
    |
451 |         match &self.perspective {
    |               ----------------- this expression has type `&agents::AgentPerspective`
...
466 |             AgentPerspective::Maintainability => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `agents::AgentPerspective`, found `agent_perspectives::AgentPerspective`
    |
   ::: packages/sweetmcp-memory/src/cognitive/committee/core/agent_perspectives.rs:13:5
    |
13  |     Maintainability,
    |     --------------- unit variant defined here
    |
    = note: `agent_perspectives::AgentPerspective` and `agents::AgentPerspective` have similar names, but are actually distinct types
note: `agent_perspectives::AgentPerspective` is defined in module `crate::cognitive::committee::core::agent_perspectives` of the current crate
   --> packages/sweetmcp-memory/src/cognitive/committee/core/agent_perspectives.rs:10:1
    |
10  | pub enum AgentPerspective {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^
note: `agents::AgentPerspective` is defined in module `crate::cognitive::committee::core::agents` of the current crate
   --> packages/sweetmcp-memory/src/cognitive/committee/core/agents.rs:14:1
    |
14  | pub enum AgentPerspective {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/committee/core/committee.rs:473:13
    |
451 |         match &self.perspective {
    |               ----------------- this expression has type `&agents::AgentPerspective`
...
473 |             AgentPerspective::UserExperience => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `agents::AgentPerspective`, found `agent_perspectives::AgentPerspective`
    |
   ::: packages/sweetmcp-memory/src/cognitive/committee/core/agent_perspectives.rs:14:5
    |
14  |     UserExperience,
    |     -------------- unit variant defined here
    |
    = note: `agent_perspectives::AgentPerspective` and `agents::AgentPerspective` have similar names, but are actually distinct types
note: `agent_perspectives::AgentPerspective` is defined in module `crate::cognitive::committee::core::agent_perspectives` of the current crate
   --> packages/sweetmcp-memory/src/cognitive/committee/core/agent_perspectives.rs:10:1
    |
10  | pub enum AgentPerspective {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^
note: `agents::AgentPerspective` is defined in module `crate::cognitive::committee::core::agents` of the current crate
   --> packages/sweetmcp-memory/src/cognitive/committee/core/agents.rs:14:1
    |
14  | pub enum AgentPerspective {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/committee/core/committee.rs:480:13
    |
451 |         match &self.perspective {
    |               ----------------- this expression has type `&agents::AgentPerspective`
...
480 |             AgentPerspective::Architecture => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `agents::AgentPerspective`, found `agent_perspectives::AgentPerspective`
    |
   ::: packages/sweetmcp-memory/src/cognitive/committee/core/agent_perspectives.rs:15:5
    |
15  |     Architecture,
    |     ------------ unit variant defined here
    |
    = note: `agent_perspectives::AgentPerspective` and `agents::AgentPerspective` have similar names, but are actually distinct types
note: `agent_perspectives::AgentPerspective` is defined in module `crate::cognitive::committee::core::agent_perspectives` of the current crate
   --> packages/sweetmcp-memory/src/cognitive/committee/core/agent_perspectives.rs:10:1
    |
10  | pub enum AgentPerspective {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^
note: `agents::AgentPerspective` is defined in module `crate::cognitive::committee::core::agents` of the current crate
   --> packages/sweetmcp-memory/src/cognitive/committee/core/agents.rs:14:1
    |
14  | pub enum AgentPerspective {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/committee/core/committee.rs:487:13
    |
451 |         match &self.perspective {
    |               ----------------- this expression has type `&agents::AgentPerspective`
...
487 |             AgentPerspective::Testing => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `agents::AgentPerspective`, found `agent_perspectives::AgentPerspective`
    |
   ::: packages/sweetmcp-memory/src/cognitive/committee/core/agent_perspectives.rs:16:5
    |
16  |     Testing,
    |     ------- unit variant defined here
    |
    = note: `agent_perspectives::AgentPerspective` and `agents::AgentPerspective` have similar names, but are actually distinct types
note: `agent_perspectives::AgentPerspective` is defined in module `crate::cognitive::committee::core::agent_perspectives` of the current crate
   --> packages/sweetmcp-memory/src/cognitive/committee/core/agent_perspectives.rs:10:1
    |
10  | pub enum AgentPerspective {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^
note: `agents::AgentPerspective` is defined in module `crate::cognitive::committee::core::agents` of the current crate
   --> packages/sweetmcp-memory/src/cognitive/committee/core/agents.rs:14:1
    |
14  | pub enum AgentPerspective {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/committee/core/committee.rs:494:13
    |
451 |         match &self.perspective {
    |               ----------------- this expression has type `&agents::AgentPerspective`
...
494 |             AgentPerspective::Documentation => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `agents::AgentPerspective`, found `agent_perspectives::AgentPerspective`
    |
   ::: packages/sweetmcp-memory/src/cognitive/committee/core/agent_perspectives.rs:17:5
    |
17  |     Documentation,
    |     ------------- unit variant defined here
    |
    = note: `agent_perspectives::AgentPerspective` and `agents::AgentPerspective` have similar names, but are actually distinct types
note: `agent_perspectives::AgentPerspective` is defined in module `crate::cognitive::committee::core::agent_perspectives` of the current crate
   --> packages/sweetmcp-memory/src/cognitive/committee/core/agent_perspectives.rs:10:1
    |
10  | pub enum AgentPerspective {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^
note: `agents::AgentPerspective` is defined in module `crate::cognitive::committee::core::agents` of the current crate
   --> packages/sweetmcp-memory/src/cognitive/committee/core/agents.rs:14:1
    |
14  | pub enum AgentPerspective {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `focus_areas` found for enum `agents::AgentPerspective` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/committee/core/committee.rs:504:44
    |
504 |         let focus_areas = self.perspective.focus_areas();
    |                                            ^^^^^^^^^^^ method not found in `agents::AgentPerspective`
    |
   ::: packages/sweetmcp-memory/src/cognitive/committee/core/agents.rs:14:1
    |
14  | pub enum AgentPerspective {
    | ------------------------- method `focus_areas` not found for this enum

error[E0599]: no method named `add_suggestion` found for mutable reference `&mut agents::AgentEvaluation` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/committee/core/committee_agent.rs:171:24
    |
171 |             evaluation.add_suggestion(format!("Consider {}", focus_areas[0]));
    |                        ^^^^^^^^^^^^^^ method not found in `&mut agents::AgentEvaluation`

error[E0599]: no method named `add_suggestion` found for mutable reference `&mut agents::AgentEvaluation` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/committee/core/committee_agent.rs:240:24
    |
240 |             evaluation.add_suggestion(format!("Consider feedback: {}", feedback));
    |                        ^^^^^^^^^^^^^^ method not found in `&mut agents::AgentEvaluation`

error[E0599]: no method named `should_continue` found for struct `std::string::String` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/committee/consensus/committee.rs:161:37
    |
161 |                         if feedback.should_continue() {
    |                                     ^^^^^^^^^^^^^^^ method not found in `std::string::String`

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/committee/consensus/committee.rs:295:16
    |
295 |         if let Ok(bus) = self.event_bus.read().await {
    |                ^^^^^^^   --------------------------- this expression has type `tokio::sync::RwLockReadGuard<'_, EventBus>`
    |                |
    |                expected `RwLockReadGuard<'_, EventBus>`, found `Result<_, _>`
    |
    = note: expected struct `tokio::sync::RwLockReadGuard<'_, EventBus>`
                 found enum `std::result::Result<_, _>`

error[E0599]: no method named `evaluate_with_phase` found for struct `agents::CommitteeAgent` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/committee/consensus/evaluation_phases.rs:257:22
    |
256 | /                 agent_clone
257 | |                     .evaluate_with_phase(
    | |                     -^^^^^^^^^^^^^^^^^^^ method not found in `agents::CommitteeAgent`
    | |_____________________|
    |
    |
   ::: packages/sweetmcp-memory/src/cognitive/committee/core/agents.rs:103:1
    |
103 |   pub struct CommitteeAgent {
    |   ------------------------- method `evaluate_with_phase` not found for this struct

error[E0599]: no variant named `AgentStarted` found for enum `CommitteeEvent`
   --> packages/sweetmcp-memory/src/cognitive/committee/evaluation/agent_orchestration.rs:121:45
    |
121 |             let _ = tx.send(CommitteeEvent::AgentStarted {
    |                                             ^^^^^^^^^^^^ variant not found in `CommitteeEvent`
    |
   ::: packages/sweetmcp-memory/src/cognitive/committee/consensus/events.rs:9:1
    |
9   | pub enum CommitteeEvent {
    | ----------------------- variant `AgentStarted` not found here

error[E0277]: `std::result::Result<(), tokio::sync::mpsc::error::SendError<CommitteeEvent>>` is not a future
   --> packages/sweetmcp-memory/src/cognitive/committee/evaluation/agent_orchestration.rs:124:16
    |
124 |             }).await;
    |                ^^^^^ `std::result::Result<(), tokio::sync::mpsc::error::SendError<CommitteeEvent>>` is not a future
    |
    = help: the trait `futures::Future` is not implemented for `std::result::Result<(), tokio::sync::mpsc::error::SendError<CommitteeEvent>>`
    = note: std::result::Result<(), tokio::sync::mpsc::error::SendError<CommitteeEvent>> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::result::Result<(), tokio::sync::mpsc::error::SendError<CommitteeEvent>>` to implement `std::future::IntoFuture`
help: remove the `.await`
    |
124 -             }).await;
124 +             });
    |

error[E0063]: missing fields `execution_time_ms` and `phase` in initializer of `CommitteeEvent`
   --> packages/sweetmcp-memory/src/cognitive/committee/evaluation/agent_orchestration.rs:139:33
    |
139 |                 let _ = tx.send(CommitteeEvent::AgentEvaluation {
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `execution_time_ms` and `phase`

error[E0277]: `std::result::Result<(), tokio::sync::mpsc::error::SendError<CommitteeEvent>>` is not a future
   --> packages/sweetmcp-memory/src/cognitive/committee/evaluation/agent_orchestration.rs:142:20
    |
142 |                 }).await;
    |                    ^^^^^ `std::result::Result<(), tokio::sync::mpsc::error::SendError<CommitteeEvent>>` is not a future
    |
    = help: the trait `futures::Future` is not implemented for `std::result::Result<(), tokio::sync::mpsc::error::SendError<CommitteeEvent>>`
    = note: std::result::Result<(), tokio::sync::mpsc::error::SendError<CommitteeEvent>> must be a future or must implement `IntoFuture` to be awaited
    = note: required for `std::result::Result<(), tokio::sync::mpsc::error::SendError<CommitteeEvent>>` to implement `std::future::IntoFuture`
help: remove the `.await`
    |
142 -                 }).await;
142 +                 });
    |

error[E0599]: no variant named `AgentStarted` found for enum `CommitteeEvent`
  --> packages/sweetmcp-memory/src/cognitive/committee/evaluation/execution.rs:75:57
   |
75 |                 if let Err(_) = tx.send(CommitteeEvent::AgentStarted {
   |                                                         ^^^^^^^^^^^^ variant not found in `CommitteeEvent`
   |
  ::: packages/sweetmcp-memory/src/cognitive/committee/consensus/events.rs:9:1
   |
9  | pub enum CommitteeEvent {
   | ----------------------- variant `AgentStarted` not found here

error[E0277]: `std::result::Result<(), tokio::sync::mpsc::error::SendError<CommitteeEvent>>` is not a future
  --> packages/sweetmcp-memory/src/cognitive/committee/evaluation/execution.rs:78:20
   |
78 |                 }).await {
   |                    ^^^^^ `std::result::Result<(), tokio::sync::mpsc::error::SendError<CommitteeEvent>>` is not a future
   |
   = help: the trait `futures::Future` is not implemented for `std::result::Result<(), tokio::sync::mpsc::error::SendError<CommitteeEvent>>`
   = note: std::result::Result<(), tokio::sync::mpsc::error::SendError<CommitteeEvent>> must be a future or must implement `IntoFuture` to be awaited
   = note: required for `std::result::Result<(), tokio::sync::mpsc::error::SendError<CommitteeEvent>>` to implement `std::future::IntoFuture`
help: remove the `.await`
   |
78 -                 }).await {
78 +                 }) {
   |

error[E0063]: missing fields `execution_time_ms` and `phase` in initializer of `CommitteeEvent`
  --> packages/sweetmcp-memory/src/cognitive/committee/evaluation/execution.rs:96:45
   |
96 |                     if let Err(_) = tx.send(CommitteeEvent::AgentEvaluation {
   |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `execution_time_ms` and `phase`

error[E0277]: `std::result::Result<(), tokio::sync::mpsc::error::SendError<CommitteeEvent>>` is not a future
  --> packages/sweetmcp-memory/src/cognitive/committee/evaluation/execution.rs:99:24
   |
99 |                     }).await {
   |                        ^^^^^ `std::result::Result<(), tokio::sync::mpsc::error::SendError<CommitteeEvent>>` is not a future
   |
   = help: the trait `futures::Future` is not implemented for `std::result::Result<(), tokio::sync::mpsc::error::SendError<CommitteeEvent>>`
   = note: std::result::Result<(), tokio::sync::mpsc::error::SendError<CommitteeEvent>> must be a future or must implement `IntoFuture` to be awaited
   = note: required for `std::result::Result<(), tokio::sync::mpsc::error::SendError<CommitteeEvent>>` to implement `std::future::IntoFuture`
help: remove the `.await`
   |
99 -                     }).await {
99 +                     }) {
   |

error[E0616]: field `cache` of struct `Committee` is private
  --> packages/sweetmcp-memory/src/cognitive/committee/evaluation/management.rs:93:26
   |
93 |         let cache = self.cache.read().await;
   |                          ^^^^^ private field

error[E0616]: field `cache` of struct `Committee` is private
   --> packages/sweetmcp-memory/src/cognitive/committee/evaluation/management.rs:128:14
    |
128 |         self.cache.write().await.clear();
    |              ^^^^^ private field

error[E0616]: field `cache` of struct `Committee` is private
   --> packages/sweetmcp-memory/src/cognitive/committee/evaluation/management.rs:133:14
    |
133 |         self.cache.read().await.len()
    |              ^^^^^ private field

warning: unused variable: `state`
  --> packages/sweetmcp-memory/src/cognitive/compiler.rs:19:9
   |
19 |         state: &CodeState,
   |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`
   |
   = note: `#[warn(unused_variables)]` on by default

error[E0277]: the trait bound `&str: surrealdb::opt::IntoEndpoint<surrealdb::engine::any::Any>` is not satisfied
   --> packages/sweetmcp-memory/src/cognitive/manager.rs:169:73
    |
169 |         let db = surrealdb::Surreal::new::<surrealdb::engine::any::Any>(surreal_url)
    |                  ------------------------------------------------------ ^^^^^^^^^^^ the trait `surrealdb::opt::IntoEndpoint<surrealdb::engine::any::Any>` is not implemented for `&str`
    |                  |
    |                  required by a bound introduced by this call
    |
    = help: the following other types implement trait `surrealdb::opt::IntoEndpoint<Scheme>`:
              `&str` implements `surrealdb::opt::IntoEndpoint<surrealdb::engine::local::SurrealKv>`
              `&str` implements `surrealdb::opt::IntoEndpoint<surrealdb::engine::remote::http::Http>`
              `&str` implements `surrealdb::opt::IntoEndpoint<surrealdb::engine::remote::http::Https>`
              `&str` implements `surrealdb::opt::IntoEndpoint<surrealdb::engine::remote::ws::Ws>`
              `&str` implements `surrealdb::opt::IntoEndpoint<surrealdb::engine::remote::ws::Wss>`
note: required by a bound in `surrealdb::method::<impl Surreal<C>>::new`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/surrealdb-2.3.7/src/api/method/mod.rs:253:30
    |
253 |     pub fn new<P>(address: impl IntoEndpoint<P, Client = C>) -> Connect<C, Self> {
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `surrealdb::method::<impl Surreal<C>>::new`

error[E0277]: `?` couldn't convert the error to `utils::error::Error`
   --> packages/sweetmcp-memory/src/cognitive/manager.rs:183:58
    |
183 |         let llm_provider = create_llm_provider(&settings)?;
    |                            ------------------------------^ the trait `std::convert::From<anyhow::Error>` is not implemented for `utils::error::Error`
    |                            |
    |                            this can't be annotated with `?` because it has type `Result<_, anyhow::Error>`
    |
note: `utils::error::Error` needs to implement `From<anyhow::Error>`
   --> packages/sweetmcp-memory/src/utils/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              `utils::error::Error` implements `std::convert::From<reqwest::Error>`
              `utils::error::Error` implements `std::convert::From<serde_json::Error>`
              `utils::error::Error` implements `std::convert::From<std::io::Error>`
              `utils::error::Error` implements `std::convert::From<surrealdb::Error>`

error[E0277]: `?` couldn't convert the error to `utils::error::Error`
   --> packages/sweetmcp-memory/src/cognitive/manager.rs:206:94
    |
206 |         let quantum_router = Arc::new(QuantumRouter::new(state_manager, quantum_config).await?);
    |                                       -------------------------------------------------------^ the trait `std::convert::From<quantum::types::CognitiveError>` is not implemented for `utils::error::Error`
    |                                       |
    |                                       this can't be annotated with `?` because it has type `Result<_, quantum::types::CognitiveError>`
    |
note: `utils::error::Error` needs to implement `From<quantum::types::CognitiveError>`
   --> packages/sweetmcp-memory/src/utils/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
note: alternatively, `quantum::types::CognitiveError` needs to implement `Into<utils::error::Error>`
   --> packages/sweetmcp-memory/src/cognitive/quantum/types.rs:11:1
    |
11  | pub enum CognitiveError {
    | ^^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              `utils::error::Error` implements `std::convert::From<reqwest::Error>`
              `utils::error::Error` implements `std::convert::From<serde_json::Error>`
              `utils::error::Error` implements `std::convert::From<std::io::Error>`
              `utils::error::Error` implements `std::convert::From<surrealdb::Error>`

error[E0599]: no function or associated item named `new_lock_free` found for struct `EvolutionEngine` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/manager.rs:209:58
    |
209 |         let evolution_engine = Arc::new(EvolutionEngine::new_lock_free(settings.evolution_rate));
    |                                                          ^^^^^^^^^^^^^ function or associated item not found in `EvolutionEngine`
    |
   ::: packages/sweetmcp-memory/src/cognitive/evolution.rs:205:1
    |
205 | pub struct EvolutionEngine {
    | -------------------------- function or associated item `new_lock_free` not found for this struct
    |
note: if you're trying to build a new `EvolutionEngine`, consider using `EvolutionEngine::new` which returns `EvolutionEngine`
   --> packages/sweetmcp-memory/src/cognitive/evolution.rs:212:5
    |
212 |     pub fn new(initial_state: CodeState, max_generations: u64) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `utils::error::Error`
   --> packages/sweetmcp-memory/src/cognitive/manager.rs:305:106
    |
305 |             let cognitive_memory = coordinator.enhance_memory_cognitively_lock_free(memory.clone()).await?;
    |                                    ----------------------------------------------------------------------^ the trait `std::convert::From<anyhow::Error>` is not implemented for `utils::error::Error`
    |                                    |
    |                                    this can't be annotated with `?` because it has type `Result<_, anyhow::Error>`
    |
note: `utils::error::Error` needs to implement `From<anyhow::Error>`
   --> packages/sweetmcp-memory/src/utils/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              `utils::error::Error` implements `std::convert::From<reqwest::Error>`
              `utils::error::Error` implements `std::convert::From<serde_json::Error>`
              `utils::error::Error` implements `std::convert::From<std::io::Error>`
              `utils::error::Error` implements `std::convert::From<surrealdb::Error>`

error[E0277]: `?` couldn't convert the error to `utils::error::Error`
   --> packages/sweetmcp-memory/src/cognitive/manager.rs:316:23
    |
314 | /             coordinator
315 | |                 .store_cognitive_metadata_lock_free(&stored.id, &cognitive_memory)
316 | |                 .await?;
    | |                      -^ the trait `std::convert::From<anyhow::Error>` is not implemented for `utils::error::Error`
    | |______________________|
    |                        this can't be annotated with `?` because it has type `Result<_, anyhow::Error>`
    |
note: `utils::error::Error` needs to implement `From<anyhow::Error>`
   --> packages/sweetmcp-memory/src/utils/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              `utils::error::Error` implements `std::convert::From<reqwest::Error>`
              `utils::error::Error` implements `std::convert::From<serde_json::Error>`
              `utils::error::Error` implements `std::convert::From<std::io::Error>`
              `utils::error::Error` implements `std::convert::From<surrealdb::Error>`

error[E0277]: `?` couldn't convert the error to `utils::error::Error`
   --> packages/sweetmcp-memory/src/cognitive/manager.rs:340:107
    |
340 |             let cognitive_memory = coordinator.enhance_memory_cognitively_lock_free(updated.clone()).await?;
    |                                    -----------------------------------------------------------------------^ the trait `std::convert::From<anyhow::Error>` is not implemented for `utils::error::Error`
    |                                    |
    |                                    this can't be annotated with `?` because it has type `Result<_, anyhow::Error>`
    |
note: `utils::error::Error` needs to implement `From<anyhow::Error>`
   --> packages/sweetmcp-memory/src/utils/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              `utils::error::Error` implements `std::convert::From<reqwest::Error>`
              `utils::error::Error` implements `std::convert::From<serde_json::Error>`
              `utils::error::Error` implements `std::convert::From<std::io::Error>`
              `utils::error::Error` implements `std::convert::From<surrealdb::Error>`

error[E0277]: `?` couldn't convert the error to `utils::error::Error`
   --> packages/sweetmcp-memory/src/cognitive/manager.rs:343:23
    |
341 | /             coordinator
342 | |                 .store_cognitive_metadata_lock_free(&updated.id, &cognitive_memory)
343 | |                 .await?;
    | |                      -^ the trait `std::convert::From<anyhow::Error>` is not implemented for `utils::error::Error`
    | |______________________|
    |                        this can't be annotated with `?` because it has type `Result<_, anyhow::Error>`
    |
note: `utils::error::Error` needs to implement `From<anyhow::Error>`
   --> packages/sweetmcp-memory/src/utils/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              `utils::error::Error` implements `std::convert::From<reqwest::Error>`
              `utils::error::Error` implements `std::convert::From<serde_json::Error>`
              `utils::error::Error` implements `std::convert::From<std::io::Error>`
              `utils::error::Error` implements `std::convert::From<surrealdb::Error>`

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/manager.rs:355:9
    |
355 |         coordinator.enhance_memory_cognitively_lock_free(memory).await
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `utils::error::Error`, found `anyhow::Error`
    |
    = note: `anyhow::Error` and `utils::error::Error` have similar names, but are actually distinct types
note: `anyhow::Error` is defined in crate `anyhow`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/anyhow-1.0.98/src/lib.rs:393:1
    |
393 | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `utils::error::Error` is defined in the current crate
   --> packages/sweetmcp-memory/src/utils/error.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^

error[E0609]: no field `metadata` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:147:19
    |
147 |         new_state.metadata.applied_actions.push(action.to_string());
    |                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:148:19
    |
148 |         new_state.metadata.optimization_level += 0.1;
    |                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:173:19
    |
173 |         new_state.metadata.applied_actions.push(action.to_string());
    |                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:174:19
    |
174 |         new_state.metadata.optimization_level += 0.15;
    |                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:198:19
    |
198 |         new_state.metadata.applied_actions.push(action.to_string());
    |                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:199:19
    |
199 |         new_state.metadata.optimization_level += 0.12;
    |                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:218:19
    |
218 |         new_state.metadata.applied_actions.push(action.to_string());
    |                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:219:19
    |
219 |         new_state.metadata.optimization_level += 0.2;
    |                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:220:19
    |
220 |         new_state.metadata.parallelization_level += 0.3;
    |                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:239:19
    |
239 |         new_state.metadata.applied_actions.push(action.to_string());
    |                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:240:19
    |
240 |         new_state.metadata.optimization_level += 0.08;
    |                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:259:19
    |
259 |         new_state.metadata.applied_actions.push(action.to_string());
    |                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:260:19
    |
260 |         new_state.metadata.optimization_level += 0.15;
    |                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:279:19
    |
279 |         new_state.metadata.applied_actions.push(action.to_string());
    |                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:280:19
    |
280 |         new_state.metadata.optimization_level += 0.18;
    |                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:299:19
    |
299 |         new_state.metadata.applied_actions.push(action.to_string());
    |                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:300:19
    |
300 |         new_state.metadata.optimization_level += 0.12;
    |                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:318:19
    |
318 |         new_state.metadata.applied_actions.push(action.to_string());
    |                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:319:19
    |
319 |         new_state.metadata.optimization_level += 0.1;
    |                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:337:19
    |
337 |         new_state.metadata.applied_actions.push(action.to_string());
    |                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:338:19
    |
338 |         new_state.metadata.optimization_level += 0.25;
    |                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:358:19
    |
358 |         new_state.metadata.applied_actions.push(action.to_string());
    |                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:359:19
    |
359 |         new_state.metadata.optimization_level += 0.3;
    |                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:360:19
    |
360 |         new_state.metadata.risk_level += 0.1;
    |                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:379:19
    |
379 |         new_state.metadata.applied_actions.push(action.to_string());
    |                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:380:19
    |
380 |         new_state.metadata.optimization_level += 0.25;
    |                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:381:19
    |
381 |         new_state.metadata.risk_level += 0.1;
    |                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:399:19
    |
399 |         new_state.metadata.applied_actions.push(action.to_string());
    |                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:400:19
    |
400 |         new_state.metadata.optimization_level += 0.15;
    |                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:419:19
    |
419 |         new_state.metadata.applied_actions.push(action.to_string());
    |                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:420:19
    |
420 |         new_state.metadata.optimization_level += 0.2;
    |                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:439:19
    |
439 |         new_state.metadata.applied_actions.push(action.to_string());
    |                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:440:19
    |
440 |         new_state.metadata.optimization_level += 0.35;
    |                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:459:19
    |
459 |         new_state.metadata.applied_actions.push(action.to_string());
    |                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:460:19
    |
460 |         new_state.metadata.optimization_level += 0.25;
    |                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:479:19
    |
479 |         new_state.metadata.applied_actions.push(action.to_string());
    |                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:480:19
    |
480 |         new_state.metadata.optimization_level += 0.2;
    |                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:499:19
    |
499 |         new_state.metadata.applied_actions.push(action.to_string());
    |                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_applicator.rs:500:19
    |
500 |         new_state.metadata.optimization_level += 0.02;
    |                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0061]: this function takes 4 arguments but 2 arguments were supplied
  --> packages/sweetmcp-memory/src/cognitive/mcts/controller.rs:48:34
   |
48 |         let committee = Arc::new(EvaluationCommittee::new(event_tx, num_cpus::get().min(4)).await?);
   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------
   |                                                          |          |
   |                                                          |          argument #2 of type `f64` is missing
   |                                                          argument #4 of type `tokio::sync::mpsc::UnboundedSender<CommitteeEvent>` is missing
   |
note: expected `Vec<CommitteeAgent>`, found `Sender<CommitteeEvent>`
  --> packages/sweetmcp-memory/src/cognitive/mcts/controller.rs:48:59
   |
48 |         let committee = Arc::new(EvaluationCommittee::new(event_tx, num_cpus::get().min(4)).await?);
   |                                                           ^^^^^^^^
   = note: expected struct `Vec<agents::CommitteeAgent>`
              found struct `tokio::sync::mpsc::Sender<CommitteeEvent>`
note: associated function defined here
  --> packages/sweetmcp-memory/src/cognitive/committee/consensus/committee.rs:51:12
   |
51 |     pub fn new(
   |            ^^^
52 |         agents: Vec<CommitteeAgent>,
   |         ---------------------------
53 |         consensus_threshold: f64,
   |         ------------------------
54 |         max_concurrent: usize,
55 |         event_tx: mpsc::UnboundedSender<CommitteeEvent>,
   |         -----------------------------------------------
help: provide the arguments
   |
48 -         let committee = Arc::new(EvaluationCommittee::new(event_tx, num_cpus::get().min(4)).await?);
48 +         let committee = Arc::new(EvaluationCommittee::new(/* Vec<agents::CommitteeAgent> */, /* f64 */, num_cpus::get().min(4), /* tokio::sync::mpsc::UnboundedSender<CommitteeEvent> */).await?);
   |

error[E0277]: `Committee` is not a future
  --> packages/sweetmcp-memory/src/cognitive/mcts/controller.rs:48:93
   |
48 |         let committee = Arc::new(EvaluationCommittee::new(event_tx, num_cpus::get().min(4)).await?);
   |                                  ---------------------------------------------------------- ^^^^^ `Committee` is not a future
   |                                  |
   |                                  this call returns `Committee`
   |
   = help: the trait `futures::Future` is not implemented for `Committee`
   = note: Committee must be a future or must implement `IntoFuture` to be awaited
   = note: required for `Committee` to implement `std::future::IntoFuture`
help: remove the `.await`
   |
48 -         let committee = Arc::new(EvaluationCommittee::new(event_tx, num_cpus::get().min(4)).await?);
48 +         let committee = Arc::new(EvaluationCommittee::new(event_tx, num_cpus::get().min(4))?);
   |

error[E0282]: type annotations needed for `std::sync::Arc<_>`
  --> packages/sweetmcp-memory/src/cognitive/mcts/controller.rs:48:13
   |
48 |         let committee = Arc::new(EvaluationCommittee::new(event_tx, num_cpus::get().min(4)).await?);
   |             ^^^^^^^^^
...
55 |             committee.clone(),
   |                       ----- type must be known at this point
   |
help: consider giving `committee` an explicit type, where the type for type parameter `T` is specified
   |
48 |         let committee: std::sync::Arc<T> = Arc::new(EvaluationCommittee::new(event_tx, num_cpus::get().min(4)).await?);
   |                      +++++++++++++++++++

error[E0061]: this function takes 1 argument but 3 arguments were supplied
  --> packages/sweetmcp-memory/src/cognitive/mcts/controller.rs:53:34
   |
53 |         let action_coordinator = ActionCoordinator::new(
   |                                  ^^^^^^^^^^^^^^^^^^^^^^
54 |             spec.clone(),
55 |             committee.clone(),
   |             ----------------- unexpected argument #2
56 |             user_objective.clone(),
   |             ---------------------- unexpected argument #3 of type `std::string::String`
   |
note: expected `CoordinatorConfig`, found `Arc<OptimizationSpec>`
  --> packages/sweetmcp-memory/src/cognitive/mcts/controller.rs:54:13
   |
54 |             spec.clone(),
   |             ^^^^^^^^^^^^
   = note: expected struct `action_coordinator::CoordinatorConfig`
              found struct `std::sync::Arc<coordinator_types::OptimizationSpec>`
note: associated function defined here
  --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_coordinator.rs:32:12
   |
32 |     pub fn new(config: CoordinatorConfig) -> Self {
   |            ^^^ -------------------------
help: remove the extra arguments
   |
54 -             spec.clone(),
54 +             /* action_coordinator::CoordinatorConfig */,
   |

error[E0061]: this function takes 1 argument but 3 arguments were supplied
  --> packages/sweetmcp-memory/src/cognitive/mcts/controller.rs:60:36
   |
60 |         let mut temp_coordinator = ActionCoordinator::new(
   |                                    ^^^^^^^^^^^^^^^^^^^^^^
61 |             spec.clone(),
62 |             committee.clone(),
   |             ----------------- unexpected argument #2
63 |             user_objective.clone(),
   |             ---------------------- unexpected argument #3 of type `std::string::String`
   |
note: expected `CoordinatorConfig`, found `Arc<OptimizationSpec>`
  --> packages/sweetmcp-memory/src/cognitive/mcts/controller.rs:61:13
   |
61 |             spec.clone(),
   |             ^^^^^^^^^^^^
   = note: expected struct `action_coordinator::CoordinatorConfig`
              found struct `std::sync::Arc<coordinator_types::OptimizationSpec>`
note: associated function defined here
  --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_coordinator.rs:32:12
   |
32 |     pub fn new(config: CoordinatorConfig) -> Self {
   |            ^^^ -------------------------
help: remove the extra arguments
   |
61 -             spec.clone(),
61 +             /* action_coordinator::CoordinatorConfig */,
   |

error[E0061]: this function takes 1 argument but 2 arguments were supplied
   --> packages/sweetmcp-memory/src/cognitive/mcts/controller.rs:68:25
    |
68  |         let root_node = MCTSNode::new_root(initial_state, untried_actions);
    |                         ^^^^^^^^^^^^^^^^^^                --------------- unexpected argument #2 of type `Vec<std::string::String>`
    |
note: associated function defined here
   --> packages/sweetmcp-memory/src/cognitive/mcts/types/node_types.rs:141:12
    |
141 |     pub fn new_root(state: CodeState) -> Self {
    |            ^^^^^^^^
help: remove the extra argument
    |
68  -         let root_node = MCTSNode::new_root(initial_state, untried_actions);
68  +         let root_node = MCTSNode::new_root(initial_state);
    |

error[E0061]: this function takes 4 arguments but 2 arguments were supplied
   --> packages/sweetmcp-memory/src/cognitive/mcts/controller.rs:104:34
    |
104 |         let committee = Arc::new(EvaluationCommittee::new(event_tx, num_cpus::get().min(4)).await?);
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------
    |                                                          |          |
    |                                                          |          argument #2 of type `f64` is missing
    |                                                          argument #4 of type `tokio::sync::mpsc::UnboundedSender<CommitteeEvent>` is missing
    |
note: expected `Vec<CommitteeAgent>`, found `Sender<CommitteeEvent>`
   --> packages/sweetmcp-memory/src/cognitive/mcts/controller.rs:104:59
    |
104 |         let committee = Arc::new(EvaluationCommittee::new(event_tx, num_cpus::get().min(4)).await?);
    |                                                           ^^^^^^^^
    = note: expected struct `Vec<agents::CommitteeAgent>`
               found struct `tokio::sync::mpsc::Sender<CommitteeEvent>`
note: associated function defined here
   --> packages/sweetmcp-memory/src/cognitive/committee/consensus/committee.rs:51:12
    |
51  |     pub fn new(
    |            ^^^
52  |         agents: Vec<CommitteeAgent>,
    |         ---------------------------
53  |         consensus_threshold: f64,
    |         ------------------------
54  |         max_concurrent: usize,
55  |         event_tx: mpsc::UnboundedSender<CommitteeEvent>,
    |         -----------------------------------------------
help: provide the arguments
    |
104 -         let committee = Arc::new(EvaluationCommittee::new(event_tx, num_cpus::get().min(4)).await?);
104 +         let committee = Arc::new(EvaluationCommittee::new(/* Vec<agents::CommitteeAgent> */, /* f64 */, num_cpus::get().min(4), /* tokio::sync::mpsc::UnboundedSender<CommitteeEvent> */).await?);
    |

error[E0277]: `Committee` is not a future
   --> packages/sweetmcp-memory/src/cognitive/mcts/controller.rs:104:93
    |
104 |         let committee = Arc::new(EvaluationCommittee::new(event_tx, num_cpus::get().min(4)).await?);
    |                                  ---------------------------------------------------------- ^^^^^ `Committee` is not a future
    |                                  |
    |                                  this call returns `Committee`
    |
    = help: the trait `futures::Future` is not implemented for `Committee`
    = note: Committee must be a future or must implement `IntoFuture` to be awaited
    = note: required for `Committee` to implement `std::future::IntoFuture`
help: remove the `.await`
    |
104 -         let committee = Arc::new(EvaluationCommittee::new(event_tx, num_cpus::get().min(4)).await?);
104 +         let committee = Arc::new(EvaluationCommittee::new(event_tx, num_cpus::get().min(4))?);
    |

error[E0282]: type annotations needed for `std::sync::Arc<_>`
   --> packages/sweetmcp-memory/src/cognitive/mcts/controller.rs:104:13
    |
104 |         let committee = Arc::new(EvaluationCommittee::new(event_tx, num_cpus::get().min(4)).await?);
    |             ^^^^^^^^^
...
110 |             committee.clone(),
    |                       ----- type must be known at this point
    |
help: consider giving `committee` an explicit type, where the type for type parameter `T` is specified
    |
104 |         let committee: std::sync::Arc<T> = Arc::new(EvaluationCommittee::new(event_tx, num_cpus::get().min(4)).await?);
    |                      +++++++++++++++++++

error[E0061]: this function takes 1 argument but 3 arguments were supplied
   --> packages/sweetmcp-memory/src/cognitive/mcts/controller.rs:108:34
    |
108 |         let action_coordinator = ActionCoordinator::new(
    |                                  ^^^^^^^^^^^^^^^^^^^^^^
109 |             spec.clone(),
110 |             committee.clone(),
    |             ----------------- unexpected argument #2
111 |             user_objective.clone(),
    |             ---------------------- unexpected argument #3 of type `std::string::String`
    |
note: expected `CoordinatorConfig`, found `Arc<OptimizationSpec>`
   --> packages/sweetmcp-memory/src/cognitive/mcts/controller.rs:109:13
    |
109 |             spec.clone(),
    |             ^^^^^^^^^^^^
    = note: expected struct `action_coordinator::CoordinatorConfig`
               found struct `std::sync::Arc<coordinator_types::OptimizationSpec>`
note: associated function defined here
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_coordinator.rs:32:12
    |
32  |     pub fn new(config: CoordinatorConfig) -> Self {
    |            ^^^ -------------------------
help: remove the extra arguments
    |
109 -             spec.clone(),
109 +             /* action_coordinator::CoordinatorConfig */,
    |

error[E0061]: this function takes 1 argument but 3 arguments were supplied
   --> packages/sweetmcp-memory/src/cognitive/mcts/controller.rs:114:36
    |
114 |         let mut temp_coordinator = ActionCoordinator::new(
    |                                    ^^^^^^^^^^^^^^^^^^^^^^
115 |             spec.clone(),
116 |             committee.clone(),
    |             ----------------- unexpected argument #2
117 |             user_objective.clone(),
    |             ---------------------- unexpected argument #3 of type `std::string::String`
    |
note: expected `CoordinatorConfig`, found `Arc<OptimizationSpec>`
   --> packages/sweetmcp-memory/src/cognitive/mcts/controller.rs:115:13
    |
115 |             spec.clone(),
    |             ^^^^^^^^^^^^
    = note: expected struct `action_coordinator::CoordinatorConfig`
               found struct `std::sync::Arc<coordinator_types::OptimizationSpec>`
note: associated function defined here
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_coordinator.rs:32:12
    |
32  |     pub fn new(config: CoordinatorConfig) -> Self {
    |            ^^^ -------------------------
help: remove the extra arguments
    |
115 -             spec.clone(),
115 +             /* action_coordinator::CoordinatorConfig */,
    |

error[E0061]: this function takes 1 argument but 2 arguments were supplied
   --> packages/sweetmcp-memory/src/cognitive/mcts/controller.rs:121:25
    |
121 |         let root_node = MCTSNode::new_root(initial_state, untried_actions);
    |                         ^^^^^^^^^^^^^^^^^^                --------------- unexpected argument #2 of type `Vec<std::string::String>`
    |
note: associated function defined here
   --> packages/sweetmcp-memory/src/cognitive/mcts/types/node_types.rs:141:12
    |
141 |     pub fn new_root(state: CodeState) -> Self {
    |            ^^^^^^^^
help: remove the extra argument
    |
121 -         let root_node = MCTSNode::new_root(initial_state, untried_actions);
121 +         let root_node = MCTSNode::new_root(initial_state);
    |

error[E0599]: no method named `create_balanced` found for struct `MCTSFactory` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/mcts/manager.rs:32:28
   |
32 |           let mcts = factory.create_balanced(
   |                      --------^^^^^^^^^^^^^^^ this is an associated function, not a method
   |  ____________________|
   | |
33 | |             initial_state,
34 | |             performance_analyzer,
35 | |             spec,
36 | |             user_objective,
37 | |             event_tx,
38 | |         ).await?;
   | |_________- help: use associated function syntax instead: `MCTSFactory::create_balanced(initial_state, performance_analyzer, spec, user_objective, event_tx)`
   |
  ::: packages/sweetmcp-memory/src/cognitive/mcts/factory.rs:22:1
   |
22 |   pub struct MCTSFactory;
   |   ---------------------- method `create_balanced` not found for this struct
   |
   = note: found the following associated functions; to be used as methods, functions must have a `self` parameter
note: the candidate is defined in an impl for the type `MCTSFactory`
  --> packages/sweetmcp-memory/src/cognitive/mcts/factory.rs:73:5
   |
73 | /     pub async fn create_balanced(
74 | |         initial_state: CodeState,
75 | |         performance_analyzer: Arc<PerformanceAnalyzer>,
76 | |         spec: Arc<OptimizationSpec>,
77 | |         user_objective: String,
78 | |         event_tx: mpsc::Sender<CommitteeEvent>,
79 | |     ) -> Result<MCTS, CognitiveError> {
   | |_____________________________________^

error[E0599]: no method named `create_with_profile` found for struct `MCTSFactory` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/mcts/manager.rs:58:28
    |
58  |           let mcts = factory.create_with_profile(
    |                      --------^^^^^^^^^^^^^^^^^^^ this is an associated function, not a method
    |  ____________________|
    | |
59  | |             initial_state,
60  | |             performance_analyzer,
61  | |             spec,
...   |
64  | |             profile,
65  | |         ).await?;
    | |_________- help: use associated function syntax instead: `MCTSFactory::create_with_profile(initial_state, performance_analyzer, spec, user_objective, event_tx, profile)`
    |
   ::: packages/sweetmcp-memory/src/cognitive/mcts/factory.rs:22:1
    |
22  |   pub struct MCTSFactory;
    |   ---------------------- method `create_with_profile` not found for this struct
    |
    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter
note: the candidate is defined in an impl for the type `MCTSFactory`
   --> packages/sweetmcp-memory/src/cognitive/mcts/factory.rs:189:5
    |
189 | /     pub async fn create_with_profile(
190 | |         initial_state: CodeState,
191 | |         performance_analyzer: Arc<PerformanceAnalyzer>,
192 | |         spec: Arc<OptimizationSpec>,
...   |
195 | |         profile: OptimizationProfile,
196 | |     ) -> Result<MCTS, CognitiveError> {
    | |_____________________________________^

error[E0616]: field `optimization_spec` of struct `MCTS` is private
  --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:65:34
   |
65 |             let baseline = &self.optimization_spec.baseline_metrics;
   |                                  ^^^^^^^^^^^^^^^^^ private field
   |
help: a method `optimization_spec` also exists, call it with parentheses
   |
65 |             let baseline = &self.optimization_spec().baseline_metrics;
   |                                                   ++

error[E0616]: field `optimization_spec` of struct `MCTS` is private
  --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:66:38
   |
66 |             let restrictions = &self.optimization_spec.content_type.restrictions;
   |                                      ^^^^^^^^^^^^^^^^^ private field
   |
help: a method `optimization_spec` also exists, call it with parentheses
   |
66 |             let restrictions = &self.optimization_spec().content_type.restrictions;
   |                                                       ++

error[E0616]: field `executor` of struct `MCTS` is private
  --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:87:37
   |
87 |         let execution_result = self.executor.run(
   |                                     ^^^^^^^^ private field
   |
help: a method `executor` also exists, call it with parentheses
   |
87 |         let execution_result = self.executor().run(
   |                                             ++

error[E0616]: field `tree` of struct `MCTS` is private
  --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:88:23
   |
88 |             &mut self.tree,
   |                       ^^^^ private field
   |
help: a method `tree` also exists, call it with parentheses
   |
88 |             &mut self.tree(),
   |                           ++

error[E0616]: field `root_id` of struct `MCTS` is private
  --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:89:19
   |
89 |             &self.root_id,
   |                   ^^^^^^^ private field
   |
help: a method `root_id` also exists, call it with parentheses
   |
89 |             &self.root_id(),
   |                          ++

error[E0616]: field `analyzer` of struct `MCTS` is private
  --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:95:34
   |
95 |         let tree_analysis = self.analyzer.analyze_tree_structure(&self.tree, &self.root_id);
   |                                  ^^^^^^^^ private field
   |
help: a method `analyzer` also exists, call it with parentheses
   |
95 |         let tree_analysis = self.analyzer().analyze_tree_structure(&self.tree, &self.root_id);
   |                                          ++

error[E0616]: field `tree` of struct `MCTS` is private
  --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:95:72
   |
95 |         let tree_analysis = self.analyzer.analyze_tree_structure(&self.tree, &self.root_id);
   |                                                                        ^^^^ private field
   |
help: a method `tree` also exists, call it with parentheses
   |
95 |         let tree_analysis = self.analyzer.analyze_tree_structure(&self.tree(), &self.root_id);
   |                                                                            ++

error[E0616]: field `root_id` of struct `MCTS` is private
  --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:95:84
   |
95 |         let tree_analysis = self.analyzer.analyze_tree_structure(&self.tree, &self.root_id);
   |                                                                                    ^^^^^^^ private field
   |
help: a method `root_id` also exists, call it with parentheses
   |
95 |         let tree_analysis = self.analyzer.analyze_tree_structure(&self.tree, &self.root_id());
   |                                                                                           ++

error[E0616]: field `executor` of struct `MCTS` is private
  --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:96:38
   |
96 |         let best_modification = self.executor.get_best_modification(&self.tree, &self.root_id);
   |                                      ^^^^^^^^ private field
   |
help: a method `executor` also exists, call it with parentheses
   |
96 |         let best_modification = self.executor().get_best_modification(&self.tree, &self.root_id);
   |                                              ++

error[E0616]: field `tree` of struct `MCTS` is private
  --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:96:75
   |
96 |         let best_modification = self.executor.get_best_modification(&self.tree, &self.root_id);
   |                                                                           ^^^^ private field
   |
help: a method `tree` also exists, call it with parentheses
   |
96 |         let best_modification = self.executor.get_best_modification(&self.tree(), &self.root_id);
   |                                                                               ++

error[E0616]: field `root_id` of struct `MCTS` is private
  --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:96:87
   |
96 |         let best_modification = self.executor.get_best_modification(&self.tree, &self.root_id);
   |                                                                                       ^^^^^^^ private field
   |
help: a method `root_id` also exists, call it with parentheses
   |
96 |         let best_modification = self.executor.get_best_modification(&self.tree, &self.root_id());
   |                                                                                              ++

error[E0616]: field `executor` of struct `MCTS` is private
  --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:97:30
   |
97 |         let best_path = self.executor.get_best_path(&self.tree, &self.root_id);
   |                              ^^^^^^^^ private field
   |
help: a method `executor` also exists, call it with parentheses
   |
97 |         let best_path = self.executor().get_best_path(&self.tree, &self.root_id);
   |                                      ++

error[E0616]: field `tree` of struct `MCTS` is private
  --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:97:59
   |
97 |         let best_path = self.executor.get_best_path(&self.tree, &self.root_id);
   |                                                           ^^^^ private field
   |
help: a method `tree` also exists, call it with parentheses
   |
97 |         let best_path = self.executor.get_best_path(&self.tree(), &self.root_id);
   |                                                               ++

error[E0616]: field `root_id` of struct `MCTS` is private
  --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:97:71
   |
97 |         let best_path = self.executor.get_best_path(&self.tree, &self.root_id);
   |                                                                       ^^^^^^^ private field
   |
help: a method `root_id` also exists, call it with parentheses
   |
97 |         let best_path = self.executor.get_best_path(&self.tree, &self.root_id());
   |                                                                              ++

error[E0616]: field `analyzer` of struct `MCTS` is private
  --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:98:32
   |
98 |         let bottlenecks = self.analyzer.find_bottlenecks(&self.tree, &self.root_id);
   |                                ^^^^^^^^ private field
   |
help: a method `analyzer` also exists, call it with parentheses
   |
98 |         let bottlenecks = self.analyzer().find_bottlenecks(&self.tree, &self.root_id);
   |                                        ++

error[E0616]: field `tree` of struct `MCTS` is private
  --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:98:64
   |
98 |         let bottlenecks = self.analyzer.find_bottlenecks(&self.tree, &self.root_id);
   |                                                                ^^^^ private field
   |
help: a method `tree` also exists, call it with parentheses
   |
98 |         let bottlenecks = self.analyzer.find_bottlenecks(&self.tree(), &self.root_id);
   |                                                                    ++

error[E0616]: field `root_id` of struct `MCTS` is private
  --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:98:76
   |
98 |         let bottlenecks = self.analyzer.find_bottlenecks(&self.tree, &self.root_id);
   |                                                                            ^^^^^^^ private field
   |
help: a method `root_id` also exists, call it with parentheses
   |
98 |         let bottlenecks = self.analyzer.find_bottlenecks(&self.tree, &self.root_id());
   |                                                                                   ++

error[E0616]: field `action_coordinator` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:107:37
    |
107 |             coordinator_stats: self.action_coordinator.get_statistics(),
    |                                     ^^^^^^^^^^^^^^^^^^ private field
    |
help: a method `action_coordinator` also exists, call it with parentheses
    |
107 |             coordinator_stats: self.action_coordinator().get_statistics(),
    |                                                       ++

error[E0616]: field `executor` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:159:37
    |
159 |         let execution_result = self.executor.run_parallel(
    |                                     ^^^^^^^^ private field
    |
help: a method `executor` also exists, call it with parentheses
    |
159 |         let execution_result = self.executor().run_parallel(
    |                                             ++

error[E0616]: field `tree` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:160:23
    |
160 |             &mut self.tree,
    |                       ^^^^ private field
    |
help: a method `tree` also exists, call it with parentheses
    |
160 |             &mut self.tree(),
    |                           ++

error[E0616]: field `root_id` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:161:19
    |
161 |             &self.root_id,
    |                   ^^^^^^^ private field
    |
help: a method `root_id` also exists, call it with parentheses
    |
161 |             &self.root_id(),
    |                          ++

error[E0616]: field `analyzer` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:166:34
    |
166 |         let tree_analysis = self.analyzer.analyze_tree_structure(&self.tree, &self.root_id);
    |                                  ^^^^^^^^ private field
    |
help: a method `analyzer` also exists, call it with parentheses
    |
166 |         let tree_analysis = self.analyzer().analyze_tree_structure(&self.tree, &self.root_id);
    |                                          ++

error[E0616]: field `tree` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:166:72
    |
166 |         let tree_analysis = self.analyzer.analyze_tree_structure(&self.tree, &self.root_id);
    |                                                                        ^^^^ private field
    |
help: a method `tree` also exists, call it with parentheses
    |
166 |         let tree_analysis = self.analyzer.analyze_tree_structure(&self.tree(), &self.root_id);
    |                                                                            ++

error[E0616]: field `root_id` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:166:84
    |
166 |         let tree_analysis = self.analyzer.analyze_tree_structure(&self.tree, &self.root_id);
    |                                                                                    ^^^^^^^ private field
    |
help: a method `root_id` also exists, call it with parentheses
    |
166 |         let tree_analysis = self.analyzer.analyze_tree_structure(&self.tree, &self.root_id());
    |                                                                                           ++

error[E0616]: field `executor` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:167:38
    |
167 |         let best_modification = self.executor.get_best_modification(&self.tree, &self.root_id);
    |                                      ^^^^^^^^ private field
    |
help: a method `executor` also exists, call it with parentheses
    |
167 |         let best_modification = self.executor().get_best_modification(&self.tree, &self.root_id);
    |                                              ++

error[E0616]: field `tree` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:167:75
    |
167 |         let best_modification = self.executor.get_best_modification(&self.tree, &self.root_id);
    |                                                                           ^^^^ private field
    |
help: a method `tree` also exists, call it with parentheses
    |
167 |         let best_modification = self.executor.get_best_modification(&self.tree(), &self.root_id);
    |                                                                               ++

error[E0616]: field `root_id` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:167:87
    |
167 |         let best_modification = self.executor.get_best_modification(&self.tree, &self.root_id);
    |                                                                                       ^^^^^^^ private field
    |
help: a method `root_id` also exists, call it with parentheses
    |
167 |         let best_modification = self.executor.get_best_modification(&self.tree, &self.root_id());
    |                                                                                              ++

error[E0616]: field `executor` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:168:30
    |
168 |         let best_path = self.executor.get_best_path(&self.tree, &self.root_id);
    |                              ^^^^^^^^ private field
    |
help: a method `executor` also exists, call it with parentheses
    |
168 |         let best_path = self.executor().get_best_path(&self.tree, &self.root_id);
    |                                      ++

error[E0616]: field `tree` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:168:59
    |
168 |         let best_path = self.executor.get_best_path(&self.tree, &self.root_id);
    |                                                           ^^^^ private field
    |
help: a method `tree` also exists, call it with parentheses
    |
168 |         let best_path = self.executor.get_best_path(&self.tree(), &self.root_id);
    |                                                               ++

error[E0616]: field `root_id` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:168:71
    |
168 |         let best_path = self.executor.get_best_path(&self.tree, &self.root_id);
    |                                                                       ^^^^^^^ private field
    |
help: a method `root_id` also exists, call it with parentheses
    |
168 |         let best_path = self.executor.get_best_path(&self.tree, &self.root_id());
    |                                                                              ++

error[E0616]: field `analyzer` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:169:32
    |
169 |         let bottlenecks = self.analyzer.find_bottlenecks(&self.tree, &self.root_id);
    |                                ^^^^^^^^ private field
    |
help: a method `analyzer` also exists, call it with parentheses
    |
169 |         let bottlenecks = self.analyzer().find_bottlenecks(&self.tree, &self.root_id);
    |                                        ++

error[E0616]: field `tree` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:169:64
    |
169 |         let bottlenecks = self.analyzer.find_bottlenecks(&self.tree, &self.root_id);
    |                                                                ^^^^ private field
    |
help: a method `tree` also exists, call it with parentheses
    |
169 |         let bottlenecks = self.analyzer.find_bottlenecks(&self.tree(), &self.root_id);
    |                                                                    ++

error[E0616]: field `root_id` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:169:76
    |
169 |         let bottlenecks = self.analyzer.find_bottlenecks(&self.tree, &self.root_id);
    |                                                                            ^^^^^^^ private field
    |
help: a method `root_id` also exists, call it with parentheses
    |
169 |         let bottlenecks = self.analyzer.find_bottlenecks(&self.tree, &self.root_id());
    |                                                                                   ++

error[E0616]: field `action_coordinator` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:177:37
    |
177 |             coordinator_stats: self.action_coordinator.get_statistics(),
    |                                     ^^^^^^^^^^^^^^^^^^ private field
    |
help: a method `action_coordinator` also exists, call it with parentheses
    |
177 |             coordinator_stats: self.action_coordinator().get_statistics(),
    |                                                       ++

error[E0616]: field `executor` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:199:37
    |
199 |         let execution_result = self.executor.run(
    |                                     ^^^^^^^^ private field
    |
help: a method `executor` also exists, call it with parentheses
    |
199 |         let execution_result = self.executor().run(
    |                                             ++

error[E0616]: field `tree` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:200:23
    |
200 |             &mut self.tree,
    |                       ^^^^ private field
    |
help: a method `tree` also exists, call it with parentheses
    |
200 |             &mut self.tree(),
    |                           ++

error[E0616]: field `root_id` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:201:19
    |
201 |             &self.root_id,
    |                   ^^^^^^^ private field
    |
help: a method `root_id` also exists, call it with parentheses
    |
201 |             &self.root_id(),
    |                          ++

error[E0616]: field `analyzer` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:207:34
    |
207 |         let tree_analysis = self.analyzer.analyze_tree_structure(&self.tree, &self.root_id);
    |                                  ^^^^^^^^ private field
    |
help: a method `analyzer` also exists, call it with parentheses
    |
207 |         let tree_analysis = self.analyzer().analyze_tree_structure(&self.tree, &self.root_id);
    |                                          ++

error[E0616]: field `tree` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:207:72
    |
207 |         let tree_analysis = self.analyzer.analyze_tree_structure(&self.tree, &self.root_id);
    |                                                                        ^^^^ private field
    |
help: a method `tree` also exists, call it with parentheses
    |
207 |         let tree_analysis = self.analyzer.analyze_tree_structure(&self.tree(), &self.root_id);
    |                                                                            ++

error[E0616]: field `root_id` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:207:84
    |
207 |         let tree_analysis = self.analyzer.analyze_tree_structure(&self.tree, &self.root_id);
    |                                                                                    ^^^^^^^ private field
    |
help: a method `root_id` also exists, call it with parentheses
    |
207 |         let tree_analysis = self.analyzer.analyze_tree_structure(&self.tree, &self.root_id());
    |                                                                                           ++

error[E0616]: field `executor` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:208:38
    |
208 |         let best_modification = self.executor.get_best_modification(&self.tree, &self.root_id);
    |                                      ^^^^^^^^ private field
    |
help: a method `executor` also exists, call it with parentheses
    |
208 |         let best_modification = self.executor().get_best_modification(&self.tree, &self.root_id);
    |                                              ++

error[E0616]: field `tree` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:208:75
    |
208 |         let best_modification = self.executor.get_best_modification(&self.tree, &self.root_id);
    |                                                                           ^^^^ private field
    |
help: a method `tree` also exists, call it with parentheses
    |
208 |         let best_modification = self.executor.get_best_modification(&self.tree(), &self.root_id);
    |                                                                               ++

error[E0616]: field `root_id` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:208:87
    |
208 |         let best_modification = self.executor.get_best_modification(&self.tree, &self.root_id);
    |                                                                                       ^^^^^^^ private field
    |
help: a method `root_id` also exists, call it with parentheses
    |
208 |         let best_modification = self.executor.get_best_modification(&self.tree, &self.root_id());
    |                                                                                              ++

error[E0616]: field `executor` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:209:30
    |
209 |         let best_path = self.executor.get_best_path(&self.tree, &self.root_id);
    |                              ^^^^^^^^ private field
    |
help: a method `executor` also exists, call it with parentheses
    |
209 |         let best_path = self.executor().get_best_path(&self.tree, &self.root_id);
    |                                      ++

error[E0616]: field `tree` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:209:59
    |
209 |         let best_path = self.executor.get_best_path(&self.tree, &self.root_id);
    |                                                           ^^^^ private field
    |
help: a method `tree` also exists, call it with parentheses
    |
209 |         let best_path = self.executor.get_best_path(&self.tree(), &self.root_id);
    |                                                               ++

error[E0616]: field `root_id` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:209:71
    |
209 |         let best_path = self.executor.get_best_path(&self.tree, &self.root_id);
    |                                                                       ^^^^^^^ private field
    |
help: a method `root_id` also exists, call it with parentheses
    |
209 |         let best_path = self.executor.get_best_path(&self.tree, &self.root_id());
    |                                                                              ++

error[E0616]: field `analyzer` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:210:32
    |
210 |         let bottlenecks = self.analyzer.find_bottlenecks(&self.tree, &self.root_id);
    |                                ^^^^^^^^ private field
    |
help: a method `analyzer` also exists, call it with parentheses
    |
210 |         let bottlenecks = self.analyzer().find_bottlenecks(&self.tree, &self.root_id);
    |                                        ++

error[E0616]: field `tree` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:210:64
    |
210 |         let bottlenecks = self.analyzer.find_bottlenecks(&self.tree, &self.root_id);
    |                                                                ^^^^ private field
    |
help: a method `tree` also exists, call it with parentheses
    |
210 |         let bottlenecks = self.analyzer.find_bottlenecks(&self.tree(), &self.root_id);
    |                                                                    ++

error[E0616]: field `root_id` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:210:76
    |
210 |         let bottlenecks = self.analyzer.find_bottlenecks(&self.tree, &self.root_id);
    |                                                                            ^^^^^^^ private field
    |
help: a method `root_id` also exists, call it with parentheses
    |
210 |         let bottlenecks = self.analyzer.find_bottlenecks(&self.tree, &self.root_id());
    |                                                                                   ++

error[E0616]: field `action_coordinator` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:219:37
    |
219 |             coordinator_stats: self.action_coordinator.get_statistics(),
    |                                     ^^^^^^^^^^^^^^^^^^ private field
    |
help: a method `action_coordinator` also exists, call it with parentheses
    |
219 |             coordinator_stats: self.action_coordinator().get_statistics(),
    |                                                       ++

error[E0382]: borrow of moved value: `result`
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:316:35
    |
305 |             let result = self.run(iterations_to_run).await?;
    |                 ------   ---------------------------------- this reinitialization might get skipped
    |                 |
    |                 move occurs because `result` has type `MCTSResult`, which does not implement the `Copy` trait
...
312 |                 best_result = Some(result);
    |                                    ------ value moved here
...
316 |             self.adapt_parameters(&result);
    |                                   ^^^^^^^ value borrowed here after move
    |
help: consider cloning the value if the performance cost is acceptable
    |
312 |                 best_result = Some(result.clone());
    |                                          ++++++++

error[E0599]: no method named `calculate_attention_weights_simd` found for struct `std::sync::Arc<attention::core::AttentionMechanism>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/mesh.rs:145:14
    |
144 |           let output = self.mechanism
    |  ______________________-
145 | |             .calculate_attention_weights_simd(query, keys, values)
    | |_____________-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: there is a method `calculate_attention_weights` with a similar name
    |
145 -             .calculate_attention_weights_simd(query, keys, values)
145 +             .calculate_attention_weights(query, keys, values)
    |

error[E0599]: no method named `analyze_memory_context_lock_free` found for reference `&CognitiveStateManager` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/mesh.rs:464:14
    |
463 | /         state_manager
464 | |             .analyze_memory_context_lock_free(&memory)
    | |_____________-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: there is a method `analyze_memory_context` with a similar name
    |
464 -             .analyze_memory_context_lock_free(&memory)
464 +             .analyze_memory_context(&memory)
    |

error[E0599]: no method named `embed_into_buffer` found for reference `&std::sync::Arc<dyn llm_integration::LLMProvider>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/mesh.rs:484:14
    |
483 |           let embedding_result = llm_integration
    |  ________________________________-
484 | |             .embed_into_buffer(&memory.content, &mut embedding)
    | |             -^^^^^^^^^^^^^^^^^ method not found in `&std::sync::Arc<dyn llm_integration::LLMProvider>`
    | |_____________|
    |

error[E0609]: no field `optimized_code` on type `&OptimizationOutcome`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/iteration.rs:83:38
   |
83 |             Some(outcome) => outcome.optimized_code.clone(),
   |                                      ^^^^^^^^^^^^^^ unknown field

error[E0061]: this function takes 6 arguments but 5 arguments were supplied
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/iteration.rs:88:25
   |
88 |         let evolution = CognitiveCodeEvolution::new(
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
89 |             self.spec.clone(),
   |             ----------------- argument #1 of type `std::string::String` is missing
...
93 |             self.initial_relevance,
   |             ---------------------- expected `String`, found `f64`
   |
note: associated function defined here
  --> packages/sweetmcp-memory/src/cognitive/evolution.rs:31:12
   |
31 |     pub fn new(
   |            ^^^
32 |         initial_code: String,
   |         --------------------
...
37 |         user_objective: String,
   |         ----------------------
help: try using a conversion method
   |
93 |             self.initial_relevance.to_string(),
   |                                   ++++++++++++
help: provide the argument
   |
88 -         let evolution = CognitiveCodeEvolution::new(
89 -             self.spec.clone(),
90 -             base_code,
91 -             self.initial_latency,
92 -             self.initial_memory,
93 -             self.initial_relevance,
94 -         );
88 +         let evolution = CognitiveCodeEvolution::new(/* std::string::String */, base_code, self.initial_latency, self.initial_memory, self.spec.clone(), /* std::string::String */);
   |

error[E0599]: no method named `optimize` found for enum `std::result::Result` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/iteration.rs:97:33
   |
97 |         let outcome = evolution.optimize().await
   |                                 ^^^^^^^^ method not found in `std::result::Result<CognitiveCodeEvolution, cognitive::types::CognitiveError>`

error[E0609]: no field `final_latency` on type `&OptimizationOutcome`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/iteration.rs:166:55
    |
166 |         writeln!(file, "// Latency: {:.2}ms", outcome.final_latency)
    |                                                       ^^^^^^^^^^^^^ unknown field

error[E0609]: no field `final_memory` on type `&OptimizationOutcome`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/iteration.rs:168:54
    |
168 |         writeln!(file, "// Memory: {:.2}MB", outcome.final_memory)
    |                                                      ^^^^^^^^^^^^ unknown field

error[E0609]: no field `final_relevance` on type `&OptimizationOutcome`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/iteration.rs:170:56
    |
170 |         writeln!(file, "// Relevance: {:.2}%", outcome.final_relevance * 100.0)
    |                                                        ^^^^^^^^^^^^^^^ unknown field

error[E0609]: no field `optimized_code` on type `&OptimizationOutcome`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/iteration.rs:174:36
    |
174 |         write!(file, "{}", outcome.optimized_code)
    |                                    ^^^^^^^^^^^^^^ unknown field

warning: unused variable: `max_iterations`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/iteration.rs:217:9
    |
217 |         max_iterations: u64,
    |         ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_max_iterations`

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/cognitive/performance.rs:70:57
   |
70 |         let reward = self.calculate_reward_from_factors(&factors, state);
   |                           ----------------------------- ^^^^^^^^ expected `&ImpactFactors`, found `&ConsensusDecision`
   |                           |
   |                           arguments to this method are incorrect
   |
   = note: expected reference `&ImpactFactors`
              found reference `&cognitive::committee::core::evaluation::ConsensusDecision`
note: method defined here
  --> packages/sweetmcp-memory/src/cognitive/performance.rs:95:8
   |
95 |     fn calculate_reward_from_factors(&self, factors: &ImpactFactors, state: &CodeState) -> f64 {
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        -----------------------

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/cognitive/performance.rs:75:29
   |
75 |             impact_factors: factors.clone(),
   |                             ^^^^^^^^^^^^^^^ expected `ImpactFactors`, found `ConsensusDecision`

error[E0599]: no method named `search_by_content` found for struct `SurrealDBMemoryManager` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/subsystem_coordinator.rs:132:14
    |
130 |           let memories = self
    |  ________________________-
131 | |             .legacy_manager
132 | |             .search_by_content(&query.original)
    | |             -^^^^^^^^^^^^^^^^^ method not found in `SurrealDBMemoryManager`
    | |_____________|
    |
    |
   ::: packages/sweetmcp-memory/src/memory/memory_manager/core.rs:22:1
    |
22  |   pub struct SurrealDBMemoryManager {
    |   --------------------------------- method `search_by_content` not found for this struct
    |
   ::: packages/sweetmcp-memory/src/memory/memory_manager/trait_def.rs:98:8
    |
98  |       fn search_by_content(&self, query: &str, limit: usize) -> MemoryStream;
    |          ----------------- the method is available for `SurrealDBMemoryManager` here
    |
    = help: items from traits can only be used if the trait is in scope
help: trait `MemoryManager` which provides `search_by_content` is implemented but not in scope; perhaps you want to import it
    |
3   + use crate::memory::memory_manager::trait_def::MemoryManager;
    |

error[E0599]: no method named `record_fitness` found for struct `tokio::sync::RwLockWriteGuard<'_, EvolutionEngine>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/subsystem_coordinator.rs:175:19
    |
175 |         evolution.record_fitness(metrics);
    |                   ^^^^^^^^^^^^^^ method not found in `tokio::sync::RwLockWriteGuard<'_, EvolutionEngine>`

error[E0599]: no method named `evolve_if_needed` found for struct `tokio::sync::RwLockWriteGuard<'_, EvolutionEngine>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/subsystem_coordinator.rs:178:51
    |
178 |         if let Some(evolution_result) = evolution.evolve_if_needed().await {
    |                                                   ^^^^^^^^^^^^^^^^ method not found in `tokio::sync::RwLockWriteGuard<'_, EvolutionEngine>`

warning: unused variable: `i`
   --> packages/sweetmcp-memory/src/cognitive/attention/computation.rs:289:14
    |
289 |         for (i, input) in inputs.iter().enumerate() {
    |              ^ help: if this is intentional, prefix it with an underscore: `_i`

error[E0061]: this function takes 2 arguments but 1 argument was supplied
   --> packages/sweetmcp-memory/src/cognitive/quantum/mcts_integration.rs:42:39
    |
42  |         let quantum_router = Arc::new(QuantumRouter::new(quantum_config));
    |                                       ^^^^^^^^^^^^^^^^^^ -------------- argument #1 of type `std::sync::Arc<CognitiveStateManager>` is missing
    |
note: associated function defined here
   --> packages/sweetmcp-memory/src/cognitive/quantum/router.rs:146:18
    |
146 |     pub async fn new(
    |                  ^^^
147 |         state_manager: Arc<CognitiveStateManager>,
    |         -----------------------------------------
help: provide the argument
    |
42  |         let quantum_router = Arc::new(QuantumRouter::new(/* std::sync::Arc<CognitiveStateManager> */, quantum_config));
    |                                                          ++++++++++++++++++++++++++++++++++++++++++++

error[E0061]: this function takes 6 arguments but 0 arguments were supplied
  --> packages/sweetmcp-memory/src/cognitive/quantum/mcts_integration.rs:43:41
   |
43 |         let evolution_engine = Arc::new(CognitiveCodeEvolution::new());
   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^-- multiple arguments are missing
   |
note: associated function defined here
  --> packages/sweetmcp-memory/src/cognitive/evolution.rs:31:12
   |
31 |     pub fn new(
   |            ^^^
32 |         initial_code: String,
   |         --------------------
33 |         initial_latency: f64,
   |         --------------------
34 |         initial_memory: f64,
   |         -------------------
35 |         initial_relevance: f64,
   |         ----------------------
36 |         spec: Arc<OptimizationSpec>,
   |         ---------------------------
37 |         user_objective: String,
   |         ----------------------
help: provide the arguments
   |
43 |         let evolution_engine = Arc::new(CognitiveCodeEvolution::new(/* std::string::String */, /* f64 */, /* f64 */, /* f64 */, /* std::sync::Arc<coordinator_types::OptimizationSpec> */, /* std::string::String */));
   |                                                                     ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

error[E0308]: arguments to this function are incorrect
  --> packages/sweetmcp-memory/src/cognitive/quantum/mcts_integration.rs:45:37
   |
45 |         let recursive_improvement = RecursiveImprovement::new(
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
note: expected `Arc<QuantumRouter>`, found `Arc<impl Future<Output = ...>>`
  --> packages/sweetmcp-memory/src/cognitive/quantum/mcts_integration.rs:47:13
   |
47 |             quantum_router,
   |             ^^^^^^^^^^^^^^
   = note: expected struct `std::sync::Arc<QuantumRouter>`
              found struct `std::sync::Arc<impl futures::Future<Output = std::result::Result<QuantumRouter, quantum::types::CognitiveError>>>`
note: expected `Arc<CognitiveCodeEvolution>`, found `Arc<Result<CognitiveCodeEvolution, ...>>`
  --> packages/sweetmcp-memory/src/cognitive/quantum/mcts_integration.rs:48:13
   |
48 |             evolution_engine,
   |             ^^^^^^^^^^^^^^^^
   = note: expected struct `std::sync::Arc<CognitiveCodeEvolution>`
              found struct `std::sync::Arc<std::result::Result<CognitiveCodeEvolution, cognitive::types::CognitiveError>>`
note: associated function defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum/recursive_improvement.rs:32:12
   |
32 |     pub fn new(
   |            ^^^
33 |         config: QuantumOrchestrationConfig,
34 |         quantum_router: Arc<QuantumRouter>,
   |         ----------------------------------
35 |         evolution_engine: Arc<CognitiveCodeEvolution>,
   |         ---------------------------------------------

error[E0277]: the trait bound `node_types::CodeState: QuantumState` is not satisfied
  --> packages/sweetmcp-memory/src/cognitive/quantum/recursive_improvement.rs:66:17
   |
65 |             let mut quantum_mcts = crate::cognitive::quantum_mcts::QuantumMCTS::new(
   |                                    ------------------------------------------------ required by a bound introduced by this call
66 |                 current_state.clone(),
   |                 ^^^^^^^^^^^^^^^^^^^^^ the trait `QuantumState` is not implemented for `node_types::CodeState`
   |
help: this trait has no implementations, consider adding one
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:55:1
   |
55 | pub trait QuantumState: Clone + Send + Sync + 'static {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: required by a bound in `quantum_mcts::QuantumMCTS::<S>::new`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:80:9
   |
80 | impl<S: QuantumState> QuantumMCTS<S> {
   |         ^^^^^^^^^^^^ required by this bound in `QuantumMCTS::<S>::new`
81 |     /// Create new quantum MCTS instance with optimized configuration
82 |     pub fn new(initial_state: S, config: QuantumMCTSConfig) -> QuantumMCTSResult<Self> {
   |            --- required by a bound in this associated function

error[E0061]: this function takes 2 arguments but 6 arguments were supplied
  --> packages/sweetmcp-memory/src/cognitive/quantum/recursive_improvement.rs:65:36
   |
65 |             let mut quantum_mcts = crate::cognitive::quantum_mcts::QuantumMCTS::new(
   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
66 |                 current_state.clone(),
67 |                 performance_analyzer.clone(),
   |                 ---------------------------- unexpected argument #2 of type `std::sync::Arc<cognitive::performance::PerformanceAnalyzer>`
68 |                 spec.clone(),
   |                 ------------ unexpected argument #3
69 |                 user_objective.clone(),
   |                 ---------------------- unexpected argument #4 of type `std::string::String`
70 |                 event_tx.clone(),
   |                 ---------------- unexpected argument #5 of type `tokio::sync::mpsc::Sender<CommitteeEvent>`
   |
note: associated function defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:82:12
   |
82 |     pub fn new(initial_state: S, config: QuantumMCTSConfig) -> QuantumMCTSResult<Self> {
   |            ^^^
help: remove the extra arguments
   |
66 -                 current_state.clone(),
67 -                 performance_analyzer.clone(),
66 +                 current_state.clone(),
   |

error[E0277]: the trait bound `node_types::CodeState: QuantumState` is not satisfied
  --> packages/sweetmcp-memory/src/cognitive/quantum/recursive_improvement.rs:65:36
   |
65 |               let mut quantum_mcts = crate::cognitive::quantum_mcts::QuantumMCTS::new(
   |  ____________________________________^
66 | |                 current_state.clone(),
67 | |                 performance_analyzer.clone(),
68 | |                 spec.clone(),
...  |
71 | |                 mcts_config.clone(),
72 | |             )
   | |_____________^ the trait `QuantumState` is not implemented for `node_types::CodeState`
   |
help: this trait has no implementations, consider adding one
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:55:1
   |
55 | pub trait QuantumState: Clone + Send + Sync + 'static {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: required by a bound in `quantum_mcts::QuantumMCTS`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:69:27
   |
69 | pub struct QuantumMCTS<S: QuantumState> {
   |                           ^^^^^^^^^^^^ required by this bound in `QuantumMCTS`

error[E0277]: `Result<QuantumMCTS<CodeState>, CognitiveError>` is not a future
  --> packages/sweetmcp-memory/src/cognitive/quantum/recursive_improvement.rs:73:14
   |
65 |               let mut quantum_mcts = crate::cognitive::quantum_mcts::QuantumMCTS::new(
   |  ____________________________________-
66 | |                 current_state.clone(),
67 | |                 performance_analyzer.clone(),
68 | |                 spec.clone(),
...  |
71 | |                 mcts_config.clone(),
72 | |             )
   | |_____________- this call returns `std::result::Result<quantum_mcts::QuantumMCTS<node_types::CodeState>, cognitive::types::CognitiveError>`
73 |               .await?;
   |                ^^^^^ `Result<QuantumMCTS<CodeState>, CognitiveError>` is not a future
   |
   = help: the trait `futures::Future` is not implemented for `Result<QuantumMCTS<CodeState>, CognitiveError>`
   = note: Result<QuantumMCTS<CodeState>, CognitiveError> must be a future or must implement `IntoFuture` to be awaited
   = note: required for `Result<QuantumMCTS<CodeState>, CognitiveError>` to implement `std::future::IntoFuture`
   = note: the full name for the type has been written to '/Volumes/samsung_t9/sweetmcp/target/debug/deps/sweetmcp_memory-4002f0e13ee93e6a.long-type-9142160644140307065.txt'
   = note: consider using `--verbose` to print the full type name to the console
help: remove the `.await`
   |
73 -             .await?;
73 +             ?;
   |

error[E0277]: the trait bound `node_types::CodeState: QuantumState` is not satisfied
  --> packages/sweetmcp-memory/src/cognitive/quantum/recursive_improvement.rs:73:14
   |
73 |             .await?;
   |              ^^^^^ the trait `QuantumState` is not implemented for `node_types::CodeState`
   |
help: this trait has no implementations, consider adding one
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:55:1
   |
55 | pub trait QuantumState: Clone + Send + Sync + 'static {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: required by a bound in `quantum_mcts::QuantumMCTS`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:69:27
   |
69 | pub struct QuantumMCTS<S: QuantumState> {
   |                           ^^^^^^^^^^^^ required by this bound in `QuantumMCTS`

error[E0308]: `?` operator has incompatible types
   --> packages/sweetmcp-memory/src/cognitive/quantum/recursive_improvement.rs:146:23
    |
54  |     ) -> Result<OptimizationOutcome, CognitiveError> {
    |          ------------------------------------------- expected `std::collections::HashMap<std::string::String, serde_json::Value>` because of return type
...
146 |             metadata: self.collect_final_metrics(&current_state).await?,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `HashMap<String, Value>`, found `Value`
    |
    = note: `?` operator cannot convert from `serde_json::Value` to `std::collections::HashMap<std::string::String, serde_json::Value>`
    = note: expected struct `std::collections::HashMap<std::string::String, serde_json::Value>`
                 found enum `serde_json::Value`

error[E0599]: no method named `evolve_code` found for struct `std::sync::Arc<CognitiveCodeEvolution>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/recursive_improvement.rs:190:14
    |
188 |           let evolved_code = self
    |  ____________________________-
189 | |             .evolution_engine
190 | |             .evolve_code(&quantum_state.classical_state.code, evolution_params)
    | |             -^^^^^^^^^^^ method not found in `std::sync::Arc<CognitiveCodeEvolution>`
    | |_____________|
    |

error[E0277]: `?` couldn't convert the error to `quantum::types::CognitiveError`
   --> packages/sweetmcp-memory/src/cognitive/quantum/router.rs:233:34
    |
233 |         superposition.normalize()?;
    |                       -----------^ the trait `std::convert::From<std::string::String>` is not implemented for `quantum::types::CognitiveError`
    |                       |
    |                       this can't be annotated with `?` because it has type `Result<_, std::string::String>`
    |
note: `quantum::types::CognitiveError` needs to implement `From<std::string::String>`
   --> packages/sweetmcp-memory/src/cognitive/quantum/types.rs:11:1
    |
11  | pub enum CognitiveError {
    | ^^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait

error[E0277]: `?` couldn't convert the error to `quantum::types::CognitiveError`
   --> packages/sweetmcp-memory/src/cognitive/quantum/router.rs:297:34
    |
297 |         superposition.normalize()?;
    |                       -----------^ the trait `std::convert::From<std::string::String>` is not implemented for `quantum::types::CognitiveError`
    |                       |
    |                       this can't be annotated with `?` because it has type `Result<_, std::string::String>`
    |
note: `quantum::types::CognitiveError` needs to implement `From<std::string::String>`
   --> packages/sweetmcp-memory/src/cognitive/quantum/types.rs:11:1
    |
11  | pub enum CognitiveError {
    | ^^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait

warning: unused variable: `query`
   --> packages/sweetmcp-memory/src/cognitive/quantum/router.rs:306:9
    |
306 |         query: &EnhancedQuery,
    |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_query`

warning: unused variable: `query`
   --> packages/sweetmcp-memory/src/cognitive/quantum/router.rs:386:9
    |
386 |         query: &EnhancedQuery,
    |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_query`

error[E0382]: borrow of moved value: `measurement.context`
   --> packages/sweetmcp-memory/src/cognitive/quantum/router.rs:397:17
    |
392 |             target_context: measurement.context,
    |                             ------------------- value moved here
...
397 |                 measurement.context, measurement.probability
    |                 ^^^^^^^^^^^^^^^^^^^ value borrowed here after move
    |
    = note: move occurs because `measurement.context` has type `std::string::String`, which does not implement the `Copy` trait
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `now`
   --> packages/sweetmcp-memory/src/cognitive/quantum/router.rs:430:13
    |
430 |         let now = Instant::now();
    |             ^^^ help: if this is intentional, prefix it with an underscore: `_now`

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/core.rs:96:75
    |
96  |         self.metrics.total_reward_distributed += total_reward_distributed.norm();
    |                                                                           ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/core.rs:100:53
    |
100 |             nodes_updated, total_reward_distributed.norm(), elapsed_time
    |                                                     ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `is_finite` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/core.rs:213:41
    |
213 |                 if !node.quantum_reward.is_finite() {
    |                                         ^^^^^^^^^ method not found in `Complex64`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `is_finite` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `is_finite`, perhaps you need to implement one of them:
            candidate #1: `ComplexField`
            candidate #2: `FloatCore`
            candidate #3: `geo::algorithm::vector_ops::Vector2DOps`
            candidate #4: `num_complex::complex_float::ComplexFloat`
            candidate #5: `ordered_float::Float`
help: some of the expressions' fields have a method of the same name
    |
213 |                 if !node.quantum_reward.imaginary.is_finite() {
    |                                         ++++++++++
213 |                 if !node.quantum_reward.real.is_finite() {
    |                                         +++++

error[E0599]: no method named `get_entangled` found for struct `tokio::sync::RwLockReadGuard<'_, quantum::entanglement::EntanglementGraph>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/core.rs:249:61
    |
249 |             if let Ok(entangled_nodes) = entanglement_graph.get_entangled(node_id) {
    |                                                             ^^^^^^^^^^^^^ method not found in `tokio::sync::RwLockReadGuard<'_, quantum::entanglement::EntanglementGraph>`

error[E0599]: no method named `is_finite` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/core.rs:264:59
    |
264 |                         if !entangled_node.quantum_reward.is_finite() {
    |                                                           ^^^^^^^^^ method not found in `Complex64`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `is_finite` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `is_finite`, perhaps you need to implement one of them:
            candidate #1: `ComplexField`
            candidate #2: `FloatCore`
            candidate #3: `geo::algorithm::vector_ops::Vector2DOps`
            candidate #4: `num_complex::complex_float::ComplexFloat`
            candidate #5: `ordered_float::Float`
help: some of the expressions' fields have a method of the same name
    |
264 |                         if !entangled_node.quantum_reward.imaginary.is_finite() {
    |                                                           ++++++++++
264 |                         if !entangled_node.quantum_reward.real.is_finite() {
    |                                                           +++++

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/core.rs:275:82
    |
275 | ...                   node_id, entangled_id, strength, entangled_reward.norm());
    |                                                                         ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0624]: method `get_propagation_path` is private
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/adaptive.rs:34:25
    |
34  |           let path = self.get_propagation_path(tree, &start_node_id).await?;
    |                           ^^^^^^^^^^^^^^^^^^^^ private method
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/core.rs:114:5
    |
114 | /     async fn get_propagation_path(
115 | |         &mut self,
116 | |         tree: &RwLock<HashMap<String, QuantumMCTSNode>>,
117 | |         start_node_id: &str,
118 | |     ) -> Result<Vec<String>, CognitiveError> {
    | |____________________________________________- private method defined here

error[E0624]: method `calculate_decay_factor` is private
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/adaptive.rs:51:41
    |
51  |                 let decay_factor = self.calculate_decay_factor(depth);
    |                                         ^^^^^^^^^^^^^^^^^^^^^^ private method
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/core.rs:185:5
    |
185 |     fn calculate_decay_factor(&self, depth: usize) -> f64 {
    |     ----------------------------------------------------- private method defined here

error[E0599]: no method named `is_finite` found for struct `Complex64` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/adaptive.rs:59:41
   |
59 |                 if !node.quantum_reward.is_finite() {
   |                                         ^^^^^^^^^ method not found in `Complex64`
   |
  ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
   |
8  | pub struct Complex64 {
   | -------------------- method `is_finite` not found for this struct
   |
   = help: items from traits can only be used if the trait is implemented and in scope
   = note: the following traits define an item `is_finite`, perhaps you need to implement one of them:
           candidate #1: `ComplexField`
           candidate #2: `FloatCore`
           candidate #3: `geo::algorithm::vector_ops::Vector2DOps`
           candidate #4: `num_complex::complex_float::ComplexFloat`
           candidate #5: `ordered_float::Float`
help: some of the expressions' fields have a method of the same name
   |
59 |                 if !node.quantum_reward.imaginary.is_finite() {
   |                                         ++++++++++
59 |                 if !node.quantum_reward.real.is_finite() {
   |                                         +++++

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/adaptive.rs:68:68
    |
68  |                        node_id, node_learning_rate, adapted_reward.norm());
    |                                                                    ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no variant or associated item named `InvalidQuantumState` found for enum `cognitive::types::CognitiveError` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/adaptive.rs:176:40
    |
176 |             return Err(CognitiveError::InvalidQuantumState(
    |                                        ^^^^^^^^^^^^^^^^^^^ variant or associated item not found in `cognitive::types::CognitiveError`
    |
   ::: packages/sweetmcp-memory/src/cognitive/types.rs:233:1
    |
233 | pub enum CognitiveError {
    | ----------------------- variant or associated item `InvalidQuantumState` not found for this enum

error[E0624]: method `get_propagation_path` is private
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/adaptive.rs:182:25
    |
182 |           let path = self.get_propagation_path(tree, &start_node_id).await?;
    |                           ^^^^^^^^^^^^^^^^^^^^ private method
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/core.rs:114:5
    |
114 | /     async fn get_propagation_path(
115 | |         &mut self,
116 | |         tree: &RwLock<HashMap<String, QuantumMCTSNode>>,
117 | |         start_node_id: &str,
118 | |     ) -> Result<Vec<String>, CognitiveError> {
    | |____________________________________________- private method defined here

error[E0624]: method `calculate_decay_factor` is private
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/adaptive.rs:212:45
    |
212 |                     let decay_factor = self.calculate_decay_factor(depth);
    |                                             ^^^^^^^^^^^^^^^^^^^^^^ private method
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/core.rs:185:5
    |
185 |     fn calculate_decay_factor(&self, depth: usize) -> f64 {
    |     ----------------------------------------------------- private method defined here

error[E0599]: no method named `is_finite` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/adaptive.rs:224:41
    |
224 |                 if !node.quantum_reward.is_finite() {
    |                                         ^^^^^^^^^ method not found in `Complex64`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `is_finite` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `is_finite`, perhaps you need to implement one of them:
            candidate #1: `ComplexField`
            candidate #2: `FloatCore`
            candidate #3: `geo::algorithm::vector_ops::Vector2DOps`
            candidate #4: `num_complex::complex_float::ComplexFloat`
            candidate #5: `ordered_float::Float`
help: some of the expressions' fields have a method of the same name
    |
224 |                 if !node.quantum_reward.imaginary.is_finite() {
    |                                         ++++++++++
224 |                 if !node.quantum_reward.real.is_finite() {
    |                                         +++++

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/adaptive.rs:233:52
    |
233 |                        node_id, node_reward_update.norm());
    |                                                    ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/adaptive.rs:275:57
    |
275 |             let current_magnitude = node.quantum_reward.norm();
    |                                                         ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0368]: binary assignment operation `*=` cannot be applied to type `Complex64`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/adaptive.rs:279:17
    |
279 |                 node.quantum_reward *= scaling_factor;
    |                 -------------------^^^^^^^^^^^^^^^^^^
    |                 |
    |                 cannot use `*=` on type `Complex64`
    |
note: an implementation of `MulAssign<f64>` might be missing for `Complex64`
   --> packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | ^^^^^^^^^^^^^^^^^^^^ must implement `MulAssign<f64>`
note: the trait `MulAssign` must be implemented
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/ops/arith.rs:880:1
    |
880 | pub trait MulAssign<Rhs = Self> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/adaptive.rs:285:72
    |
285 |                        node.id, current_magnitude, node.quantum_reward.norm());
    |                                                                        ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/adaptive.rs:318:68
    |
318 |             .map(|node| (node.quantum_reward / node.visits as f64).norm())
    |                                                                    ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0624]: method `get_propagation_path` is private
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/adaptive.rs:352:25
    |
352 |           let path = self.get_propagation_path(tree, &start_node_id).await?;
    |                           ^^^^^^^^^^^^^^^^^^^^ private method
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/core.rs:114:5
    |
114 | /     async fn get_propagation_path(
115 | |         &mut self,
116 | |         tree: &RwLock<HashMap<String, QuantumMCTSNode>>,
117 | |         start_node_id: &str,
118 | |     ) -> Result<Vec<String>, CognitiveError> {
    | |____________________________________________- private method defined here

error[E0624]: method `calculate_decay_factor` is private
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/adaptive.rs:373:41
    |
373 |                 let decay_factor = self.calculate_decay_factor(depth);
    |                                         ^^^^^^^^^^^^^^^^^^^^^^ private method
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/core.rs:185:5
    |
185 |     fn calculate_decay_factor(&self, depth: usize) -> f64 {
    |     ----------------------------------------------------- private method defined here

error[E0599]: no method named `is_finite` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/adaptive.rs:385:41
    |
385 |                 if !node.quantum_reward.is_finite() {
    |                                         ^^^^^^^^^ method not found in `Complex64`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `is_finite` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `is_finite`, perhaps you need to implement one of them:
            candidate #1: `ComplexField`
            candidate #2: `FloatCore`
            candidate #3: `geo::algorithm::vector_ops::Vector2DOps`
            candidate #4: `num_complex::complex_float::ComplexFloat`
            candidate #5: `ordered_float::Float`
help: some of the expressions' fields have a method of the same name
    |
385 |                 if !node.quantum_reward.imaginary.is_finite() {
    |                                         ++++++++++
385 |                 if !node.quantum_reward.real.is_finite() {
    |                                         +++++

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/adaptive.rs:394:59
    |
394 |                        node_id, temperature, final_reward.norm());
    |                                                           ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

warning: unused variable: `start_time`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/engine.rs:187:13
    |
187 |         let start_time = std::time::Instant::now();
    |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_start_time`

error[E0061]: this function takes 4 arguments but 2 arguments were supplied
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/core.rs:135:34
    |
135 |         let committee = Arc::new(EvaluationCommittee::new(event_tx, num_cpus::get().min(4)).await?);
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------
    |                                                          |          |
    |                                                          |          argument #2 of type `f64` is missing
    |                                                          argument #4 of type `tokio::sync::mpsc::UnboundedSender<CommitteeEvent>` is missing
    |
note: expected `Vec<CommitteeAgent>`, found `Sender<CommitteeEvent>`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/core.rs:135:59
    |
135 |         let committee = Arc::new(EvaluationCommittee::new(event_tx, num_cpus::get().min(4)).await?);
    |                                                           ^^^^^^^^
    = note: expected struct `Vec<agents::CommitteeAgent>`
               found struct `tokio::sync::mpsc::Sender<CommitteeEvent>`
note: associated function defined here
   --> packages/sweetmcp-memory/src/cognitive/committee/consensus/committee.rs:51:12
    |
51  |     pub fn new(
    |            ^^^
52  |         agents: Vec<CommitteeAgent>,
    |         ---------------------------
53  |         consensus_threshold: f64,
    |         ------------------------
54  |         max_concurrent: usize,
55  |         event_tx: mpsc::UnboundedSender<CommitteeEvent>,
    |         -----------------------------------------------
help: provide the arguments
    |
135 -         let committee = Arc::new(EvaluationCommittee::new(event_tx, num_cpus::get().min(4)).await?);
135 +         let committee = Arc::new(EvaluationCommittee::new(/* Vec<agents::CommitteeAgent> */, /* f64 */, num_cpus::get().min(4), /* tokio::sync::mpsc::UnboundedSender<CommitteeEvent> */).await?);
    |

error[E0277]: `Committee` is not a future
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/core.rs:135:93
    |
135 |         let committee = Arc::new(EvaluationCommittee::new(event_tx, num_cpus::get().min(4)).await?);
    |                                  ---------------------------------------------------------- ^^^^^ `Committee` is not a future
    |                                  |
    |                                  this call returns `Committee`
    |
    = help: the trait `futures::Future` is not implemented for `Committee`
    = note: Committee must be a future or must implement `IntoFuture` to be awaited
    = note: required for `Committee` to implement `std::future::IntoFuture`
help: remove the `.await`
    |
135 -         let committee = Arc::new(EvaluationCommittee::new(event_tx, num_cpus::get().min(4)).await?);
135 +         let committee = Arc::new(EvaluationCommittee::new(event_tx, num_cpus::get().min(4))?);
    |

error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/core.rs:139:41
    |
139 |         let error_correction = Arc::new(QuantumErrorCorrection::new());
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^-- argument #1 of type `ErrorCorrectionConfig` is missing
    |
note: associated function defined here
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/quantum_error_correction.rs:25:12
    |
25  |     pub fn new(config: ErrorCorrectionConfig) -> Self {
    |            ^^^ -----------------------------
help: provide the argument
    |
139 |         let error_correction = Arc::new(QuantumErrorCorrection::new(/* ErrorCorrectionConfig */));
    |                                                                     +++++++++++++++++++++++++++

error[E0599]: no function or associated item named `new` found for struct `PhaseEvolution` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/core.rs:143:56
    |
143 |         let phase_evolution = Arc::new(PhaseEvolution::new(
    |                                                        ^^^ function or associated item not found in `PhaseEvolution`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/state.rs:23:1
    |
23  | pub struct PhaseEvolution {
    | ------------------------- function or associated item `new` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `new`, perhaps you need to implement one of them:
            candidate #1: `Atomic`
            candidate #2: `Bit`
            candidate #3: `Digest`
            candidate #4: `KeyInit`
            candidate #5: `KeyIvInit`
            candidate #6: `Nullable`
            candidate #7: `UniformSampler`
            candidate #8: `VariableOutput`
            candidate #9: `VariableOutputCore`
            candidate #10: `ahash::HashMapExt`
            candidate #11: `ahash::HashSetExt`
            candidate #12: `aws_lc_rs::aead::BoundKey`
            candidate #13: `ext_sort::chunk::ExternalChunk`
            candidate #14: `itertools::adaptors::coalesce::CountItem`
            candidate #15: `ndarray::DataOwned`
            candidate #16: `ndarray::data_traits::DataOwned`
            candidate #17: `parking_lot_core::thread_parker::ThreadParkerT`
            candidate #18: `petgraph::adj::IndexType`
            candidate #19: `protobuf::message::Message`
            candidate #20: `quick_cache::shard::SharedPlaceholder`
            candidate #21: `quick_cache::shard::SharedPlaceholder`
            candidate #22: `rand::distributions::uniform::UniformSampler`
            candidate #23: `ring::aead::BoundKey`
            candidate #24: `rstar::point::PointExt`
            candidate #25: `serde_with::duplicate_key_impls::error_on_duplicate::PreventDuplicateInsertsMap`
            candidate #26: `serde_with::duplicate_key_impls::error_on_duplicate::PreventDuplicateInsertsSet`
            candidate #27: `serde_with::duplicate_key_impls::first_value_wins::DuplicateInsertsFirstWinsMap`
            candidate #28: `serde_with::duplicate_key_impls::last_value_wins::DuplicateInsertsLastWinsSet`
            candidate #29: `sha2::digest::Mac`
            candidate #30: `spade::triangulation::Triangulation`
            candidate #31: `tendril::tendril::Atomicity`

error[E0599]: no function or associated item named `new` found for struct `TimeDependentTerm` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/core.rs:146:36
    |
146 |                 TimeDependentTerm::new(0.1, 1.0),
    |                                    ^^^ function or associated item not found in `TimeDependentTerm`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/state.rs:32:1
    |
32  | pub struct TimeDependentTerm {
    | ---------------------------- function or associated item `new` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `new`, perhaps you need to implement one of them:
            candidate #1: `Atomic`
            candidate #2: `Bit`
            candidate #3: `Digest`
            candidate #4: `KeyInit`
            candidate #5: `KeyIvInit`
            candidate #6: `Nullable`
            candidate #7: `UniformSampler`
            candidate #8: `VariableOutput`
            candidate #9: `VariableOutputCore`
            candidate #10: `ahash::HashMapExt`
            candidate #11: `ahash::HashSetExt`
            candidate #12: `aws_lc_rs::aead::BoundKey`
            candidate #13: `ext_sort::chunk::ExternalChunk`
            candidate #14: `itertools::adaptors::coalesce::CountItem`
            candidate #15: `ndarray::DataOwned`
            candidate #16: `ndarray::data_traits::DataOwned`
            candidate #17: `parking_lot_core::thread_parker::ThreadParkerT`
            candidate #18: `petgraph::adj::IndexType`
            candidate #19: `protobuf::message::Message`
            candidate #20: `quick_cache::shard::SharedPlaceholder`
            candidate #21: `quick_cache::shard::SharedPlaceholder`
            candidate #22: `rand::distributions::uniform::UniformSampler`
            candidate #23: `ring::aead::BoundKey`
            candidate #24: `rstar::point::PointExt`
            candidate #25: `serde_with::duplicate_key_impls::error_on_duplicate::PreventDuplicateInsertsMap`
            candidate #26: `serde_with::duplicate_key_impls::error_on_duplicate::PreventDuplicateInsertsSet`
            candidate #27: `serde_with::duplicate_key_impls::first_value_wins::DuplicateInsertsFirstWinsMap`
            candidate #28: `serde_with::duplicate_key_impls::last_value_wins::DuplicateInsertsLastWinsSet`
            candidate #29: `sha2::digest::Mac`
            candidate #30: `spade::triangulation::Triangulation`
            candidate #31: `tendril::tendril::Atomicity`

error[E0599]: no function or associated item named `new` found for struct `TimeDependentTerm` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/core.rs:147:36
    |
147 |                 TimeDependentTerm::new(0.05, 2.0),
    |                                    ^^^ function or associated item not found in `TimeDependentTerm`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/state.rs:32:1
    |
32  | pub struct TimeDependentTerm {
    | ---------------------------- function or associated item `new` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `new`, perhaps you need to implement one of them:
            candidate #1: `Atomic`
            candidate #2: `Bit`
            candidate #3: `Digest`
            candidate #4: `KeyInit`
            candidate #5: `KeyIvInit`
            candidate #6: `Nullable`
            candidate #7: `UniformSampler`
            candidate #8: `VariableOutput`
            candidate #9: `VariableOutputCore`
            candidate #10: `ahash::HashMapExt`
            candidate #11: `ahash::HashSetExt`
            candidate #12: `aws_lc_rs::aead::BoundKey`
            candidate #13: `ext_sort::chunk::ExternalChunk`
            candidate #14: `itertools::adaptors::coalesce::CountItem`
            candidate #15: `ndarray::DataOwned`
            candidate #16: `ndarray::data_traits::DataOwned`
            candidate #17: `parking_lot_core::thread_parker::ThreadParkerT`
            candidate #18: `petgraph::adj::IndexType`
            candidate #19: `protobuf::message::Message`
            candidate #20: `quick_cache::shard::SharedPlaceholder`
            candidate #21: `quick_cache::shard::SharedPlaceholder`
            candidate #22: `rand::distributions::uniform::UniformSampler`
            candidate #23: `ring::aead::BoundKey`
            candidate #24: `rstar::point::PointExt`
            candidate #25: `serde_with::duplicate_key_impls::error_on_duplicate::PreventDuplicateInsertsMap`
            candidate #26: `serde_with::duplicate_key_impls::error_on_duplicate::PreventDuplicateInsertsSet`
            candidate #27: `serde_with::duplicate_key_impls::first_value_wins::DuplicateInsertsFirstWinsMap`
            candidate #28: `serde_with::duplicate_key_impls::last_value_wins::DuplicateInsertsLastWinsSet`
            candidate #29: `sha2::digest::Mac`
            candidate #30: `spade::triangulation::Triangulation`
            candidate #31: `tendril::tendril::Atomicity`

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/core.rs:157:52
    |
157 |             superposition: SuperpositionState::new(untried_actions.len()),
    |                            ----------------------- ^^^^^^^^^^^^^^^^^^^^^ expected `Duration`, found `usize`
    |                            |
    |                            arguments to this function are incorrect
    |
note: associated function defined here
   --> packages/sweetmcp-memory/src/cognitive/quantum/state.rs:40:12
    |
40  |     pub fn new(coherence_time: Duration) -> Self {
    |            ^^^ ------------------------

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/core.rs:187:13
    |
187 |             entanglement_graph,
    |             ^^^^^^^^^^^^^^^^^^ expected `Arc<RwLock<EntanglementGraph>>`, found `Arc<RwLock<impl Future<Output = ...>>>`
    |
    = note: expected struct `std::sync::Arc<tokio::sync::RwLock<quantum::entanglement::EntanglementGraph>>`
               found struct `std::sync::Arc<tokio::sync::RwLock<impl futures::Future<Output = std::result::Result<quantum::entanglement::EntanglementGraph, quantum::types::CognitiveError>>>>`

error[E0596]: cannot borrow `self.engine` as mutable, as it is behind a `&` reference
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_coordinator.rs:79:9
   |
79 |         self.engine.manager().get_entangled_nodes(node_id).await
   |         ^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable
   |
help: consider changing this to be a mutable reference
   |
76 |         &mut self,
   |          +++

error[E0599]: no function or associated item named `calculate_network_influence` found for struct `NetworkInfluenceCalculator` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_coordinator.rs:88:37
   |
88 |         NetworkInfluenceCalculator::calculate_network_influence(
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ function or associated item not found in `NetworkInfluenceCalculator`
   |
  ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_influence.rs:15:1
   |
15 | pub struct NetworkInfluenceCalculator {
   | ------------------------------------- function or associated item `calculate_network_influence` not found for this struct
   |
note: if you're trying to build a new `NetworkInfluenceCalculator`, consider using `NetworkInfluenceCalculator::new` which returns `NetworkInfluenceCalculator`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_influence.rs:63:5
   |
63 |     pub fn new() -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^
help: there is a method `calculate_influence` with a similar name, but with different arguments
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_influence.rs:71:5
   |
71 | /     pub async fn calculate_influence(
72 | |         &mut self,
73 | |         graph: &EntanglementGraph,
74 | |     ) -> Result<NetworkInfluenceMetrics, CognitiveError> {
   | |________________________________________________________^

error[E0616]: field `entanglement_graph` of struct `QuantumEntanglementManager` is private
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_coordinator.rs:89:36
   |
89 |             &self.engine.manager().entanglement_graph,
   |                                    ^^^^^^^^^^^^^^^^^^ private field

error[E0599]: no function or associated item named `analyze_network_topology` found for struct `NetworkTopologyAnalyzer` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_coordinator.rs:117:34
    |
117 |         NetworkTopologyAnalyzer::analyze_network_topology(
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^ function or associated item not found in `NetworkTopologyAnalyzer`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:144:1
    |
144 | pub struct NetworkTopologyAnalyzer;
    | ---------------------------------- function or associated item `analyze_network_topology` not found for this struct
    |
help: there is an associated function `analyze_topology` with a similar name
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:149:5
    |
149 | /     pub async fn analyze_topology(
150 | |         graph: &EntanglementGraph,
151 | |         nodes: &HashMap<String, Arc<RwLock<QuantumMCTSNode>>>,
152 | |     ) -> Result<NetworkTopology, CognitiveError> {
    | |________________________________________________^

error[E0616]: field `entanglement_graph` of struct `QuantumEntanglementManager` is private
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_coordinator.rs:118:36
    |
118 |             &self.engine.manager().entanglement_graph
    |                                    ^^^^^^^^^^^^^^^^^^ private field

error[E0599]: no method named `prune_weak_entanglements` found for mutable reference `&mut QuantumEntanglementManager` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_coordinator.rs:150:31
    |
150 |         self.engine.manager().prune_weak_entanglements(minimum_strength).await
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: there is a method `create_entanglement` with a similar name, but with different arguments
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:51:5
    |
51  | /     pub async fn create_entanglement(
52  | |         &mut self,
53  | |         node_id: &str,
54  | |         tree: &HashMap<String, QuantumMCTSNode>,
55  | |     ) -> Result<Vec<String>, CognitiveError> {
    | |____________________________________________^

error[E0599]: no method named `perform_maintenance` found for struct `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_coordinator.rs:264:21
    |
264 |         self.engine.perform_maintenance().await
    |                     ^^^^^^^^^^^^^^^^^^^ method not found in `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:23:1
    |
23  | pub struct QuantumEntanglementEngine {
    | ------------------------------------ method `perform_maintenance` not found for this struct

error[E0599]: no function or associated item named `analyze_network_topology` found for struct `NetworkTopologyAnalyzer` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_analysis.rs:48:49
    |
48  |         let topology = NetworkTopologyAnalyzer::analyze_network_topology(
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^ function or associated item not found in `NetworkTopologyAnalyzer`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:144:1
    |
144 | pub struct NetworkTopologyAnalyzer;
    | ---------------------------------- function or associated item `analyze_network_topology` not found for this struct
    |
help: there is an associated function `analyze_topology` with a similar name
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:149:5
    |
149 | /     pub async fn analyze_topology(
150 | |         graph: &EntanglementGraph,
151 | |         nodes: &HashMap<String, Arc<RwLock<QuantumMCTSNode>>>,
152 | |     ) -> Result<NetworkTopology, CognitiveError> {
    | |________________________________________________^

error[E0616]: field `entanglement_graph` of struct `QuantumEntanglementManager` is private
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_analysis.rs:49:31
   |
49 |             &engine.manager().entanglement_graph
   |                               ^^^^^^^^^^^^^^^^^^ private field

error[E0599]: no function or associated item named `analyze_entanglement_quality` found for struct `NetworkTopologyAnalyzer` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_analysis.rs:52:48
    |
52  |         let quality = NetworkTopologyAnalyzer::analyze_entanglement_quality(
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function or associated item not found in `NetworkTopologyAnalyzer`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:144:1
    |
144 | pub struct NetworkTopologyAnalyzer;
    | ---------------------------------- function or associated item `analyze_entanglement_quality` not found for this struct

error[E0616]: field `entanglement_graph` of struct `QuantumEntanglementManager` is private
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_analysis.rs:53:31
   |
53 |             &engine.manager().entanglement_graph, 
   |                               ^^^^^^^^^^^^^^^^^^ private field

error[E0599]: no function or associated item named `find_network_bottlenecks` found for struct `NetworkTopologyAnalyzer` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_analysis.rs:60:52
    |
60  |         let bottlenecks = NetworkTopologyAnalyzer::find_network_bottlenecks(
    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^ function or associated item not found in `NetworkTopologyAnalyzer`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:144:1
    |
144 | pub struct NetworkTopologyAnalyzer;
    | ---------------------------------- function or associated item `find_network_bottlenecks` not found for this struct

error[E0616]: field `entanglement_graph` of struct `QuantumEntanglementManager` is private
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_analysis.rs:61:31
   |
61 |             &engine.manager().entanglement_graph, 
   |                               ^^^^^^^^^^^^^^^^^^ private field

error[E0599]: no method named `summary` found for reference `&quantum_mcts::entanglement::metrics::EntanglementMetrics` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_analysis.rs:65:48
   |
65 |         let metrics_summary = engine.metrics().summary();
   |                                                ^^^^^^^
   |
help: there is a method `status_summary` with a similar name
   |
65 |         let metrics_summary = engine.metrics().status_summary();
   |                                                 +++++++

error[E0609]: no field `entanglement_strength_threshold` on type `quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_core.rs:124:42
    |
124 |         let base_threshold = self.config.entanglement_strength_threshold;
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
124 -         let base_threshold = self.config.entanglement_strength_threshold;
124 +         let base_threshold = self.config.entanglement_strength;
    |

error[E0599]: no method named `quantum_state` found for reference `&quantum_mcts::node_state::node::QuantumMCTSNode` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_core.rs:144:30
    |
144 |             .map(|node| node.quantum_state().coherence_level())
    |                              ^^^^^^^^^^^^^-- help: remove the arguments
    |                              |
    |                              field, not a method

error[E0599]: no method named `prune_node_entanglements` found for struct `QuantumEntanglementManager` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_core.rs:172:41
    |
172 |         let pruned_count = self.manager.prune_node_entanglements(node_id, strength_threshold).await?;
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:25:1
    |
25  | pub struct QuantumEntanglementManager {
    | ------------------------------------- method `prune_node_entanglements` not found for this struct
    |
help: there is a method `update_node_entanglements` with a similar name
    |
172 -         let pruned_count = self.manager.prune_node_entanglements(node_id, strength_threshold).await?;
172 +         let pruned_count = self.manager.update_node_entanglements(node_id, strength_threshold).await?;
    |

error[E0599]: no method named `record_entanglements_pruned` found for struct `std::sync::Arc<quantum_mcts::entanglement::metrics::EntanglementMetrics>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_core.rs:175:26
    |
175 |             self.metrics.record_entanglements_pruned(pruned_count);
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: there is a method `record_entanglement` with a similar name, but with different arguments
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/mod.rs:150:5
    |
150 |     pub fn record_entanglement(&self) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `get_node_entanglement_count` found for struct `QuantumEntanglementManager` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:25:54
    |
25  |             let current_entanglements = self.manager.get_node_entanglement_count(node_id).await?;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:25:1
    |
25  | pub struct QuantumEntanglementManager {
    | ------------------------------------- method `get_node_entanglement_count` not found for this struct
    |
help: there is a method `remove_entanglement` with a similar name, but with different arguments
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:291:5
    |
291 | /     pub async fn remove_entanglement(
292 | |         &mut self,
293 | |         node1_id: &str,
294 | |         node2_id: &str,
295 | |     ) -> Result<bool, CognitiveError> {
    | |_____________________________________^

error[E0061]: this method takes 2 arguments but 3 arguments were supplied
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:36:41
   |
36 |                         if self.manager.create_entanglement(node_id, &candidate_id, strength).await.is_ok() {
   |                                         ^^^^^^^^^^^^^^^^^^^                         -------- unexpected argument #3 of type `f64`
   |
note: expected `&HashMap<String, QuantumMCTSNode>`, found `&String`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:36:70
   |
36 |                         if self.manager.create_entanglement(node_id, &candidate_id, strength).await.is_ok() {
   |                                                                      ^^^^^^^^^^^^^
   = note: expected reference `&std::collections::HashMap<std::string::String, quantum_mcts::node_state::node::QuantumMCTSNode>`
              found reference `&std::string::String`
note: method defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:51:18
   |
51 |     pub async fn create_entanglement(
   |                  ^^^^^^^^^^^^^^^^^^^
...
54 |         tree: &HashMap<String, QuantumMCTSNode>,
   |         ---------------------------------------
help: remove the extra argument
   |
36 -                         if self.manager.create_entanglement(node_id, &candidate_id, strength).await.is_ok() {
36 +                         if self.manager.create_entanglement(node_id, /* &std::collections::HashMap<std::string::String, quantum_mcts::node_state::node::QuantumMCTSNode> */).await.is_ok() {
   |

error[E0599]: no method named `analyze_entanglement_distribution` found for struct `QuantumEntanglementManager` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:53:41
   |
53 |         let distribution = self.manager.analyze_entanglement_distribution().await?;
   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `QuantumEntanglementManager`
   |
  ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:25:1
   |
25 | pub struct QuantumEntanglementManager {
   | ------------------------------------- method `analyze_entanglement_distribution` not found for this struct

error[E0599]: no method named `get_node_entanglement_count` found for struct `QuantumEntanglementManager` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:60:46
    |
60  |             let current_count = self.manager.get_node_entanglement_count(node_id).await?;
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:25:1
    |
25  | pub struct QuantumEntanglementManager {
    | ------------------------------------- method `get_node_entanglement_count` not found for this struct
    |
help: there is a method `remove_entanglement` with a similar name, but with different arguments
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:291:5
    |
291 | /     pub async fn remove_entanglement(
292 | |         &mut self,
293 | |         node1_id: &str,
294 | |         node2_id: &str,
295 | |     ) -> Result<bool, CognitiveError> {
    | |_____________________________________^

error[E0599]: no method named `get_node_entanglements` found for struct `QuantumEntanglementManager` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:65:50
    |
65  |                 let entanglements = self.manager.get_node_entanglements(node_id).await?;
    |                                                  ^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:25:1
    |
25  | pub struct QuantumEntanglementManager {
    | ------------------------------------- method `get_node_entanglements` not found for this struct
    |
help: there is a method `update_node_entanglements` with a similar name, but with different arguments
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:325:5
    |
325 | /     pub async fn update_node_entanglements(
326 | |         &mut self,
327 | |         node_id: &str,
328 | |         tree: &mut HashMap<String, QuantumMCTSNode>,
329 | |     ) -> Result<(), CognitiveError> {
    | |___________________________________^

error[E0061]: this method takes 2 arguments but 1 argument was supplied
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:72:37
    |
72  |                     if self.manager.remove_entanglement(&entanglement.id).await.is_ok() {
    |                                     ^^^^^^^^^^^^^^^^^^^------------------ argument #2 of type `&str` is missing
    |
note: method defined here
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:291:18
    |
291 |     pub async fn remove_entanglement(
    |                  ^^^^^^^^^^^^^^^^^^^
...
294 |         node2_id: &str,
    |         --------------
help: provide the argument
    |
72  |                     if self.manager.remove_entanglement(&entanglement.id, /* &str */).await.is_ok() {
    |                                                                         ++++++++++++

error[E0599]: no method named `get_all_entanglements` found for struct `QuantumEntanglementManager` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:85:46
   |
85 |         let all_entanglements = self.manager.get_all_entanglements().await?;
   |                                              ^^^^^^^^^^^^^^^^^^^^^
   |
  ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:25:1
   |
25 | pub struct QuantumEntanglementManager {
   | ------------------------------------- method `get_all_entanglements` not found for this struct
   |
help: there is a method `create_entanglement` with a similar name, but with different arguments
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:51:5
   |
51 | /     pub async fn create_entanglement(
52 | |         &mut self,
53 | |         node_id: &str,
54 | |         tree: &HashMap<String, QuantumMCTSNode>,
55 | |     ) -> Result<Vec<String>, CognitiveError> {
   | |____________________________________________^

error[E0609]: no field `entanglement_strength_threshold` on type `quantum_mcts::config::core::QuantumMCTSConfig`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:89:52
   |
89 |             if entanglement.strength < self.config.entanglement_strength_threshold {
   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
   |
help: a field with a similar name exists
   |
89 -             if entanglement.strength < self.config.entanglement_strength_threshold {
89 +             if entanglement.strength < self.config.entanglement_strength {
   |

error[E0061]: this method takes 2 arguments but 1 argument was supplied
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:90:33
    |
90  |                 if self.manager.remove_entanglement(&entanglement.id).await.is_ok() {
    |                                 ^^^^^^^^^^^^^^^^^^^------------------ argument #2 of type `&str` is missing
    |
note: method defined here
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:291:18
    |
291 |     pub async fn remove_entanglement(
    |                  ^^^^^^^^^^^^^^^^^^^
...
294 |         node2_id: &str,
    |         --------------
help: provide the argument
    |
90  |                 if self.manager.remove_entanglement(&entanglement.id, /* &str */).await.is_ok() {
    |                                                                     ++++++++++++

error[E0599]: no method named `get_node_entanglements` found for struct `QuantumEntanglementManager` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:106:51
    |
106 |         let existing_entanglements = self.manager.get_node_entanglements(node_id).await?;
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:25:1
    |
25  | pub struct QuantumEntanglementManager {
    | ------------------------------------- method `get_node_entanglements` not found for this struct
    |
help: there is a method `update_node_entanglements` with a similar name, but with different arguments
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:325:5
    |
325 | /     pub async fn update_node_entanglements(
326 | |         &mut self,
327 | |         node_id: &str,
328 | |         tree: &mut HashMap<String, QuantumMCTSNode>,
329 | |     ) -> Result<(), CognitiveError> {
    | |___________________________________^

error[E0599]: no method named `analyze_entanglement_distribution` found for struct `QuantumEntanglementManager` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_optimization.rs:107:41
    |
107 |         let distribution = self.manager.analyze_entanglement_distribution().await?;
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `QuantumEntanglementManager`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:25:1
    |
25  | pub struct QuantumEntanglementManager {
    | ------------------------------------- method `analyze_entanglement_distribution` not found for this struct

error[E0609]: no field `analyzer` on type `&engine_core::QuantumEntanglementEngine`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_analysis.rs:19:14
   |
19 |         self.analyzer.analyze_topology().await
   |              ^^^^^^^^ unknown field
   |
   = note: available fields are: `manager`, `metrics`, `config`, `entanglement_graph`

error[E0599]: no method named `analyze_entanglement_distribution` found for struct `QuantumEntanglementManager` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_analysis.rs:25:41
   |
25 |         let distribution = self.manager.analyze_entanglement_distribution().await?;
   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `QuantumEntanglementManager`
   |
  ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:25:1
   |
25 | pub struct QuantumEntanglementManager {
   | ------------------------------------- method `analyze_entanglement_distribution` not found for this struct

error[E0599]: no method named `get_entanglement_metrics` found for struct `QuantumEntanglementManager` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_analysis.rs:26:36
   |
26 |         let metrics = self.manager.get_entanglement_metrics().await?;
   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^
   |
  ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:25:1
   |
25 | pub struct QuantumEntanglementManager {
   | ------------------------------------- method `get_entanglement_metrics` not found for this struct
   |
help: there is a method `get_entanglement_graph` with a similar name
   |
26 -         let metrics = self.manager.get_entanglement_metrics().await?;
26 +         let metrics = self.manager.get_entanglement_graph().await?;
   |

error[E0609]: no field `connected_components` on type `network_topology::NetworkTopology`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_analysis.rs:32:44
   |
32 |             let connected_ratio = topology.connected_components as f64 / topology.total_nodes as f64;
   |                                            ^^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `total_nodes`, `total_entanglements`, `average_degree`, `max_degree`, `network_density` ... and 2 others

error[E0599]: no method named `analyze_entanglement_distribution` found for struct `QuantumEntanglementManager` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_analysis.rs:112:41
    |
112 |         let distribution = self.manager.analyze_entanglement_distribution().await?;
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `QuantumEntanglementManager`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:25:1
    |
25  | pub struct QuantumEntanglementManager {
    | ------------------------------------- method `analyze_entanglement_distribution` not found for this struct

error[E0599]: no method named `get_entanglement_metrics` found for struct `QuantumEntanglementManager` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_analysis.rs:113:36
    |
113 |         let metrics = self.manager.get_entanglement_metrics().await?;
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:25:1
    |
25  | pub struct QuantumEntanglementManager {
    | ------------------------------------- method `get_entanglement_metrics` not found for this struct
    |
help: there is a method `get_entanglement_graph` with a similar name
    |
113 -         let metrics = self.manager.get_entanglement_metrics().await?;
113 +         let metrics = self.manager.get_entanglement_graph().await?;
    |

error[E0609]: no field `average_path_length` on type `network_topology::NetworkTopology`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_analysis.rs:125:43
    |
125 |             average_path_length: topology.average_path_length,
    |                                           ^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `total_nodes`, `total_entanglements`, `average_degree`, `max_degree`, `network_density` ... and 2 others

error[E0609]: no field `diameter` on type `network_topology::NetworkTopology`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_analysis.rs:126:32
    |
126 |             diameter: topology.diameter,
    |                                ^^^^^^^^ unknown field
    |
    = note: available fields are: `total_nodes`, `total_entanglements`, `average_degree`, `max_degree`, `network_density` ... and 2 others

error[E0609]: no field `connected_components` on type `&network_topology::NetworkTopology`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_health.rs:27:22
   |
27 |             topology.connected_components as f64 / topology.total_nodes as f64
   |                      ^^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `total_nodes`, `total_entanglements`, `average_degree`, `max_degree`, `network_density` ... and 2 others

error[E0609]: no field `connected_components` on type `&network_topology::NetworkTopology`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_health.rs:87:51
   |
87 |             if !topology.is_connected && topology.connected_components > 1 {
   |                                                   ^^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `total_nodes`, `total_entanglements`, `average_degree`, `max_degree`, `network_density` ... and 2 others

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:167:37
    |
167 |         let _tracker = self.metrics.start_tracking();
    |                                     ^^^^^^^^^^^^^^ multiple `start_tracking` found
    |
note: candidate #1 is defined in an impl for the type `quantum_mcts::entanglement::metrics::EntanglementMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:265:5
    |
265 |     pub fn start_tracking(&self) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `quantum_mcts::entanglement::metrics::EntanglementMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/mod.rs:199:5
    |
199 |     pub fn start_tracking(&self) -> PerformanceTracker {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `initialize_caches` found for mutable reference `&mut QuantumEntanglementManager` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:301:14
    |
301 |         self.initialize_caches().await?;
    |              ^^^^^^^^^^^^^^^^^ method not found in `&mut QuantumEntanglementManager`

error[E0599]: no method named `validate_configuration` found for mutable reference `&mut QuantumEntanglementManager` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:302:14
    |
302 |         self.validate_configuration()?;
    |              ^^^^^^^^^^^^^^^^^^^^^^
    |
help: there is a method `update_config` with a similar name, but with different arguments
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:398:5
    |
398 |     pub fn update_config(&mut self, new_config: QuantumMCTSConfig) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `clear_caches` found for mutable reference `&mut QuantumEntanglementManager` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:308:14
    |
308 |         self.clear_caches().await?;
    |              ^^^^^^^^^^^^
    |
help: there is a method `clear_cache` with a similar name
    |
308 -         self.clear_caches().await?;
308 +         self.clear_cache().await?;
    |

error[E0599]: no method named `reset_statistics` found for mutable reference `&mut QuantumEntanglementManager` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:309:14
    |
309 |         self.reset_statistics();
    |              ^^^^^^^^^^^^^^^^
    |
help: there is a method `reset_metrics` with a similar name
    |
309 -         self.reset_statistics();
309 +         self.reset_metrics();
    |

error[E0599]: no method named `flush_pending_operations` found for mutable reference `&mut QuantumEntanglementManager` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:315:14
    |
315 |         self.flush_pending_operations().await?;
    |              ^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `&mut QuantumEntanglementManager`

error[E0599]: no method named `save_statistics` found for mutable reference `&mut QuantumEntanglementManager` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:316:14
    |
316 |         self.save_statistics().await?;
    |              ^^^^^^^^^^^^^^^ method not found in `&mut QuantumEntanglementManager`

error[E0599]: no function or associated item named `analyze_network_topology` found for struct `NetworkTopologyAnalyzer` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/health.rs:94:49
    |
94  |         let topology = NetworkTopologyAnalyzer::analyze_network_topology(&self.entanglement_graph).await?;
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^ function or associated item not found in `NetworkTopologyAnalyzer`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:144:1
    |
144 | pub struct NetworkTopologyAnalyzer;
    | ---------------------------------- function or associated item `analyze_network_topology` not found for this struct
    |
help: there is an associated function `analyze_topology` with a similar name
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:149:5
    |
149 | /     pub async fn analyze_topology(
150 | |         graph: &EntanglementGraph,
151 | |         nodes: &HashMap<String, Arc<RwLock<QuantumMCTSNode>>>,
152 | |     ) -> Result<NetworkTopology, CognitiveError> {
    | |________________________________________________^

error[E0599]: no method named `summary` found for struct `std::sync::Arc<quantum_mcts::entanglement::metrics::EntanglementMetrics>` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/health.rs:97:44
   |
97 |         let metrics_summary = self.metrics.summary();
   |                                            ^^^^^^^
   |
help: there is a method `status_summary` with a similar name
   |
97 |         let metrics_summary = self.metrics.status_summary();
   |                                             +++++++

error[E0609]: no field `average_operation_time_us` on type `&AggregatedMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/health.rs:202:20
    |
202 |         if metrics.average_operation_time_us > config.max_response_time_us {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `total_operations`, `total_errors`, `combined_error_rate`, `peak_throughput`, `average_response_time`, `consistency_score`

error[E0609]: no field `average_operation_time_us` on type `&AggregatedMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/health.rs:205:25
    |
205 |                 metrics.average_operation_time_us,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `total_operations`, `total_errors`, `combined_error_rate`, `peak_throughput`, `average_response_time`, `consistency_score`

error[E0609]: no field `success_rate` on type `&AggregatedMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/health.rs:210:20
    |
210 |         if metrics.success_rate < config.min_success_rate {
    |                    ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `total_operations`, `total_errors`, `combined_error_rate`, `peak_throughput`, `average_response_time`, `consistency_score`

error[E0609]: no field `success_rate` on type `&AggregatedMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/health.rs:213:25
    |
213 |                 metrics.success_rate * 100.0,
    |                         ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `total_operations`, `total_errors`, `combined_error_rate`, `peak_throughput`, `average_response_time`, `consistency_score`

error[E0609]: no field `cache_hit_rate` on type `&AggregatedMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/health.rs:240:20
    |
240 |         if metrics.cache_hit_rate < 0.8 {
    |                    ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `total_operations`, `total_errors`, `combined_error_rate`, `peak_throughput`, `average_response_time`, `consistency_score`

error[E0609]: no field `cache_hit_rate` on type `&AggregatedMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/health.rs:243:25
    |
243 |                 metrics.cache_hit_rate * 100.0
    |                         ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `total_operations`, `total_errors`, `combined_error_rate`, `peak_throughput`, `average_response_time`, `consistency_score`

error[E0609]: no field `entanglement_failures` on type `&AggregatedMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/health.rs:248:20
    |
248 |         if metrics.entanglement_failures > metrics.entanglement_operations / 10 {
    |                    ^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `total_operations`, `total_errors`, `combined_error_rate`, `peak_throughput`, `average_response_time`, `consistency_score`

error[E0609]: no field `entanglement_operations` on type `&AggregatedMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/health.rs:248:52
    |
248 |         if metrics.entanglement_failures > metrics.entanglement_operations / 10 {
    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `total_operations`, `total_errors`, `combined_error_rate`, `peak_throughput`, `average_response_time`, `consistency_score`

error[E0609]: no field `operations_per_second` on type `&AggregatedMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/health.rs:259:20
    |
259 |         if metrics.operations_per_second < 10.0 {
    |                    ^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `total_operations`, `total_errors`, `combined_error_rate`, `peak_throughput`, `average_response_time`, `consistency_score`

error[E0599]: no method named `summary` found for struct `std::sync::Arc<quantum_mcts::entanglement::metrics::EntanglementMetrics>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/health.rs:340:44
    |
340 |         let metrics_summary = self.metrics.summary();
    |                                            ^^^^^^^
    |
help: there is a method `status_summary` with a similar name
    |
340 |         let metrics_summary = self.metrics.status_summary();
    |                                             +++++++

error[E0689]: can't call method `min` on ambiguous numeric type `{float}`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/health.rs:352:91
    |
352 |             let performance_factor = (1000.0 / metrics_summary.average_operation_time_us).min(1.0);
    |                                                                                           ^^^

error[E0689]: can't call method `max` on ambiguous numeric type `{float}`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/health.rs:372:18
    |
372 |         Ok(score.max(0.0).min(1.0))
    |                  ^^^
    |
help: you must specify a type for this binding, like `f32`
    |
343 |         let mut score: f32 = 1.0;
    |                      +++++

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/health.rs:377:33
    |
377 |         let health_score = self.quick_health_check().await?;
    |                                 ^^^^^^^^^^^^^^^^^^ multiple `quick_health_check` found
    |
note: candidate #1 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:254:5
    |
254 |     pub async fn quick_health_check(&self) -> Result<f64, CognitiveError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/health.rs:337:5
    |
337 |     pub async fn quick_health_check(&self) -> Result<f64, CognitiveError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/health.rs:383:33
    |
383 |         let health_score = self.quick_health_check().await?;
    |                                 ^^^^^^^^^^^^^^^^^^ multiple `quick_health_check` found
    |
note: candidate #1 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:254:5
    |
254 |     pub async fn quick_health_check(&self) -> Result<f64, CognitiveError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/health.rs:337:5
    |
337 |     pub async fn quick_health_check(&self) -> Result<f64, CognitiveError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `summary` found for struct `std::sync::Arc<quantum_mcts::entanglement::metrics::EntanglementMetrics>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/health.rs:384:44
    |
384 |         let metrics_summary = self.metrics.summary();
    |                                            ^^^^^^^
    |
help: there is a method `status_summary` with a similar name
    |
384 |         let metrics_summary = self.metrics.status_summary();
    |                                             +++++++

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:50:22
    |
50  |                 self.perform_combined_optimization(tree, start_time).await
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ multiple `perform_combined_optimization` found
    |
note: candidate #1 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/combined_optimization.rs:19:5
    |
19  | /     pub async fn perform_combined_optimization(
20  | |         &mut self,
21  | |         tree: &mut HashMap<String, QuantumMCTSNode>,
22  | |         start_time: Instant,
23  | |     ) -> Result<EngineOperationResult, CognitiveError> {
    | |______________________________________________________^
note: candidate #2 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:198:5
    |
198 | /     pub async fn perform_combined_optimization(
199 | |         &mut self,
200 | |         tree: &mut HashMap<String, QuantumMCTSNode>,
201 | |         start_time: Instant,
202 | |     ) -> Result<EngineOperationResult, CognitiveError> {
    | |______________________________________________________^

error[E0609]: no field `optimization` on type `&mut quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:81:40
   |
81 |         let optimization_result = self.optimization.optimize_entanglements(tree).await?;
   |                                        ^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `manager`, `metrics`, `config`, `entanglement_graph`

error[E0609]: no field `optimization` on type `&mut quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:106:36
    |
106 |         let creation_result = self.optimization.create_strategic_entanglements(tree).await?;
    |                                    ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `manager`, `metrics`, `config`, `entanglement_graph`

error[E0609]: no field `pruning` on type `&mut quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:131:35
    |
131 |         let pruning_result = self.pruning.prune_weak_entanglements(tree).await?;
    |                                   ^^^^^^^ unknown field
    |
    = note: available fields are: `manager`, `metrics`, `config`, `entanglement_graph`

error[E0609]: no field `balancing` on type `&mut quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:156:37
    |
156 |         let balancing_result = self.balancing.balance_network_load(tree).await?;
    |                                     ^^^^^^^^^ unknown field
    |
    = note: available fields are: `manager`, `metrics`, `config`, `entanglement_graph`

error[E0609]: no field `health` on type `&mut quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:181:34
    |
181 |         let health_report = self.health.check_network_health(tree).await?;
    |                                  ^^^^^^ unknown field
    |
    = note: available fields are: `manager`, `metrics`, `config`, `entanglement_graph`

error[E0609]: no field `health` on type `&mut quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:216:20
    |
216 |         match self.health.check_network_health(tree).await {
    |                    ^^^^^^ unknown field
    |
    = note: available fields are: `manager`, `metrics`, `config`, `entanglement_graph`

error[E0609]: no field `optimization` on type `&mut quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:232:24
    |
232 |             match self.optimization.optimize_entanglements(tree).await {
    |                        ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `manager`, `metrics`, `config`, `entanglement_graph`

error[E0609]: no field `optimization` on type `&mut quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:249:24
    |
249 |             match self.optimization.create_strategic_entanglements(tree).await {
    |                        ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `manager`, `metrics`, `config`, `entanglement_graph`

error[E0609]: no field `pruning` on type `&mut quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:265:20
    |
265 |         match self.pruning.prune_weak_entanglements(tree).await {
    |                    ^^^^^^^ unknown field
    |
    = note: available fields are: `manager`, `metrics`, `config`, `entanglement_graph`

error[E0609]: no field `balancing` on type `&mut quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:280:20
    |
280 |         match self.balancing.balance_network_load(tree).await {
    |                    ^^^^^^^^^ unknown field
    |
    = note: available fields are: `manager`, `metrics`, `config`, `entanglement_graph`

error[E0599]: no function or associated item named `analyze_network_topology` found for struct `NetworkTopologyAnalyzer` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/optimization.rs:69:57
    |
69  |         let initial_topology = NetworkTopologyAnalyzer::analyze_network_topology(&self.entanglement_graph).await?;
    |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^ function or associated item not found in `NetworkTopologyAnalyzer`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:144:1
    |
144 | pub struct NetworkTopologyAnalyzer;
    | ---------------------------------- function or associated item `analyze_network_topology` not found for this struct
    |
help: there is an associated function `analyze_topology` with a similar name
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:149:5
    |
149 | /     pub async fn analyze_topology(
150 | |         graph: &EntanglementGraph,
151 | |         nodes: &HashMap<String, Arc<RwLock<QuantumMCTSNode>>>,
152 | |     ) -> Result<NetworkTopology, CognitiveError> {
    | |________________________________________________^

error[E0599]: no method named `record_topology_analysis` found for struct `std::sync::Arc<quantum_mcts::entanglement::metrics::EntanglementMetrics>` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/optimization.rs:70:22
   |
70 |         self.metrics.record_topology_analysis();
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `std::sync::Arc<quantum_mcts::entanglement::metrics::EntanglementMetrics>`

error[E0599]: no method named `prune_weak_entanglements` found for struct `QuantumEntanglementManager` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/optimization.rs:80:32
   |
80 |             match self.manager.prune_weak_entanglements(pruning_threshold).await {
   |                                ^^^^^^^^^^^^^^^^^^^^^^^^
   |
  ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:25:1
   |
25 | pub struct QuantumEntanglementManager {
   | ------------------------------------- method `prune_weak_entanglements` not found for this struct
   |
help: there is a method `create_entanglement` with a similar name, but with different arguments
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:51:5
   |
51 | /     pub async fn create_entanglement(
52 | |         &mut self,
53 | |         node_id: &str,
54 | |         tree: &HashMap<String, QuantumMCTSNode>,
55 | |     ) -> Result<Vec<String>, CognitiveError> {
   | |____________________________________________^

error[E0599]: no method named `record_entanglements_pruned` found for struct `std::sync::Arc<quantum_mcts::entanglement::metrics::EntanglementMetrics>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/optimization.rs:85:38
    |
85  |                         self.metrics.record_entanglements_pruned(pruned);
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: there is a method `record_entanglement` with a similar name, but with different arguments
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/mod.rs:150:5
    |
150 |     pub fn record_entanglement(&self) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `balance_entanglement_distribution` found for mutable reference `&mut quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/optimization.rs:117:20
    |
117 |         match self.balance_entanglement_distribution(tree).await {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `&mut quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`

error[E0599]: no function or associated item named `analyze_network_topology` found for struct `NetworkTopologyAnalyzer` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/optimization.rs:154:55
    |
154 |         let final_topology = NetworkTopologyAnalyzer::analyze_network_topology(&self.entanglement_graph).await?;
    |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^ function or associated item not found in `NetworkTopologyAnalyzer`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:144:1
    |
144 | pub struct NetworkTopologyAnalyzer;
    | ---------------------------------- function or associated item `analyze_network_topology` not found for this struct
    |
help: there is an associated function `analyze_topology` with a similar name
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:149:5
    |
149 | /     pub async fn analyze_topology(
150 | |         graph: &EntanglementGraph,
151 | |         nodes: &HashMap<String, Arc<RwLock<QuantumMCTSNode>>>,
152 | |     ) -> Result<NetworkTopology, CognitiveError> {
    | |________________________________________________^

error[E0599]: no method named `record_optimization_completed` found for struct `std::sync::Arc<quantum_mcts::entanglement::metrics::EntanglementMetrics>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/optimization.rs:173:22
    |
173 |         self.metrics.record_optimization_completed(
    |         -------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: there is a method `record_operation` with a similar name, but with different arguments
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/mod.rs:156:5
    |
156 |     pub fn record_operation(&self, duration: Duration) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no function or associated item named `analyze_network_topology` found for struct `NetworkTopologyAnalyzer` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/optimization.rs:201:49
    |
201 |         let topology = NetworkTopologyAnalyzer::analyze_network_topology(&self.entanglement_graph).await?;
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^ function or associated item not found in `NetworkTopologyAnalyzer`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:144:1
    |
144 | pub struct NetworkTopologyAnalyzer;
    | ---------------------------------- function or associated item `analyze_network_topology` not found for this struct
    |
help: there is an associated function `analyze_topology` with a similar name
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:149:5
    |
149 | /     pub async fn analyze_topology(
150 | |         graph: &EntanglementGraph,
151 | |         nodes: &HashMap<String, Arc<RwLock<QuantumMCTSNode>>>,
152 | |     ) -> Result<NetworkTopology, CognitiveError> {
    | |________________________________________________^

error[E0599]: no method named `create_entanglement_batch` found for struct `QuantumEntanglementManager` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/optimization.rs:212:32
    |
212 |             match self.manager.create_entanglement_batch(batch).await {
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:25:1
    |
25  | pub struct QuantumEntanglementManager {
    | ------------------------------------- method `create_entanglement_batch` not found for this struct
    |
help: there is a method `create_entanglement` with a similar name, but with different arguments
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:51:5
    |
51  | /     pub async fn create_entanglement(
52  | |         &mut self,
53  | |         node_id: &str,
54  | |         tree: &HashMap<String, QuantumMCTSNode>,
55  | |     ) -> Result<Vec<String>, CognitiveError> {
    | |____________________________________________^

error[E0599]: no method named `record_entanglements_created` found for struct `std::sync::Arc<quantum_mcts::entanglement::metrics::EntanglementMetrics>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/optimization.rs:215:34
    |
215 |                     self.metrics.record_entanglements_created(created);
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: there is a method `record_entanglement` with a similar name, but with different arguments
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/mod.rs:150:5
    |
150 |     pub fn record_entanglement(&self) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no function or associated item named `analyze_network_topology` found for struct `NetworkTopologyAnalyzer` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/optimization.rs:227:53
    |
227 |         let new_topology = NetworkTopologyAnalyzer::analyze_network_topology(&self.entanglement_graph).await?;
    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^ function or associated item not found in `NetworkTopologyAnalyzer`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:144:1
    |
144 | pub struct NetworkTopologyAnalyzer;
    | ---------------------------------- function or associated item `analyze_network_topology` not found for this struct
    |
help: there is an associated function `analyze_topology` with a similar name
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:149:5
    |
149 | /     pub async fn analyze_topology(
150 | |         graph: &EntanglementGraph,
151 | |         nodes: &HashMap<String, Arc<RwLock<QuantumMCTSNode>>>,
152 | |     ) -> Result<NetworkTopology, CognitiveError> {
    | |________________________________________________^

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/optimization.rs:230:34
    |
230 |         let reason = if topology.is_sparse() {
    |                                  ^^^^^^^^^ multiple `is_sparse` found
    |
note: candidate #1 is defined in an impl for the type `network_topology::NetworkTopology`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:262:5
    |
262 |     pub fn is_sparse(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `network_topology::NetworkTopology`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:45:5
    |
45  |     pub fn is_sparse(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/optimization.rs:232:29
    |
232 |         } else if !topology.has_good_connectivity() {
    |                             ^^^^^^^^^^^^^^^^^^^^^ multiple `has_good_connectivity` found
    |
note: candidate #1 is defined in an impl for the type `network_topology::NetworkTopology`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:267:5
    |
267 |     pub fn has_good_connectivity(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `network_topology::NetworkTopology`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:39:5
    |
39  |     pub fn has_good_connectivity(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0609]: no field `max_strategic_entanglements` on type `quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/optimization.rs:314:56
    |
314 |                     if candidates.len() >= self.config.max_strategic_entanglements {
    |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `max_strategic_entanglements` on type `quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/optimization.rs:319:48
    |
319 |             if candidates.len() >= self.config.max_strategic_entanglements {
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0599]: no method named `get_node_connectivity` found for struct `QuantumEntanglementManager` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/optimization.rs:337:45
    |
337 |             let connectivity = self.manager.get_node_connectivity(node_id).await?;
    |                                             ^^^^^^^^^^^^^^^^^^^^^ method not found in `QuantumEntanglementManager`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:25:1
    |
25  | pub struct QuantumEntanglementManager {
    | ------------------------------------- method `get_node_connectivity` not found for this struct

error[E0609]: no field `value` on type `&quantum_mcts::node_state::node::QuantumMCTSNode`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/optimization.rs:356:49
    |
356 |             .map(|(id, node)| (id.clone(), node.value + (node.visits as f64 * 0.1)))
    |                                                 ^^^^^ unknown field
    |
    = note: available fields are: `id`, `visits`, `amplitude`, `quantum_reward`, `children` ... and 6 others

error[E0599]: no method named `check_entanglement_exists` found for struct `QuantumEntanglementManager` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/optimization.rs:376:22
    |
376 |         self.manager.check_entanglement_exists(node1, node2).await
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:25:1
    |
25  | pub struct QuantumEntanglementManager {
    | ------------------------------------- method `check_entanglement_exists` not found for this struct
    |
help: there is a method `create_entanglement` with a similar name
    |
376 -         self.manager.check_entanglement_exists(node1, node2).await
376 +         self.manager.create_entanglement(node1, node2).await
    |

error[E0599]: no function or associated item named `analyze_network_topology` found for struct `NetworkTopologyAnalyzer` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/pruning.rs:69:49
    |
69  |         let topology = NetworkTopologyAnalyzer::analyze_network_topology(&self.entanglement_graph).await?;
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^ function or associated item not found in `NetworkTopologyAnalyzer`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:144:1
    |
144 | pub struct NetworkTopologyAnalyzer;
    | ---------------------------------- function or associated item `analyze_network_topology` not found for this struct
    |
help: there is an associated function `analyze_topology` with a similar name
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:149:5
    |
149 | /     pub async fn analyze_topology(
150 | |         graph: &EntanglementGraph,
151 | |         nodes: &HashMap<String, Arc<RwLock<QuantumMCTSNode>>>,
152 | |     ) -> Result<NetworkTopology, CognitiveError> {
    | |________________________________________________^

error[E0599]: no function or associated item named `analyze_network_topology` found for struct `NetworkTopologyAnalyzer` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/pruning.rs:83:53
    |
83  |         let new_topology = NetworkTopologyAnalyzer::analyze_network_topology(&self.entanglement_graph).await?;
    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^ function or associated item not found in `NetworkTopologyAnalyzer`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:144:1
    |
144 | pub struct NetworkTopologyAnalyzer;
    | ---------------------------------- function or associated item `analyze_network_topology` not found for this struct
    |
help: there is an associated function `analyze_topology` with a similar name
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:149:5
    |
149 | /     pub async fn analyze_topology(
150 | |         graph: &EntanglementGraph,
151 | |         nodes: &HashMap<String, Arc<RwLock<QuantumMCTSNode>>>,
152 | |     ) -> Result<NetworkTopology, CognitiveError> {
    | |________________________________________________^

error[E0599]: no method named `record_intelligent_pruning` found for struct `std::sync::Arc<quantum_mcts::entanglement::metrics::EntanglementMetrics>` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/pruning.rs:90:22
   |
90 |         self.metrics.record_intelligent_pruning(
   |         -------------^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `std::sync::Arc<quantum_mcts::entanglement::metrics::EntanglementMetrics>`

error[E0599]: no method named `get_node_entanglements` found for struct `QuantumEntanglementManager` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/pruning.rs:122:47
    |
122 |         let node_entanglements = self.manager.get_node_entanglements(node_id).await?;
    |                                               ^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:25:1
    |
25  | pub struct QuantumEntanglementManager {
    | ------------------------------------- method `get_node_entanglements` not found for this struct
    |
help: there is a method `update_node_entanglements` with a similar name, but with different arguments
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:325:5
    |
325 | /     pub async fn update_node_entanglements(
326 | |         &mut self,
327 | |         node_id: &str,
328 | |         tree: &mut HashMap<String, QuantumMCTSNode>,
329 | |     ) -> Result<(), CognitiveError> {
    | |___________________________________^

error[E0599]: no method named `record_entanglement_pruned` found for struct `std::sync::Arc<quantum_mcts::entanglement::metrics::EntanglementMetrics>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/pruning.rs:132:38
    |
132 |                         self.metrics.record_entanglement_pruned();
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: there is a method `record_entanglement` with a similar name
    |
132 -                         self.metrics.record_entanglement_pruned();
132 +                         self.metrics.record_entanglement();
    |

error[E0599]: no method named `get_all_entanglements` found for struct `QuantumEntanglementManager` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/pruning.rs:258:46
    |
258 |         let all_entanglements = self.manager.get_all_entanglements().await?;
    |                                              ^^^^^^^^^^^^^^^^^^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:25:1
    |
25  | pub struct QuantumEntanglementManager {
    | ------------------------------------- method `get_all_entanglements` not found for this struct
    |
help: there is a method `create_entanglement` with a similar name, but with different arguments
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:51:5
    |
51  | /     pub async fn create_entanglement(
52  | |         &mut self,
53  | |         node_id: &str,
54  | |         tree: &HashMap<String, QuantumMCTSNode>,
55  | |     ) -> Result<Vec<String>, CognitiveError> {
    | |____________________________________________^

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/pruning.rs:273:14
    |
273 |         for (node1, node2, _strength) in sorted_entanglements.into_iter().take(max_to_prune) {
    |              ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: all local variables must have a statically known size

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/pruning.rs:273:42
    |
273 |         for (node1, node2, _strength) in sorted_entanglements.into_iter().take(max_to_prune) {
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: only the last element of a tuple may have a dynamically sized type

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/pruning.rs:273:21
    |
273 |         for (node1, node2, _strength) in sorted_entanglements.into_iter().take(max_to_prune) {
    |                     ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: all local variables must have a statically known size

error[E0599]: no method named `record_entanglement_pruned` found for struct `std::sync::Arc<quantum_mcts::entanglement::metrics::EntanglementMetrics>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/pruning.rs:277:34
    |
277 |                     self.metrics.record_entanglement_pruned();
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: there is a method `record_entanglement` with a similar name
    |
277 -                     self.metrics.record_entanglement_pruned();
277 +                     self.metrics.record_entanglement();
    |

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/pruning.rs:280:82
    |
280 |                     debug!("Entanglement between {} and {} was already removed", node1, node2);
    |                                                  --                              ^^^^^ doesn't have a size known at compile-time
    |                                                  |
    |                                                  required by this formatting parameter
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: this error originates in the macro `$crate::__macro_support::format_args` which comes from the expansion of the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the size for values of type `str` cannot be known at compilation time
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/pruning.rs:283:82
    |
283 |                     warn!("Failed to remove entanglement between {} and {}: {}", node1, node2, e);
    |                                                                  --              ^^^^^ doesn't have a size known at compile-time
    |                                                                  |
    |                                                                  required by this formatting parameter
    |
    = help: the trait `Sized` is not implemented for `str`
    = note: this error originates in the macro `$crate::__macro_support::format_args` which comes from the expansion of the macro `warn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no method named `get_all_entanglements` found for struct `QuantumEntanglementManager` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/pruning.rs:293:46
    |
293 |         let all_entanglements = self.manager.get_all_entanglements().await?;
    |                                              ^^^^^^^^^^^^^^^^^^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:25:1
    |
25  | pub struct QuantumEntanglementManager {
    | ------------------------------------- method `get_all_entanglements` not found for this struct
    |
help: there is a method `create_entanglement` with a similar name, but with different arguments
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:51:5
    |
51  | /     pub async fn create_entanglement(
52  | |         &mut self,
53  | |         node_id: &str,
54  | |         tree: &HashMap<String, QuantumMCTSNode>,
55  | |     ) -> Result<Vec<String>, CognitiveError> {
    | |____________________________________________^

error[E0599]: no method named `summary` found for struct `std::sync::Arc<quantum_mcts::entanglement::metrics::EntanglementMetrics>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/pruning.rs:330:44
    |
330 |         let metrics_summary = self.metrics.summary();
    |                                            ^^^^^^^
    |
help: there is a method `status_summary` with a similar name
    |
330 |         let metrics_summary = self.metrics.status_summary();
    |                                             +++++++

error[E0599]: no method named `get_recent_pruning_statistics` found for struct `std::sync::Arc<quantum_mcts::entanglement::metrics::EntanglementMetrics>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/pruning.rs:358:49
    |
358 |         let recent_pruning_stats = self.metrics.get_recent_pruning_statistics().await?;
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: there is a method `rolling_statistics` with a similar name
    |
358 -         let recent_pruning_stats = self.metrics.get_recent_pruning_statistics().await?;
358 +         let recent_pruning_stats = self.metrics.rolling_statistics().await?;
    |

error[E0599]: no function or associated item named `analyze_network_topology` found for struct `NetworkTopologyAnalyzer` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:111:49
    |
111 |         let topology = NetworkTopologyAnalyzer::analyze_network_topology(&entanglement_graph).await?;
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^ function or associated item not found in `NetworkTopologyAnalyzer`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:144:1
    |
144 | pub struct NetworkTopologyAnalyzer;
    | ---------------------------------- function or associated item `analyze_network_topology` not found for this struct
    |
help: there is an associated function `analyze_topology` with a similar name
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:149:5
    |
149 | /     pub async fn analyze_topology(
150 | |         graph: &EntanglementGraph,
151 | |         nodes: &HashMap<String, Arc<RwLock<QuantumMCTSNode>>>,
152 | |     ) -> Result<NetworkTopology, CognitiveError> {
    | |________________________________________________^

error[E0609]: no field `max_concurrent_operations` on type `quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:117:29
    |
117 |             adaptive_config.max_concurrent_operations = 100;
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `batch_operation_size` on type `quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:118:29
    |
118 |             adaptive_config.batch_operation_size = 50;
    |                             ^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `enable_parallel_processing` on type `quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:119:29
    |
119 |             adaptive_config.enable_parallel_processing = true;
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `max_concurrent_operations` on type `quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:122:29
    |
122 |             adaptive_config.max_concurrent_operations = 20;
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `batch_operation_size` on type `quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:123:29
    |
123 |             adaptive_config.batch_operation_size = 5;
    |                             ^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `enable_preemptive_optimization` on type `quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:124:29
    |
124 |             adaptive_config.enable_preemptive_optimization = true;
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `max_concurrent_operations` on type `quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:127:29
    |
127 |             adaptive_config.max_concurrent_operations = 50;
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `batch_operation_size` on type `quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:128:29
    |
128 |             adaptive_config.batch_operation_size = 20;
    |                             ^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `enable_adaptive_batching` on type `quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:129:29
    |
129 |             adaptive_config.enable_adaptive_batching = true;
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `entanglement_strength_threshold` on type `quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:134:29
    |
134 |             adaptive_config.entanglement_strength_threshold *= 1.5;
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
134 -             adaptive_config.entanglement_strength_threshold *= 1.5;
134 +             adaptive_config.entanglement_strength *= 1.5;
    |

error[E0609]: no field `pruning_frequency_ms` on type `quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:135:29
    |
135 |             adaptive_config.pruning_frequency_ms /= 2;
    |                             ^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `aggressive_pruning` on type `quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:136:29
    |
136 |             adaptive_config.aggressive_pruning = true;
    |                             ^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `entanglement_strength_threshold` on type `quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:138:29
    |
138 |             adaptive_config.entanglement_strength_threshold *= 0.7;
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
138 -             adaptive_config.entanglement_strength_threshold *= 0.7;
138 +             adaptive_config.entanglement_strength *= 0.7;
    |

error[E0609]: no field `creation_batch_size` on type `quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:139:29
    |
139 |             adaptive_config.creation_batch_size *= 2;
    |                             ^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `enable_creation_acceleration` on type `quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:140:29
    |
140 |             adaptive_config.enable_creation_acceleration = true;
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `connectivity_repair_priority` on type `quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:145:29
    |
145 |             adaptive_config.connectivity_repair_priority = true;
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `bridge_creation_enabled` on type `quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:146:29
    |
146 |             adaptive_config.bridge_creation_enabled = true;
    |                             ^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `isolation_detection_threshold` on type `quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:147:29
    |
147 |             adaptive_config.isolation_detection_threshold = 0.1;
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `hub_node_optimization` on type `quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:152:29
    |
152 |             adaptive_config.hub_node_optimization = true;
    |                             ^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `load_balancing_frequency_ms` on type `quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:153:29
    |
153 |             adaptive_config.load_balancing_frequency_ms = 5000;
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `sparse_network_optimization` on type `quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:155:29
    |
155 |             adaptive_config.sparse_network_optimization = true;
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `minimum_connectivity_threshold` on type `quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:156:29
    |
156 |             adaptive_config.minimum_connectivity_threshold = 2.0;
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0599]: no method named `balance_entanglement_distribution` found for mutable reference `&mut quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operation_executor.rs:148:37
    |
148 |         let balancing_result = self.balance_entanglement_distribution(tree).await?;
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `&mut quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operation_executor.rs:193:33
    |
193 |         let health_check = self.perform_comprehensive_operation(tree, EngineOperationType::HealthCheck).await?;
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ multiple `perform_comprehensive_operation` found
    |
note: candidate #1 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operation_executor.rs:21:5
    |
21  | /     pub async fn perform_comprehensive_operation(
22  | |         &mut self,
23  | |         tree: &mut HashMap<String, QuantumMCTSNode>,
24  | |         operation_type: EngineOperationType,
25  | |     ) -> Result<EngineOperationResult, CognitiveError> {
    | |______________________________________________________^
note: candidate #2 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:25:5
    |
25  | /     pub async fn perform_comprehensive_operation(
26  | |         &mut self,
27  | |         tree: &mut HashMap<String, QuantumMCTSNode>,
28  | |         operation_type: EngineOperationType,
29  | |     ) -> Result<EngineOperationResult, CognitiveError> {
    | |______________________________________________________^

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operation_executor.rs:205:47
    |
205 |                     let pruning_result = self.perform_comprehensive_operation(tree, EngineOperationType::IntelligentPruning).await?;
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ multiple `perform_comprehensive_operation` found
    |
note: candidate #1 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operation_executor.rs:21:5
    |
21  | /     pub async fn perform_comprehensive_operation(
22  | |         &mut self,
23  | |         tree: &mut HashMap<String, QuantumMCTSNode>,
24  | |         operation_type: EngineOperationType,
25  | |     ) -> Result<EngineOperationResult, CognitiveError> {
    | |______________________________________________________^
note: candidate #2 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:25:5
    |
25  | /     pub async fn perform_comprehensive_operation(
26  | |         &mut self,
27  | |         tree: &mut HashMap<String, QuantumMCTSNode>,
28  | |         operation_type: EngineOperationType,
29  | |     ) -> Result<EngineOperationResult, CognitiveError> {
    | |______________________________________________________^

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operation_executor.rs:210:48
    |
210 |                     let creation_result = self.perform_comprehensive_operation(tree, EngineOperationType::StrategyCreation).await?;
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ multiple `perform_comprehensive_operation` found
    |
note: candidate #1 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operation_executor.rs:21:5
    |
21  | /     pub async fn perform_comprehensive_operation(
22  | |         &mut self,
23  | |         tree: &mut HashMap<String, QuantumMCTSNode>,
24  | |         operation_type: EngineOperationType,
25  | |     ) -> Result<EngineOperationResult, CognitiveError> {
    | |______________________________________________________^
note: candidate #2 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:25:5
    |
25  | /     pub async fn perform_comprehensive_operation(
26  | |         &mut self,
27  | |         tree: &mut HashMap<String, QuantumMCTSNode>,
28  | |         operation_type: EngineOperationType,
29  | |     ) -> Result<EngineOperationResult, CognitiveError> {
    | |______________________________________________________^

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operation_executor.rs:214:48
    |
214 |                 let optimization_result = self.perform_comprehensive_operation(tree, EngineOperationType::FullOptimization).await?;
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ multiple `perform_comprehensive_operation` found
    |
note: candidate #1 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operation_executor.rs:21:5
    |
21  | /     pub async fn perform_comprehensive_operation(
22  | |         &mut self,
23  | |         tree: &mut HashMap<String, QuantumMCTSNode>,
24  | |         operation_type: EngineOperationType,
25  | |     ) -> Result<EngineOperationResult, CognitiveError> {
    | |______________________________________________________^
note: candidate #2 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:25:5
    |
25  | /     pub async fn perform_comprehensive_operation(
26  | |         &mut self,
27  | |         tree: &mut HashMap<String, QuantumMCTSNode>,
28  | |         operation_type: EngineOperationType,
29  | |     ) -> Result<EngineOperationResult, CognitiveError> {
    | |______________________________________________________^

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operation_executor.rs:220:43
    |
220 |                 let pruning_result = self.perform_comprehensive_operation(tree, EngineOperationType::IntelligentPruning).await?;
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ multiple `perform_comprehensive_operation` found
    |
note: candidate #1 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operation_executor.rs:21:5
    |
21  | /     pub async fn perform_comprehensive_operation(
22  | |         &mut self,
23  | |         tree: &mut HashMap<String, QuantumMCTSNode>,
24  | |         operation_type: EngineOperationType,
25  | |     ) -> Result<EngineOperationResult, CognitiveError> {
    | |______________________________________________________^
note: candidate #2 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:25:5
    |
25  | /     pub async fn perform_comprehensive_operation(
26  | |         &mut self,
27  | |         tree: &mut HashMap<String, QuantumMCTSNode>,
28  | |         operation_type: EngineOperationType,
29  | |     ) -> Result<EngineOperationResult, CognitiveError> {
    | |______________________________________________________^

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operation_executor.rs:226:44
    |
226 |                 let creation_result = self.perform_comprehensive_operation(tree, EngineOperationType::StrategyCreation).await?;
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ multiple `perform_comprehensive_operation` found
    |
note: candidate #1 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operation_executor.rs:21:5
    |
21  | /     pub async fn perform_comprehensive_operation(
22  | |         &mut self,
23  | |         tree: &mut HashMap<String, QuantumMCTSNode>,
24  | |         operation_type: EngineOperationType,
25  | |     ) -> Result<EngineOperationResult, CognitiveError> {
    | |______________________________________________________^
note: candidate #2 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:25:5
    |
25  | /     pub async fn perform_comprehensive_operation(
26  | |         &mut self,
27  | |         tree: &mut HashMap<String, QuantumMCTSNode>,
28  | |         operation_type: EngineOperationType,
29  | |     ) -> Result<EngineOperationResult, CognitiveError> {
    | |______________________________________________________^

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operation_executor.rs:232:48
    |
232 |                 let optimization_result = self.perform_comprehensive_operation(tree, EngineOperationType::FullOptimization).await?;
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ multiple `perform_comprehensive_operation` found
    |
note: candidate #1 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operation_executor.rs:21:5
    |
21  | /     pub async fn perform_comprehensive_operation(
22  | |         &mut self,
23  | |         tree: &mut HashMap<String, QuantumMCTSNode>,
24  | |         operation_type: EngineOperationType,
25  | |     ) -> Result<EngineOperationResult, CognitiveError> {
    | |______________________________________________________^
note: candidate #2 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:25:5
    |
25  | /     pub async fn perform_comprehensive_operation(
26  | |         &mut self,
27  | |         tree: &mut HashMap<String, QuantumMCTSNode>,
28  | |         operation_type: EngineOperationType,
29  | |     ) -> Result<EngineOperationResult, CognitiveError> {
    | |______________________________________________________^

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operation_executor.rs:238:45
    |
238 |                 let balancing_result = self.perform_comprehensive_operation(tree, EngineOperationType::LoadBalancing).await?;
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ multiple `perform_comprehensive_operation` found
    |
note: candidate #1 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operation_executor.rs:21:5
    |
21  | /     pub async fn perform_comprehensive_operation(
22  | |         &mut self,
23  | |         tree: &mut HashMap<String, QuantumMCTSNode>,
24  | |         operation_type: EngineOperationType,
25  | |     ) -> Result<EngineOperationResult, CognitiveError> {
    | |______________________________________________________^
note: candidate #2 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:25:5
    |
25  | /     pub async fn perform_comprehensive_operation(
26  | |         &mut self,
27  | |         tree: &mut HashMap<String, QuantumMCTSNode>,
28  | |         operation_type: EngineOperationType,
29  | |     ) -> Result<EngineOperationResult, CognitiveError> {
    | |______________________________________________________^

error[E0599]: no method named `balance_entanglement_distribution` found for mutable reference `&mut quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/combined_optimization.rs:93:43
   |
93 |         let balancing_result = match self.balance_entanglement_distribution(tree).await {
   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `&mut quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`

error[E0599]: no method named `balance_entanglement_distribution` found for mutable reference `&mut quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/combined_optimization.rs:246:46
    |
246 |                     if let Ok(result) = self.balance_entanglement_distribution(tree).await {
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `&mut quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`

error[E0599]: no method named `summary` found for struct `std::sync::Arc<quantum_mcts::entanglement::metrics::EntanglementMetrics>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:232:44
    |
232 |         let metrics_summary = self.metrics.summary();
    |                                            ^^^^^^^
    |
help: there is a method `status_summary` with a similar name
    |
232 |         let metrics_summary = self.metrics.status_summary();
    |                                             +++++++

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:233:27
    |
233 |         let status = self.status_summary();
    |                           ^^^^^^^^^^^^^^ multiple `status_summary` found
    |
note: candidate #1 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:273:5
    |
273 |     pub fn status_summary(&self) -> EngineStatus {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:138:5
    |
138 |     pub fn status_summary(&self) -> EngineStatus {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:234:33
    |
234 |         let health_score = self.quick_health_check().await?;
    |                                 ^^^^^^^^^^^^^^^^^^ multiple `quick_health_check` found
    |
note: candidate #1 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:254:5
    |
254 |     pub async fn quick_health_check(&self) -> Result<f64, CognitiveError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/health.rs:337:5
    |
337 |     pub async fn quick_health_check(&self) -> Result<f64, CognitiveError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no function or associated item named `analyze_network_topology` found for struct `NetworkTopologyAnalyzer` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:237:49
    |
237 |         let topology = NetworkTopologyAnalyzer::analyze_network_topology(&self.entanglement_graph).await?;
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^ function or associated item not found in `NetworkTopologyAnalyzer`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:144:1
    |
144 | pub struct NetworkTopologyAnalyzer;
    | ---------------------------------- function or associated item `analyze_network_topology` not found for this struct
    |
help: there is an associated function `analyze_topology` with a similar name
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:149:5
    |
149 | /     pub async fn analyze_topology(
150 | |         graph: &EntanglementGraph,
151 | |         nodes: &HashMap<String, Arc<RwLock<QuantumMCTSNode>>>,
152 | |     ) -> Result<NetworkTopology, CognitiveError> {
    | |________________________________________________^

error[E0599]: no method named `node_count` found for struct `tokio::sync::RwLockReadGuard<'_, quantum::entanglement::EntanglementGraph>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:256:37
    |
256 |         let node_count = graph_read.node_count();
    |                                     ^^^^^^^^^^ method not found in `tokio::sync::RwLockReadGuard<'_, quantum::entanglement::EntanglementGraph>`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `node_count`, perhaps you need to implement it:
            candidate #1: `NodeCount`

error[E0599]: no method named `edge_count` found for struct `tokio::sync::RwLockReadGuard<'_, quantum::entanglement::EntanglementGraph>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:257:37
    |
257 |         let edge_count = graph_read.edge_count();
    |                                     ^^^^^^^^^^ method not found in `tokio::sync::RwLockReadGuard<'_, quantum::entanglement::EntanglementGraph>`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `edge_count`, perhaps you need to implement it:
            candidate #1: `EdgeCount`

error[E0599]: no method named `health_score` found for struct `std::sync::Arc<quantum_mcts::entanglement::metrics::EntanglementMetrics>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:266:43
    |
266 |         let metrics_health = self.metrics.health_score();
    |                                           ^^^^^^^^^^^^ method not found in `std::sync::Arc<quantum_mcts::entanglement::metrics::EntanglementMetrics>`

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_assessment.rs:20:31
    |
20  |         let statistics = self.get_comprehensive_statistics().await?;
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ multiple `get_comprehensive_statistics` found
    |
note: candidate #1 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:229:5
    |
229 |     pub async fn get_comprehensive_statistics(&self) -> Result<EngineStatistics, CognitiveError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:370:5
    |
370 |     pub fn get_comprehensive_statistics(&self) -> Result<EngineStatistics, CognitiveError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0382]: use of moved value: `resource_requirements`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_assessment.rs:110:31
    |
103 |         let resource_requirements = Self::calculate_resource_requirements(&optimized_actions);
    |             --------------------- move occurs because `resource_requirements` has type `ResourceRequirements`, which does not implement the `Copy` trait
...
108 |             resource_requirements,
    |             --------------------- value moved here
109 |             estimated_total_duration_ms: resource_requirements.total_duration_ms,
110 |             can_run_parallel: resource_requirements.parallelizable_actions > 0,
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ value used here after move
    |
help: consider cloning the value if the performance cost is acceptable
    |
108 |             resource_requirements: resource_requirements.clone(),
    |                                  +++++++++++++++++++++++++++++++

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/performance_grading.rs:200:31
    |
200 |         let statistics = self.get_comprehensive_statistics().await?;
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ multiple `get_comprehensive_statistics` found
    |
note: candidate #1 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:229:5
    |
229 |     pub async fn get_comprehensive_statistics(&self) -> Result<EngineStatistics, CognitiveError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:370:5
    |
370 |     pub fn get_comprehensive_statistics(&self) -> Result<EngineStatistics, CognitiveError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/mod.rs:112:41
    |
112 |         let performance_report = engine.create_performance_report().await?;
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^ multiple `create_performance_report` found
    |
note: candidate #1 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/performance_grading.rs:197:5
    |
197 |     pub async fn create_performance_report(&self) -> Result<EnginePerformanceReport, CognitiveError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:424:5
    |
424 |     pub fn create_performance_report(&self) -> Result<EnginePerformanceReport, CognitiveError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/mod.rs:114:33
    |
114 |         let statistics = engine.get_comprehensive_statistics().await?;
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ multiple `get_comprehensive_statistics` found
    |
note: candidate #1 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:229:5
    |
229 |     pub async fn get_comprehensive_statistics(&self) -> Result<EngineStatistics, CognitiveError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:370:5
    |
370 |     pub fn get_comprehensive_statistics(&self) -> Result<EngineStatistics, CognitiveError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/mod.rs:118:13
    |
118 |             maintenance_assessment,
    |             ^^^^^^^^^^^^^^^^^^^^^^ expected `MaintenanceAssessment`, found a different `MaintenanceAssessment`
    |
    = note: `MaintenanceAssessment` and `MaintenanceAssessment` have similar names, but are actually distinct types
note: `MaintenanceAssessment` is defined in module `crate::cognitive::quantum_mcts::entanglement::engine::maintenance_assessment` of the current crate
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_assessment.rs:191:1
    |
191 | pub struct MaintenanceAssessment {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: `MaintenanceAssessment` is defined in module `crate::cognitive::quantum_mcts::entanglement::engine::maintenance_statistics` of the current crate
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:20:1
    |
20  | pub struct MaintenanceAssessment {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/mod.rs:121:96
    |
121 |             recommendations: Self::generate_comprehensive_recommendations(&performance_report, &maintenance_assessment),
    |                              --------------------------------------------                      ^^^^^^^^^^^^^^^^^^^^^^^ expected `MaintenanceAssessment`, found a different `MaintenanceAssessment`
    |                              |
    |                              arguments to this function are incorrect
    |
    = note: `MaintenanceAssessment` and `MaintenanceAssessment` have similar names, but are actually distinct types
note: `MaintenanceAssessment` is defined in module `crate::cognitive::quantum_mcts::entanglement::engine::maintenance_assessment` of the current crate
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_assessment.rs:191:1
    |
191 | pub struct MaintenanceAssessment {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: `MaintenanceAssessment` is defined in module `crate::cognitive::quantum_mcts::entanglement::engine::maintenance_statistics` of the current crate
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:20:1
    |
20  | pub struct MaintenanceAssessment {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: associated function defined here
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/mod.rs:138:8
    |
138 |     fn generate_comprehensive_recommendations(
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
139 |         performance_report: &EnginePerformanceReport,
140 |         maintenance_assessment: &MaintenanceAssessment,
    |         ----------------------------------------------

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/mod.rs:247:26
    |
247 |             match engine.perform_comprehensive_operation(tree, operation_type.clone()).await {
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ multiple `perform_comprehensive_operation` found
    |
note: candidate #1 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operation_executor.rs:21:5
    |
21  | /     pub async fn perform_comprehensive_operation(
22  | |         &mut self,
23  | |         tree: &mut HashMap<String, QuantumMCTSNode>,
24  | |         operation_type: EngineOperationType,
25  | |     ) -> Result<EngineOperationResult, CognitiveError> {
    | |______________________________________________________^
note: candidate #2 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:25:5
    |
25  | /     pub async fn perform_comprehensive_operation(
26  | |         &mut self,
27  | |         tree: &mut HashMap<String, QuantumMCTSNode>,
28  | |         operation_type: EngineOperationType,
29  | |     ) -> Result<EngineOperationResult, CognitiveError> {
    | |______________________________________________________^

error[E0599]: no variant or associated item named `OperationFailed` found for enum `cognitive::types::CognitiveError` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/mod.rs:265:58
    |
265 |         Err(last_error.unwrap_or_else(|| CognitiveError::OperationFailed("Maximum retries exceeded".to_string())))
    |                                                          ^^^^^^^^^^^^^^^ variant or associated item not found in `cognitive::types::CognitiveError`
    |
   ::: packages/sweetmcp-memory/src/cognitive/types.rs:233:1
    |
233 | pub enum CognitiveError {
    | ----------------------- variant or associated item `OperationFailed` not found for this enum
    |
help: there is a variant with a similar name
    |
265 -         Err(last_error.unwrap_or_else(|| CognitiveError::OperationFailed("Maximum retries exceeded".to_string())))
265 +         Err(last_error.unwrap_or_else(|| CognitiveError::ExecutionFailed("Maximum retries exceeded".to_string())))
    |

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/mod.rs:277:33
    |
277 |             let result = engine.perform_comprehensive_operation(tree, operation).await;
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ multiple `perform_comprehensive_operation` found
    |
note: candidate #1 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operation_executor.rs:21:5
    |
21  | /     pub async fn perform_comprehensive_operation(
22  | |         &mut self,
23  | |         tree: &mut HashMap<String, QuantumMCTSNode>,
24  | |         operation_type: EngineOperationType,
25  | |     ) -> Result<EngineOperationResult, CognitiveError> {
    | |______________________________________________________^
note: candidate #2 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:25:5
    |
25  | /     pub async fn perform_comprehensive_operation(
26  | |         &mut self,
27  | |         tree: &mut HashMap<String, QuantumMCTSNode>,
28  | |         operation_type: EngineOperationType,
29  | |     ) -> Result<EngineOperationResult, CognitiveError> {
    | |______________________________________________________^

error[E0599]: no method named `entanglement_count` found for reference `&quantum::entanglement::EntanglementGraph` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:154:41
    |
154 |         let total_entanglements = graph.entanglement_count().await?;
    |                                         ^^^^^^^^^^^^^^^^^^ method not found in `&quantum::entanglement::EntanglementGraph`

error[E0599]: no method named `get_entanglement_count` found for reference `&quantum::entanglement::EntanglementGraph` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:174:32
    |
174 |             let degree = graph.get_entanglement_count(node_id).await.unwrap_or(0);
    |                                ^^^^^^^^^^^^^^^^^^^^^^ method not found in `&quantum::entanglement::EntanglementGraph`

error[E0599]: no method named `get_entangled_nodes` found for reference `&quantum::entanglement::EntanglementGraph` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:226:35
    |
226 |             let neighbors = graph.get_entangled_nodes(&current).await?;
    |                                   ^^^^^^^^^^^^^^^^^^^ method not found in `&quantum::entanglement::EntanglementGraph`

error[E0599]: no method named `get_entangled_nodes` found for reference `&quantum::entanglement::EntanglementGraph` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:252:35
    |
252 |             let neighbors = graph.get_entangled_nodes(node_id).await?;
    |                                   ^^^^^^^^^^^^^^^^^^^ method not found in `&quantum::entanglement::EntanglementGraph`

error[E0599]: no method named `has_entanglement` found for reference `&quantum::entanglement::EntanglementGraph` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:264:30
    |
264 |                     if graph.has_entanglement(&neighbors[i], &neighbors[j]).await? {
    |                              ^^^^^^^^^^^^^^^^
    |
help: there is a method `create_entanglement` with a similar name, but with different arguments
   --> packages/sweetmcp-memory/src/cognitive/quantum/entanglement.rs:176:5
    |
176 | /     pub fn create_entanglement(
177 | |         &mut self,
178 | |         source_id: &str,
179 | |         target_id: &str,
180 | |         entanglement_type: EntanglementType,
181 | |         bond_strength: f64,
182 | |     ) -> CognitiveResult<()> {
    | |____________________________^

error[E0599]: no method named `get_entangled_nodes` found for reference `&quantum::entanglement::EntanglementGraph` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:381:35
    |
381 |             let neighbors = graph.get_entangled_nodes(current_node).await?;
    |                                   ^^^^^^^^^^^^^^^^^^^ method not found in `&quantum::entanglement::EntanglementGraph`

error[E0599]: no method named `get_entanglements` found for reference `&quantum::entanglement::EntanglementGraph` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/quality_assessment.rs:189:39
    |
189 |             let entanglements = graph.get_entanglements(node_id).await?;
    |                                       ^^^^^^^^^^^^^^^^^
    |
help: there is a method `create_entanglement` with a similar name, but with different arguments
   --> packages/sweetmcp-memory/src/cognitive/quantum/entanglement.rs:176:5
    |
176 | /     pub fn create_entanglement(
177 | |         &mut self,
178 | |         source_id: &str,
179 | |         target_id: &str,
180 | |         entanglement_type: EntanglementType,
181 | |         bond_strength: f64,
182 | |     ) -> CognitiveResult<()> {
    | |____________________________^

error[E0599]: no method named `get_entanglements` found for reference `&quantum::entanglement::EntanglementGraph` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/quality_assessment.rs:206:35
    |
206 |         let entanglements = graph.get_entanglements(node_id).await?;
    |                                   ^^^^^^^^^^^^^^^^^
    |
help: there is a method `create_entanglement` with a similar name, but with different arguments
   --> packages/sweetmcp-memory/src/cognitive/quantum/entanglement.rs:176:5
    |
176 | /     pub fn create_entanglement(
177 | |         &mut self,
178 | |         source_id: &str,
179 | |         target_id: &str,
180 | |         entanglement_type: EntanglementType,
181 | |         bond_strength: f64,
182 | |     ) -> CognitiveResult<()> {
    | |____________________________^

error[E0599]: no method named `get_entanglements` found for reference `&quantum::entanglement::EntanglementGraph` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/neighborhood_analysis.rs:164:35
    |
164 |         let entanglements = graph.get_entanglements(node_id).await?;
    |                                   ^^^^^^^^^^^^^^^^^
    |
help: there is a method `create_entanglement` with a similar name, but with different arguments
   --> packages/sweetmcp-memory/src/cognitive/quantum/entanglement.rs:176:5
    |
176 | /     pub fn create_entanglement(
177 | |         &mut self,
178 | |         source_id: &str,
179 | |         target_id: &str,
180 | |         entanglement_type: EntanglementType,
181 | |         bond_strength: f64,
182 | |     ) -> CognitiveResult<()> {
    | |____________________________^

error[E0609]: no field `state` on type `tokio::sync::RwLockReadGuard<'_, quantum_mcts::node_state::node::QuantumMCTSNode>`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/neighborhood_analysis.rs:185:40
    |
185 |                 let quality = neighbor.state.performance_score();
    |                                        ^^^^^ unknown field
    |
    = note: available fields are: `id`, `visits`, `amplitude`, `quantum_reward`, `children` ... and 6 others

error[E0609]: no field `state` on type `tokio::sync::RwLockReadGuard<'_, quantum_mcts::node_state::node::QuantumMCTSNode>`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/neighborhood_analysis.rs:189:29
    |
189 |                 if neighbor.state.is_coherent() {
    |                             ^^^^^ unknown field
    |
    = note: available fields are: `id`, `visits`, `amplitude`, `quantum_reward`, `children` ... and 6 others

error[E0599]: no method named `get_entanglement_count` found for reference `&quantum::entanglement::EntanglementGraph` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/bottleneck_detection.rs:36:36
   |
36 |                 let degree = graph.get_entanglement_count(node_id).await.unwrap_or(0);
   |                                    ^^^^^^^^^^^^^^^^^^^^^^ method not found in `&quantum::entanglement::EntanglementGraph`

error[E0599]: no method named `get_entanglement_count` found for reference `&quantum::entanglement::EntanglementGraph` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/bottleneck_detection.rs:61:32
   |
61 |             let degree = graph.get_entanglement_count(node_id).await.unwrap_or(0);
   |                                ^^^^^^^^^^^^^^^^^^^^^^ method not found in `&quantum::entanglement::EntanglementGraph`

error[E0599]: no method named `get_entangled_nodes` found for reference `&quantum::entanglement::EntanglementGraph` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/bottleneck_detection.rs:110:43
    |
110 |                     let neighbors = graph.get_entangled_nodes(&current).await?;
    |                                           ^^^^^^^^^^^^^^^^^^^ method not found in `&quantum::entanglement::EntanglementGraph`

error[E0599]: no method named `get_entangled_nodes` found for reference `&quantum::entanglement::EntanglementGraph` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/bottleneck_detection.rs:155:31
    |
155 |         let neighbors = graph.get_entangled_nodes(node_id).await?;
    |                               ^^^^^^^^^^^^^^^^^^^ method not found in `&quantum::entanglement::EntanglementGraph`

error[E0599]: no method named `get_entanglement_count` found for reference `&quantum::entanglement::EntanglementGraph` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/bottleneck_detection.rs:161:46
    |
161 |             let neighbor_connections = graph.get_entanglement_count(neighbor).await.unwrap_or(0);
    |                                              ^^^^^^^^^^^^^^^^^^^^^^ method not found in `&quantum::entanglement::EntanglementGraph`

error[E0599]: no method named `get_entanglement_count` found for reference `&quantum::entanglement::EntanglementGraph` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/bottleneck_detection.rs:193:28
    |
193 |         let degree = graph.get_entanglement_count(node_id).await.unwrap_or(0);
    |                            ^^^^^^^^^^^^^^^^^^^^^^ method not found in `&quantum::entanglement::EntanglementGraph`

error[E0599]: no method named `get_entanglement_count` found for reference `&quantum::entanglement::EntanglementGraph` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/bottleneck_detection.rs:218:28
    |
218 |         let degree = graph.get_entanglement_count(node_id).await.unwrap_or(0);
    |                            ^^^^^^^^^^^^^^^^^^^^^^ method not found in `&quantum::entanglement::EntanglementGraph`

error[E0599]: no method named `node_count` found for reference `&quantum::entanglement::EntanglementGraph` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_influence.rs:77:32
   |
77 |         let node_count = graph.node_count();
   |                                ^^^^^^^^^^ method not found in `&quantum::entanglement::EntanglementGraph`
   |
   = help: items from traits can only be used if the trait is implemented and in scope
   = note: the following trait defines an item `node_count`, perhaps you need to implement it:
           candidate #1: `NodeCount`

error[E0599]: no method named `node_indices` found for reference `&quantum::entanglement::EntanglementGraph` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_influence.rs:94:33
   |
94 |         for node_index in graph.node_indices() {
   |                                 ^^^^^^^^^^^^ method not found in `&quantum::entanglement::EntanglementGraph`

error[E0689]: can't call method `max` on ambiguous numeric type `{float}`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_influence.rs:108:43
    |
108 |             max_influence = max_influence.max(influence);
    |                                           ^^^
    |
help: you must specify a type for this binding, like `f32`
    |
90  |         let mut max_influence: f32 = 0.0;
    |                              +++++

error[E0599]: no method named `edges` found for reference `&quantum::entanglement::EntanglementGraph` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_influence.rs:134:28
    |
134 |         let degree = graph.edges(node_index).count() as f64;
    |                            ^^^^^------------ help: remove the arguments
    |                            |
    |                            field, not a method
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `edges`, perhaps you need to implement it:
            candidate #1: `IntoEdges`

error[E0599]: no method named `node_count` found for reference `&quantum::entanglement::EntanglementGraph` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_influence.rs:135:32
    |
135 |         let node_count = graph.node_count() as f64;
    |                                ^^^^^^^^^^ method not found in `&quantum::entanglement::EntanglementGraph`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `node_count`, perhaps you need to implement it:
            candidate #1: `NodeCount`

error[E0596]: cannot borrow `self.rolling_monitor` as mutable, as it is behind a `&` reference
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/mod.rs:477:9
    |
477 |         self.rolling_monitor.add_sample(duration);
    |         ^^^^^^^^^^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable
    |
help: consider changing this to be a mutable reference
    |
471 |     pub async fn time_operation_async<F, Fut, R>(&mut self, f: F) -> (R, Duration)
    |                                                   +++

error[E0596]: cannot borrow `self.active_benchmark` as mutable, as it is behind a `&` reference
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/mod.rs:479:34
    |
479 |         if let Some(benchmark) = &mut self.active_benchmark {
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable
    |
help: consider changing this to be a mutable reference
    |
471 |     pub async fn time_operation_async<F, Fut, R>(&mut self, f: F) -> (R, Duration)
    |                                                   +++

error[E0277]: can't compare `str` with `std::string::String`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:72:40
   |
72 |             let cache_key = if node_id < &candidate_id {
   |                                        ^ no implementation for `str < std::string::String` and `str > std::string::String`
   |
   = help: the trait `PartialOrd<std::string::String>` is not implemented for `str`
   = note: required for `&str` to implement `PartialOrd<&std::string::String>`
help: consider dereferencing both sides of the expression
   |
72 -             let cache_key = if node_id < &candidate_id {
72 +             let cache_key = if *node_id < *candidate_id {
   |

error[E0599]: no method named `add_entanglement` found for struct `tokio::sync::RwLockWriteGuard<'_, quantum::entanglement::EntanglementGraph>` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:94:38
   |
94 |             match entanglement_graph.add_entanglement(
   |                   -------------------^^^^^^^^^^^^^^^^
   |
help: there is a method `create_entanglement` with a similar name
   |
94 -             match entanglement_graph.add_entanglement(
94 +             match entanglement_graph.create_entanglement(
   |

error[E0609]: no field `entanglements_created` on type `quantum_mcts::entanglement::metrics::EntanglementMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:102:34
    |
102 |                     self.metrics.entanglements_created += 1;
    |                                  ^^^^^^^^^^^^^^^^^^^^^ unknown field

error[E0609]: no field `entanglement_failures` on type `quantum_mcts::entanglement::metrics::EntanglementMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:109:34
    |
109 |                     self.metrics.entanglement_failures += 1;
    |                                  ^^^^^^^^^^^^^^^^^^^^^ unknown field

error[E0609]: no field `entanglement_operations` on type `quantum_mcts::entanglement::metrics::EntanglementMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:114:22
    |
114 |         self.metrics.entanglement_operations += 1;
    |                      ^^^^^^^^^^^^^^^^^^^^^^^ unknown field

error[E0599]: no method named `remove_entanglement` found for struct `tokio::sync::RwLockWriteGuard<'_, quantum::entanglement::EntanglementGraph>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:298:34
    |
298 |         match entanglement_graph.remove_entanglement(node1_id, node2_id) {
    |                                  ^^^^^^^^^^^^^^^^^^^
    |
help: there is a method `create_entanglement` with a similar name, but with different arguments
   --> packages/sweetmcp-memory/src/cognitive/quantum/entanglement.rs:176:5
    |
176 | /     pub fn create_entanglement(
177 | |         &mut self,
178 | |         source_id: &str,
179 | |         target_id: &str,
180 | |         entanglement_type: EntanglementType,
181 | |         bond_strength: f64,
182 | |     ) -> CognitiveResult<()> {
    | |____________________________^

error[E0609]: no field `entanglements_removed` on type `quantum_mcts::entanglement::metrics::EntanglementMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:301:34
    |
301 |                     self.metrics.entanglements_removed += 1;
    |                                  ^^^^^^^^^^^^^^^^^^^^^ unknown field

error[E0599]: no variant or associated item named `QuantumError` found for enum `cognitive::types::CognitiveError` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:308:37
    |
308 |                 Err(CognitiveError::QuantumError(format!("Entanglement removal failed: {}", e)))
    |                                     ^^^^^^^^^^^^ variant or associated item not found in `cognitive::types::CognitiveError`
    |
   ::: packages/sweetmcp-memory/src/cognitive/types.rs:233:1
    |
233 | pub enum CognitiveError {
    | ----------------------- variant or associated item `QuantumError` not found for this enum

error[E0599]: no method named `get_entangled` found for struct `tokio::sync::RwLockReadGuard<'_, quantum::entanglement::EntanglementGraph>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:320:28
    |
320 |         entanglement_graph.get_entangled(node_id)
    |                            ^^^^^^^^^^^^^ method not found in `tokio::sync::RwLockReadGuard<'_, quantum::entanglement::EntanglementGraph>`

error[E0599]: no variant or associated item named `QuantumError` found for enum `cognitive::types::CognitiveError` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:321:42
    |
321 |             .map_err(|e| CognitiveError::QuantumError(format!("Failed to get entangled nodes: {}", e)))
    |                                          ^^^^^^^^^^^^ variant or associated item not found in `cognitive::types::CognitiveError`
    |
   ::: packages/sweetmcp-memory/src/cognitive/types.rs:233:1
    |
233 | pub enum CognitiveError {
    | ----------------------- variant or associated item `QuantumError` not found for this enum

error[E0599]: no method named `dimension` found for reference `&SuperpositionState` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/core.rs:168:26
    |
168 |         if superposition.dimension() == 1 {
    |                          ^^^^^^^^^ method not found in `&SuperpositionState`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `EmbeddingModel` defines an item `dimension`, perhaps you need to implement it
   --> packages/sweetmcp-memory/src/vector/embedding_model.rs:10:1
    |
10  | pub trait EmbeddingModel: Send + Sync {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `measure` found for reference `&SuperpositionState` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/core.rs:174:43
    |
174 |         let probabilities = superposition.measure(&measurement)
    |                                           ^^^^^^^ method not found in `&SuperpositionState`

error[E0599]: no variant or associated item named `QuantumError` found for enum `cognitive::types::CognitiveError` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/core.rs:175:42
    |
175 |             .map_err(|e| CognitiveError::QuantumError(format!("Measurement failed: {}", e)))?;
    |                                          ^^^^^^^^^^^^ variant or associated item not found in `cognitive::types::CognitiveError`
    |
   ::: packages/sweetmcp-memory/src/cognitive/types.rs:233:1
    |
233 | pub enum CognitiveError {
    | ----------------------- variant or associated item `QuantumError` not found for this enum

warning: use of deprecated method `rand::Rng::gen_range`: Renamed to `random_range`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/core.rs:180:29
    |
180 |         let selection = rng.gen_range(0.0..1.0);
    |                             ^^^^^^^^^

error[E0599]: no method named `compute` found for struct `std::sync::Arc<PhaseEvolution>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/core.rs:205:48
    |
205 |         let phase_delta = self.phase_evolution.compute(0.1);
    |                                                ^^^^^^^ method not found in `std::sync::Arc<PhaseEvolution>`

error[E0599]: no variant or associated item named `QuantumError` found for enum `cognitive::types::CognitiveError` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/core.rs:207:42
    |
207 |             .map_err(|e| CognitiveError::QuantumError(format!("Superposition evolution failed: {}", e)))?;
    |                                          ^^^^^^^^^^^^ variant or associated item not found in `cognitive::types::CognitiveError`
    |
   ::: packages/sweetmcp-memory/src/cognitive/types.rs:233:1
    |
233 | pub enum CognitiveError {
    | ----------------------- variant or associated item `QuantumError` not found for this enum

error[E0599]: no method named `evaluate_state` found for struct `std::sync::Arc<Committee>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/evaluation.rs:177:46
    |
177 |         let committee_score = self.committee.evaluate_state(&quantum_state.classical_state).await
    |                                              ^^^^^^^^^^^^^^ method not found in `std::sync::Arc<Committee>`

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/pruning.rs:168:42
    |
168 |         self.stats.memory_saved_bytes += estimated_memory_saved;
    |                                          ^^^^^^^^^^^^^^^^^^^^^^ expected `u64`, found `usize`

error[E0277]: cannot add-assign `usize` to `u64`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/pruning.rs:168:39
    |
168 |         self.stats.memory_saved_bytes += estimated_memory_saved;
    |                                       ^^ no implementation for `u64 += usize`
    |
    = help: the trait `AddAssign<usize>` is not implemented for `u64`
    = help: the following other types implement trait `AddAssign<Rhs>`:
              `u64` implements `AddAssign<&u64>`
              `u64` implements `AddAssign<zerocopy::byteorder::U64<O>>`
              `u64` implements `AddAssign`

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/pruning.rs:177:33
    |
177 |             memory_saved_bytes: estimated_memory_saved,
    |                                 ^^^^^^^^^^^^^^^^^^^^^^ expected `u64`, found `usize`

warning: value assigned to `candidates` is never read
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/pruning.rs:189:17
    |
189 |         let mut candidates = Vec::new();
    |                 ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?
    = note: `#[warn(unused_assignments)]` on by default

error[E0609]: no field `parent_id` on type `quantum_mcts::node_state::node::QuantumMCTSNode`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/pruning.rs:341:48
    |
341 |                 if let Some(parent_id) = &node.parent_id {
    |                                                ^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
341 -                 if let Some(parent_id) = &node.parent_id {
341 +                 if let Some(parent_id) = &node.parent {
    |

error[E0599]: no variant or associated item named `ResourceError` found for enum `cognitive::types::CognitiveError` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/tree_expansion.rs:86:42
    |
86  |             .map_err(|e| CognitiveError::ResourceError(format!("Failed to acquire expansion permit: {}", e)))?;
    |                                          ^^^^^^^^^^^^^ variant or associated item not found in `cognitive::types::CognitiveError`
    |
   ::: packages/sweetmcp-memory/src/cognitive/types.rs:233:1
    |
233 | pub enum CognitiveError {
    | ----------------------- variant or associated item `ResourceError` not found for this enum

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/tree_expansion.rs:129:72
    |
129 |         let child_amplitude = self.calculate_child_amplitude_optimized(&parent_amplitude, &action);
    |                                    ----------------------------------- ^^^^^^^^^^^^^^^^^ expected `Complex64`, found `&Complex64`
    |                                    |
    |                                    arguments to this method are incorrect
    |
note: method defined here
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/tree_expansion.rs:231:8
    |
231 |     fn calculate_child_amplitude_optimized(&self, parent_amplitude: Complex64, action: &str) -> Complex64 {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        ---------------------------
help: consider removing the borrow
    |
129 -         let child_amplitude = self.calculate_child_amplitude_optimized(&parent_amplitude, &action);
129 +         let child_amplitude = self.calculate_child_amplitude_optimized(parent_amplitude, &action);
    |

error[E0599]: no method named `dimension` found for reference `&SuperpositionState` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/tree_expansion.rs:182:26
    |
182 |         if superposition.dimension() == 1 {
    |                          ^^^^^^^^^ method not found in `&SuperpositionState`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `EmbeddingModel` defines an item `dimension`, perhaps you need to implement it
   --> packages/sweetmcp-memory/src/vector/embedding_model.rs:10:1
    |
10  | pub trait EmbeddingModel: Send + Sync {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `measure` found for reference `&SuperpositionState` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/tree_expansion.rs:188:43
    |
188 |         let probabilities = superposition.measure(&measurement)
    |                                           ^^^^^^^ method not found in `&SuperpositionState`

error[E0599]: no variant or associated item named `QuantumError` found for enum `cognitive::types::CognitiveError` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/tree_expansion.rs:189:42
    |
189 |             .map_err(|e| CognitiveError::QuantumError(format!("Measurement failed: {}", e)))?;
    |                                          ^^^^^^^^^^^^ variant or associated item not found in `cognitive::types::CognitiveError`
    |
   ::: packages/sweetmcp-memory/src/cognitive/types.rs:233:1
    |
233 | pub enum CognitiveError {
    | ----------------------- variant or associated item `QuantumError` not found for this enum

warning: use of deprecated method `rand::Rng::gen_range`: Renamed to `random_range`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/tree_expansion.rs:193:29
    |
193 |         let selection = rng.gen_range(0.0..1.0);
    |                             ^^^^^^^^^

error[E0560]: struct `quantum_mcts::node_state::core::QuantumNodeState` has no field named `entanglement_map`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/tree_expansion.rs:226:13
    |
226 |             entanglement_map: parent_state.entanglement_map.clone(), // Simplified - would need proper entanglement evolution
    |             ^^^^^^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
226 -             entanglement_map: parent_state.entanglement_map.clone(), // Simplified - would need proper entanglement evolution
226 +             entanglements: parent_state.entanglement_map.clone(), // Simplified - would need proper entanglement evolution
    |

error[E0609]: no field `entanglement_map` on type `&quantum_mcts::node_state::core::QuantumNodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/tree_expansion.rs:226:44
    |
226 |             entanglement_map: parent_state.entanglement_map.clone(), // Simplified - would need proper entanglement evolution
    |                                            ^^^^^^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
226 -             entanglement_map: parent_state.entanglement_map.clone(), // Simplified - would need proper entanglement evolution
226 +             entanglement_map: parent_state.entanglements.clone(), // Simplified - would need proper entanglement evolution
    |

error[E0609]: no field `complexity_score` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/tree_expansion.rs:296:35
    |
296 |                         new_state.complexity_score *= 0.9; // Slight improvement
    |                                   ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0615]: attempted to take value of method `performance_score` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/tree_expansion.rs:299:35
    |
299 |                         new_state.performance_score *= 1.1; // Performance boost
    |                                   ^^^^^^^^^^^^^^^^^ method, not a field
    |
    = help: methods are immutable and cannot be assigned to

error[E0609]: no field `reliability_score` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/tree_expansion.rs:302:35
    |
302 |                         new_state.reliability_score *= 1.05; // Reliability improvement
    |                                   ^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0599]: no method named `expand_basis` found for reference `&SuperpositionState` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/tree_expansion.rs:322:31
    |
322 |                 superposition.expand_basis(*basis_states)
    |                               ^^^^^^^^^^^^ method not found in `&SuperpositionState`

error[E0599]: no variant or associated item named `QuantumError` found for enum `cognitive::types::CognitiveError` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/tree_expansion.rs:323:50
    |
323 |                     .map_err(|e| CognitiveError::QuantumError(format!("Superposition expansion failed: {}", e)))
    |                                                  ^^^^^^^^^^^^ variant or associated item not found in `cognitive::types::CognitiveError`
    |
   ::: packages/sweetmcp-memory/src/cognitive/types.rs:233:1
    |
233 | pub enum CognitiveError {
    | ----------------------- variant or associated item `QuantumError` not found for this enum

error[E0599]: no method named `collapse_to_classical` found for reference `&SuperpositionState` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/tree_expansion.rs:331:31
    |
331 |                 superposition.collapse_to_classical()
    |                               ^^^^^^^^^^^^^^^^^^^^^ method not found in `&SuperpositionState`

error[E0599]: no variant or associated item named `QuantumError` found for enum `cognitive::types::CognitiveError` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/tree_expansion.rs:332:50
    |
332 |                     .map_err(|e| CognitiveError::QuantumError(format!("Measurement collapse failed: {}", e)))
    |                                                  ^^^^^^^^^^^^ variant or associated item not found in `cognitive::types::CognitiveError`
    |
   ::: packages/sweetmcp-memory/src/cognitive/types.rs:233:1
    |
233 | pub enum CognitiveError {
    | ----------------------- variant or associated item `QuantumError` not found for this enum

error[E0599]: no variant or associated item named `ResourceError` found for enum `cognitive::types::CognitiveError` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/mod.rs:208:42
    |
208 |             .map_err(|e| CognitiveError::ResourceError(format!("Failed to acquire expansion permit: {}", e)))?;
    |                                          ^^^^^^^^^^^^^ variant or associated item not found in `cognitive::types::CognitiveError`
    |
   ::: packages/sweetmcp-memory/src/cognitive/types.rs:233:1
    |
233 | pub enum CognitiveError {
    | ----------------------- variant or associated item `ResourceError` not found for this enum

error[E0609]: no field `parallel_expansion_limit` on type `quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/mod.rs:309:42
    |
309 |         let max_concurrent = self.config.parallel_expansion_limit.unwrap_or(4);
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0271]: expected `JoinHandle<Result<SimulationResult, CognitiveError>>` to be a future that resolves to `Result<SimulationResult, _>`, but it resolves to `Result<Result<SimulationResult, CognitiveError>, JoinError>`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/improvement/parallel_execution.rs:110:28
    |
110 |             join_set.spawn(simulation_task);
    |                      ----- ^^^^^^^^^^^^^^^ expected `Result<SimulationResult, _>`, found `Result<Result<..., ...>, ...>`
    |                      |
    |                      required by a bound introduced by this call
    |
    = note: expected enum `std::result::Result<improvement::metrics::SimulationResult, _>`
               found enum `std::result::Result<std::result::Result<improvement::metrics::SimulationResult, cognitive::types::CognitiveError>, JoinError>`
note: required by a bound in `JoinSet::<T>::spawn`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.46.1/src/task/join_set.rs:134:19
    |
132 |     pub fn spawn<F>(&mut self, task: F) -> AbortHandle
    |            ----- required by a bound in this associated function
133 |     where
134 |         F: Future<Output = T>,
    |                   ^^^^^^^^^^ required by this bound in `JoinSet::<T>::spawn`

error[E0599]: no method named `clone` found for struct `QuantumSelector` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/improvement/parallel_execution.rs:161:38
    |
161 |         let selector = self.selector.clone();
    |                                      ^^^^^ method not found in `QuantumSelector`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/selection/core.rs:17:1
    |
17  | pub struct QuantumSelector {
    | -------------------------- method `clone` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `clone`, perhaps you need to implement it:
            candidate #1: `Clone`

error[E0599]: no method named `clone` found for struct `quantum_expander::QuantumExpander` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/improvement/parallel_execution.rs:162:38
    |
162 |         let expander = self.expander.clone(); 
    |                                      ^^^^^ method not found in `quantum_expander::QuantumExpander`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/quantum_expander.rs:18:1
    |
18  | pub struct QuantumExpander {
    | -------------------------- method `clone` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `clone`, perhaps you need to implement it:
            candidate #1: `Clone`

error[E0599]: no method named `clone` found for struct `QuantumBackpropagator` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/improvement/parallel_execution.rs:163:50
    |
163 |         let backpropagator = self.backpropagator.clone();
    |                                                  ^^^^^ method not found in `QuantumBackpropagator`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/core.rs:25:1
    |
25  | pub struct QuantumBackpropagator {
    | -------------------------------- method `clone` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `clone`, perhaps you need to implement it:
            candidate #1: `Clone`

error[E0599]: the method `clone` exists for struct `RwLockReadGuard<'_, HashMap<String, QuantumMCTSNode>>`, but its trait bounds were not satisfied
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/improvement/parallel_execution.rs:170:23
    |
170 |             tree_read.clone()
    |                       ^^^^^ method cannot be called due to unsatisfied trait bounds
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/node_state/node.rs:13:1
    |
13  | pub struct QuantumMCTSNode {
    | -------------------------- doesn't satisfy `_: Clone`
    |
   ::: /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:242:1
    |
242 | pub struct HashMap<K, V, S = RandomState> {
    | ----------------------------------------- doesn't satisfy `_: Clone`
    |
    = note: the following trait bounds were not satisfied:
            `quantum_mcts::node_state::node::QuantumMCTSNode: Clone`
            which is required by `std::collections::HashMap<std::string::String, quantum_mcts::node_state::node::QuantumMCTSNode>: Clone`
help: consider annotating `quantum_mcts::node_state::node::QuantumMCTSNode` with `#[derive(Clone)]`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/node_state/node.rs:13:1
    |
13  + #[derive(Clone)]
14  | pub struct QuantumMCTSNode {
    |

error[E0599]: no method named `simulate_quantum_reward` found for struct `std::sync::Arc<cognitive::performance::PerformanceAnalyzer>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/improvement/parallel_execution.rs:182:58
    |
182 |             let simulation_reward = performance_analyzer.simulate_quantum_reward(&expanded_node).await?;
    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^ method not found in `std::sync::Arc<cognitive::performance::PerformanceAnalyzer>`

error[E0599]: no method named `backpropagate_quantum_reward` found for struct `QuantumBackpropagator` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/improvement/parallel_execution.rs:203:29
    |
203 |         self.backpropagator.backpropagate_quantum_reward(
    |         --------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/core.rs:25:1
    |
25  | pub struct QuantumBackpropagator {
    | -------------------------------- method `backpropagate_quantum_reward` not found for this struct
    |
help: there is a method `aggregate_quantum_rewards` with a similar name, but with different arguments
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/core.rs:340:5
    |
340 | /     pub async fn aggregate_quantum_rewards(
341 | |         &self,
342 | |         tree: &RwLock<HashMap<String, QuantumMCTSNode>>,
343 | |         node_ids: &[String],
344 | |     ) -> Result<Complex64, CognitiveError> {
    | |__________________________________________^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/improvement/amplification.rs:65:42
    |
65  |                     child.quantum_reward.norm() / child.visits as f64
    |                                          ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0368]: binary assignment operation `*=` cannot be applied to type `Complex64`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/improvement/amplification.rs:92:21
    |
92  |                     child.amplitude *= Complex64::new(amplification_factor, 0.0);
    |                     ---------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |                     |
    |                     cannot use `*=` on type `Complex64`
    |
note: an implementation of `MulAssign` might be missing for `Complex64`
   --> packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | ^^^^^^^^^^^^^^^^^^^^ must implement `MulAssign`
note: the trait `MulAssign` must be implemented
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/ops/arith.rs:880:1
    |
880 | pub trait MulAssign<Rhs = Self> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/improvement/amplitude_amplifier.rs:93:61
    |
93  |                     let original_amplitude = node.amplitude.norm();
    |                                                             ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0368]: binary assignment operation `*=` cannot be applied to type `Complex64`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/improvement/amplitude_amplifier.rs:96:21
    |
96  |                     node.amplitude *= Complex64::new(amplification_factor, 0.0);
    |                     --------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |                     |
    |                     cannot use `*=` on type `Complex64`
    |
note: an implementation of `MulAssign` might be missing for `Complex64`
   --> packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | ^^^^^^^^^^^^^^^^^^^^ must implement `MulAssign`
note: the trait `MulAssign` must be implemented
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/ops/arith.rs:880:1
    |
880 | pub trait MulAssign<Rhs = Self> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/improvement/amplitude_amplifier.rs:98:56
    |
98  |                     let new_amplitude = node.amplitude.norm();
    |                                                        ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/quantum_state.rs:59:43
    |
59  |                 let amp = child.amplitude.norm();
    |                                           ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0689]: can't call method `max` on ambiguous numeric type `{float}`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/quantum_state.rs:60:47
   |
60 |                 max_amplitude = max_amplitude.max(amp);
   |                                               ^^^
   |
help: you must specify a type for this binding, like `f32`
   |
54 |         let mut max_amplitude: f32 = 0.0;
   |                              +++++

error[E0689]: can't call method `max` on ambiguous numeric type `{float}`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/quantum_state.rs:66:61
   |
66 |         let concentration = max_amplitude / total_amplitude.max(1e-10);
   |                                                             ^^^
   |
help: you must specify a type for this binding, like `f32`
   |
55 |         let mut total_amplitude: f32 = 0.0;
   |                                +++++

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/quantum_state.rs:91:54
    |
91  |                     let score = child.quantum_reward.norm() / child.visits as f64;
    |                                                      ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0282]: type annotations needed for `&(_, _)`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/quantum_state.rs:97:22
   |
97 |             .max_by(|(_, a), (_, b)| a.partial_cmp(b).unwrap())
   |                      ^^^^^^            ----------- type must be known at this point
   |
help: consider giving this closure parameter an explicit type, where the placeholders `_` are specified
   |
97 |             .max_by(|(_, a): &(_, _), (_, b)| a.partial_cmp(b).unwrap())
   |                            +++++++++

error[E0599]: no method named `num_entanglements` found for struct `tokio::sync::RwLockReadGuard<'_, quantum::entanglement::EntanglementGraph>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/quantum_state.rs:109:54
    |
109 |         let total_entanglements = entanglement_graph.num_entanglements();
    |                                                      ^^^^^^^^^^^^^^^^^ method not found in `tokio::sync::RwLockReadGuard<'_, quantum::entanglement::EntanglementGraph>`

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/quantum_state.rs:119:34
    |
119 |             .map(|n| n.amplitude.norm())
    |                                  ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `clone` found for struct `tokio::sync::RwLockReadGuard<'_, QuantumMetrics>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/quantum_state.rs:129:38
    |
129 |             quantum_metrics: metrics.clone(),
    |                                      ^^^^^ method not found in `tokio::sync::RwLockReadGuard<'_, QuantumMetrics>`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `clone`, perhaps you need to implement it:
            candidate #1: `Clone`

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/selection/core.rs:101:61
    |
101 |                     let exploitation = child.quantum_reward.norm() / child.visits as f64;
    |                                                             ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

warning: use of deprecated method `rand::Rng::gen_range`: Renamed to `random_range`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/selection/scoring.rs:83:29
   |
83 |             let index = rng.gen_range(0..ids.len());
   |                             ^^^^^^^^^

warning: use of deprecated method `rand::Rng::gen_range`: Renamed to `random_range`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/selection/scoring.rs:95:31
   |
95 |         let measurement = rng.gen_range(0.0..1.0);
   |                               ^^^^^^^^^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/selection/scoring.rs:130:57
    |
130 |                 let exploitation = child.quantum_reward.norm() / child.visits as f64;
    |                                                         ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/selection/scoring.rs:135:55
    |
135 |                 let amplitude_bonus = child.amplitude.norm() * (1.0 - child.quantum_state.decoherence);
    |                                                       ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/selection/scoring.rs:202:58
    |
202 |                 let exploitation = (child.quantum_reward.norm() / child.visits as f64) * exploitation_weight;
    |                                                          ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/selection/scoring.rs:204:54
    |
204 |                 let quantum_bonus = (child.amplitude.norm() * (1.0 - child.quantum_state.decoherence)) * quantum_weight;
    |                                                      ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0609]: no field `depth` on type `&quantum_mcts::node_state::node::QuantumMCTSNode`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/calculation_engine.rs:38:30
   |
38 |             let depth = node.depth;
   |                              ^^^^^ unknown field
   |
   = note: available fields are: `id`, `visits`, `amplitude`, `quantum_reward`, `children` ... and 6 others

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/calculation_engine.rs:99:41
    |
99  |             let magnitude = node_reward.norm();
    |                                         ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0609]: no field `re` on type `Complex64`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/calculation_engine.rs:102:28
    |
102 |             if node_reward.re > 0.0 {
    |                            ^^ unknown field
    |
    = note: available fields are: `real`, `imaginary`

error[E0609]: no field `re` on type `Complex64`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/calculation_engine.rs:104:35
    |
104 |             } else if node_reward.re < 0.0 {
    |                                   ^^ unknown field
    |
    = note: available fields are: `real`, `imaginary`

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/calculation_engine.rs:114:40
    |
114 |         let avg_magnitude = avg_reward.norm();
    |                                        ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0061]: this function takes 4 arguments but 5 arguments were supplied
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/calculation_engine.rs:135:23
    |
135 |             return Ok(ConvergenceMetrics::new(0.0, 0.0, 0.0, 0.0, 0.0));
    |                       ^^^^^^^^^^^^^^^^^^^^^^^ ---            ---  --- unexpected argument #5 of type `{float}`
    |                                               |              |
    |                                               |              expected `bool`, found floating-point number
    |                                               expected `u32`, found floating-point number
    |
note: associated function defined here
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/metrics.rs:24:12
    |
24  |     pub fn new(iterations: u32, rate: f64, stability: f64, converged: bool) -> Self {
    |            ^^^ ---------------                             ---------------
help: remove the extra argument
    |
135 -             return Ok(ConvergenceMetrics::new(0.0, 0.0, 0.0, 0.0, 0.0));
135 +             return Ok(ConvergenceMetrics::new(/* u32 */, 0.0, 0.0, /* bool */));
    |

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/calculation_engine.rs:145:38
    |
145 |             let amp = node.amplitude.norm();
    |                                      ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0689]: can't call method `max` on ambiguous numeric type `{float}`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/calculation_engine.rs:147:43
    |
147 |             max_amplitude = max_amplitude.max(amp);
    |                                           ^^^
    |
help: you must specify a type for this binding, like `f32`
    |
140 |         let mut max_amplitude: f32 = 0.0;
    |                              +++++

error[E0061]: this function takes 4 arguments but 5 arguments were supplied
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/calculation_engine.rs:177:12
    |
177 |         Ok(ConvergenceMetrics::new(
    |            ^^^^^^^^^^^^^^^^^^^^^^^
178 |             amplitude_concentration,
    |             ----------------------- expected `u32`, found `f64`
...
181 |             entropy,
    |             ------- expected `bool`, found `f64`
182 |             overall_convergence.min(1.0),
    |             ---------------------------- unexpected argument #5 of type `f64`
    |
note: associated function defined here
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/metrics.rs:24:12
    |
24  |     pub fn new(iterations: u32, rate: f64, stability: f64, converged: bool) -> Self {
    |            ^^^ ---------------                             ---------------
help: remove the extra argument
    |
178 ~             /* u32 */,
179 |             visit_concentration,
180 |             reward_stability,
181 ~             /* bool */,
    |

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/calculation_engine.rs:250:37
    |
250 |                 node.quantum_reward.norm() / node.visits as f64
    |                                     ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/calculation_engine.rs:252:37
    |
252 |                 node.quantum_reward.norm()
    |                                     ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `entanglement_count` found for struct `tokio::sync::RwLockReadGuard<'_, quantum::entanglement::EntanglementGraph>` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/collector.rs:72:53
   |
72 |         let total_entanglements = entanglement_read.entanglement_count();
   |                                                     ^^^^^^^^^^^^^^^^^^ method not found in `tokio::sync::RwLockReadGuard<'_, quantum::entanglement::EntanglementGraph>`

error[E0599]: no method named `clone` found for struct `tokio::sync::RwLockReadGuard<'_, QuantumMetrics>` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/collector.rs:97:26
   |
97 |             metrics_read.clone(),
   |                          ^^^^^ method not found in `tokio::sync::RwLockReadGuard<'_, QuantumMetrics>`
   |
   = help: items from traits can only be used if the trait is implemented and in scope
   = note: the following trait defines an item `clone`, perhaps you need to implement it:
           candidate #1: `Clone`

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/collector.rs:101:13
    |
91  |         Ok(QuantumTreeStatistics::new(
    |            -------------------------- arguments to this function are incorrect
...
101 |             performance_metrics,
    |             ^^^^^^^^^^^^^^^^^^^ expected `PerformanceMetrics`, found a different `PerformanceMetrics`
    |
    = note: `PerformanceMetrics` and `PerformanceMetrics` have similar names, but are actually distinct types
note: `PerformanceMetrics` is defined in module `crate::cognitive::quantum_mcts::statistics::performance` of the current crate
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/performance.rs:11:1
    |
11  | pub struct PerformanceMetrics {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: `PerformanceMetrics` is defined in module `crate::cognitive::quantum_mcts::statistics::metrics` of the current crate
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/metrics.rs:36:1
    |
36  | pub struct PerformanceMetrics {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: associated function defined here
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/types.rs:39:12
    |
39  |     pub fn new(
    |            ^^^
...
49  |         performance_metrics: PerformanceMetrics,
    |         ---------------------------------------

error[E0382]: borrow of moved value: `statistics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/collector.rs:155:57
    |
153 |         let statistics = self.collect_statistics(tree, entanglement_graph, quantum_metrics).await?;
    |             ---------- move occurs because `statistics` has type `quantum_mcts::statistics::types::QuantumTreeStatistics`, which does not implement the `Copy` trait
154 |         self.atomic_ops.take_snapshot(statistics).await?;
    |                                       ---------- value moved here
155 |         debug!("Statistics snapshot taken at {} nodes", statistics.total_nodes);
    |                                                         ^^^^^^^^^^^^^^^^^^^^^^ value borrowed here after move
    |
note: consider changing this parameter type in method `take_snapshot` to borrow instead if owning the value isn't necessary
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/atomic_operations.rs:55:21
    |
53  |     pub async fn take_snapshot(
    |                  ------------- in this method
54  |         &self,
55  |         statistics: QuantumTreeStatistics,
    |                     ^^^^^^^^^^^^^^^^^^^^^ this parameter takes ownership of the value
    = note: this error originates in the macro `$crate::__macro_support::format_args` which comes from the expansion of the macro `debug` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/coordinator.rs:79:33
   |
79 |             .collect_statistics(tree, entanglement_graph, quantum_metrics)
   |              ------------------ ^^^^ expected `QuantumMCTSNode`, found a different `QuantumMCTSNode`
   |              |
   |              arguments to this method are incorrect
   |
   = note: `QuantumMCTSNode` and `QuantumMCTSNode` have similar names, but are actually distinct types
note: `QuantumMCTSNode` is defined in module `crate::cognitive::quantum_mcts::statistics::node_state` of the current crate
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/node_state.rs:12:1
   |
12 | pub struct QuantumMCTSNode {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^
note: `QuantumMCTSNode` is defined in module `crate::cognitive::quantum_mcts::node_state::node` of the current crate
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/node_state/node.rs:13:1
   |
13 | pub struct QuantumMCTSNode {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^
note: method defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/collector.rs:59:18
   |
59 |     pub async fn collect_statistics(
   |                  ^^^^^^^^^^^^^^^^^^
60 |         &self,
61 |         tree: &RwLock<HashMap<String, QuantumMCTSNode>>,
   |         -----------------------------------------------

error[E0609]: no field `overall_convergence` on type `ConvergenceMetrics`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/coordinator.rs:86:44
   |
86 |             statistics.convergence_metrics.overall_convergence
   |                                            ^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `iterations_to_convergence`, `convergence_rate`, `stability_score`, `converged`

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/coordinator.rs:102:28
    |
102 |             .take_snapshot(tree, entanglement_graph, quantum_metrics)
    |              ------------- ^^^^ expected `QuantumMCTSNode`, found a different `QuantumMCTSNode`
    |              |
    |              arguments to this method are incorrect
    |
    = note: `QuantumMCTSNode` and `QuantumMCTSNode` have similar names, but are actually distinct types
note: `QuantumMCTSNode` is defined in module `crate::cognitive::quantum_mcts::statistics::node_state` of the current crate
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/node_state.rs:12:1
    |
12  | pub struct QuantumMCTSNode {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^
note: `QuantumMCTSNode` is defined in module `crate::cognitive::quantum_mcts::node_state::node` of the current crate
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/node_state/node.rs:13:1
    |
13  | pub struct QuantumMCTSNode {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^
note: method defined here
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/collector.rs:147:18
    |
147 |     pub async fn take_snapshot(
    |                  ^^^^^^^^^^^^^
148 |         &self,
149 |         tree: &RwLock<HashMap<String, QuantumMCTSNode>>,
    |         -----------------------------------------------

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/coordinator.rs:106:33
    |
106 |             .collect_statistics(tree, entanglement_graph, quantum_metrics)
    |              ------------------ ^^^^ expected `QuantumMCTSNode`, found a different `QuantumMCTSNode`
    |              |
    |              arguments to this method are incorrect
    |
    = note: `QuantumMCTSNode` and `QuantumMCTSNode` have similar names, but are actually distinct types
note: `QuantumMCTSNode` is defined in module `crate::cognitive::quantum_mcts::statistics::node_state` of the current crate
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/node_state.rs:12:1
    |
12  | pub struct QuantumMCTSNode {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^
note: `QuantumMCTSNode` is defined in module `crate::cognitive::quantum_mcts::node_state::node` of the current crate
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/node_state/node.rs:13:1
    |
13  | pub struct QuantumMCTSNode {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^
note: method defined here
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/collector.rs:59:18
    |
59  |     pub async fn collect_statistics(
    |                  ^^^^^^^^^^^^^^^^^^
60  |         &self,
61  |         tree: &RwLock<HashMap<String, QuantumMCTSNode>>,
    |         -----------------------------------------------

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/coordinator.rs:126:47
    |
126 |             PerformanceTrends::from_snapshots(&history)
    |             --------------------------------- ^^^^^^^^ expected `&[StatisticsSnapshot]`, found `&Vec<StatisticsSnapshot>`
    |             |
    |             arguments to this function are incorrect
    |
    = note: expected reference `&[snapshot_comparison::StatisticsSnapshot]`
               found reference `&Vec<quantum_mcts::statistics::types::StatisticsSnapshot>`
note: associated function defined here
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/performance_trends.rs:32:12
    |
32  |     pub fn from_snapshots(snapshots: &[StatisticsSnapshot]) -> Self {
    |            ^^^^^^^^^^^^^^ --------------------------------

error[E0599]: no method named `operation_ratios` found for struct `counter_snapshot::CounterSnapshot` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/coordinator.rs:155:49
    |
155 |         let operation_ratios = counter_snapshot.operation_ratios();
    |                                                 ^^^^^^^^^^^^^^^^ method not found in `counter_snapshot::CounterSnapshot`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/counter_snapshot.rs:8:1
    |
8   | pub struct CounterSnapshot {
    | -------------------------- method `operation_ratios` not found for this struct

error[E0599]: no method named `identify_bottlenecks` found for struct `quantum_mcts::statistics::metrics::PerformanceMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/coordinator.rs:156:65
    |
156 |         let bottlenecks = latest_statistics.performance_metrics.identify_bottlenecks();
    |                                                                 ^^^^^^^^^^^^^^^^^^^^ method not found in `quantum_mcts::statistics::metrics::PerformanceMetrics`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/metrics.rs:36:1
    |
36  | pub struct PerformanceMetrics {
    | ----------------------------- method `identify_bottlenecks` not found for this struct

error[E0599]: no method named `performance_grade` found for reference `&quantum_mcts::statistics::types::QuantumTreeStatistics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/coordinator.rs:160:46
    |
160 |             overall_grade: latest_statistics.performance_grade(),
    |                                              ^^^^^^^^^^^^^^^^^ method not found in `&quantum_mcts::statistics::types::QuantumTreeStatistics`

error[E0599]: no method named `tree_health_score` found for reference `&quantum_mcts::statistics::types::QuantumTreeStatistics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/coordinator.rs:161:50
    |
161 |             tree_health_score: latest_statistics.tree_health_score(),
    |                                                  ^^^^^^^^^^^^^^^^^
    |
help: there is a method `health_score` with a similar name
    |
161 -             tree_health_score: latest_statistics.tree_health_score(),
161 +             tree_health_score: latest_statistics.health_score(),
    |

error[E0599]: no method named `convergence_health` found for struct `ConvergenceMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/coordinator.rs:162:71
    |
162 |             convergence_health: latest_statistics.convergence_metrics.convergence_health(),
    |                                                                       ^^^^^^^^^^^^^^^^^^ method not found in `ConvergenceMetrics`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/metrics.rs:11:1
    |
11  | pub struct ConvergenceMetrics {
    | ----------------------------- method `convergence_health` not found for this struct

error[E0599]: no method named `performance_trend` found for struct `quantum_mcts::statistics::metrics::PerformanceMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/coordinator.rs:163:70
    |
163 |             performance_trend: latest_statistics.performance_metrics.performance_trend(),
    |                                                                      ^^^^^^^^^^^^^^^^^ method not found in `quantum_mcts::statistics::metrics::PerformanceMetrics`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/metrics.rs:36:1
    |
36  | pub struct PerformanceMetrics {
    | ----------------------------- method `performance_trend` not found for this struct

error[E0609]: no field `history` on type `QuantumStatisticsCollector`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/coordinator.rs:244:42
    |
244 |         let mut history = self.collector.history.write().await;
    |                                          ^^^^^^^ unknown field

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/tree_operations.rs:61:57
    |
61  |                 let exploitation = child.quantum_reward.norm() / child.visits as f64;
    |                                                         ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/tree_operations.rs:65:37
    |
65  |                     child.amplitude.norm() * (1.0 - child.quantum_state.decoherence);
    |                                     ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

warning: use of deprecated method `rand::Rng::gen_range`: Renamed to `random_range`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/tree_operations.rs:95:31
   |
95 |         let measurement = rng.gen_range(0.0..1.0);
   |                               ^^^^^^^^^

error[E0599]: no method named `measure` found for reference `&SuperpositionState` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/tree_operations.rs:169:43
    |
169 |         let probabilities = superposition.measure(&measurement)?;
    |                                           ^^^^^^^ method not found in `&SuperpositionState`

warning: use of deprecated method `rand::Rng::gen_range`: Renamed to `random_range`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/tree_operations.rs:173:29
    |
173 |         let selection = rng.gen_range(0.0..1.0);
    |                             ^^^^^^^^^

error[E0599]: no method named `evolve` found for struct `SuperpositionState` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/tree_operations.rs:205:27
    |
205 |         new_superposition.evolve(self.phase_evolution.compute(0.1))?;
    |                           ^^^^^^ method not found in `SuperpositionState`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/state.rs:10:1
    |
10  | pub struct SuperpositionState {
    | ----------------------------- method `evolve` not found for this struct

error[E0599]: no method named `compute` found for struct `std::sync::Arc<PhaseEvolution>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/tree_operations.rs:205:55
    |
205 |         new_superposition.evolve(self.phase_evolution.compute(0.1))?;
    |                                                       ^^^^^^^ method not found in `std::sync::Arc<PhaseEvolution>`

error[E0599]: no method named `add_entanglement` found for struct `tokio::sync::RwLockWriteGuard<'_, quantum::entanglement::EntanglementGraph>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/tree_operations.rs:256:36
    |
256 |                 entanglement_graph.add_entanglement(
    |                 -------------------^^^^^^^^^^^^^^^^
    |
help: there is a method `create_entanglement` with a similar name
    |
256 -                 entanglement_graph.add_entanglement(
256 +                 entanglement_graph.create_entanglement(
    |

error[E0599]: no variant or associated item named `Weak` found for enum `quantum::types::EntanglementType` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/tree_operations.rs:259:39
    |
259 |                     EntanglementType::Weak,
    |                                       ^^^^ variant or associated item not found in `quantum::types::EntanglementType`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/types.rs:123:1
    |
123 | pub enum EntanglementType {
    | ------------------------- variant or associated item `Weak` not found for this enum

error[E0599]: no method named `correct_amplitude` found for struct `std::sync::Arc<QuantumErrorCorrection>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/tree_operations.rs:324:57
    |
324 |                 let corrected_reward = error_correction.correct_amplitude(quantum_reward)?;
    |                                                         ^^^^^^^^^^^^^^^^^ method not found in `std::sync::Arc<QuantumErrorCorrection>`

error[E0599]: no method named `get_entangled` found for struct `tokio::sync::RwLockReadGuard<'_, quantum::entanglement::EntanglementGraph>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/tree_operations.rs:359:55
    |
359 |             if let Ok(entangled) = entanglement_graph.get_entangled(&node_id) {
    |                                                       ^^^^^^^^^^^^^ method not found in `tokio::sync::RwLockReadGuard<'_, quantum::entanglement::EntanglementGraph>`

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/tree_operations.rs:385:54
    |
385 |                 let avg_reward = node.quantum_reward.norm() / node.visits as f64;
    |                                                      ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0368]: binary assignment operation `*=` cannot be applied to type `Complex64`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/tree_operations.rs:399:17
    |
399 |                 node.amplitude *= amplification_factor;
    |                 --------------^^^^^^^^^^^^^^^^^^^^^^^^
    |                 |
    |                 cannot use `*=` on type `Complex64`
    |
note: an implementation of `MulAssign<{float}>` might be missing for `Complex64`
   --> packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | ^^^^^^^^^^^^^^^^^^^^ must implement `MulAssign<{float}>`
note: the trait `MulAssign` must be implemented
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/ops/arith.rs:880:1
    |
880 | pub trait MulAssign<Rhs = Self> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `start_search_timer` found for struct `std::sync::Arc<QuantumStatisticsCollector>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:113:25
    |
113 |         self.statistics.start_search_timer();
    |                         ^^^^^^^^^^^^^^^^^^ method not found in `std::sync::Arc<QuantumStatisticsCollector>`

error[E0599]: no method named `improve_tree` found for struct `std::sync::Arc<RecursiveImprovementEngine>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:121:41
    |
121 |                 self.improvement_engine.improve_tree(&self.root).await?;
    |                                         ^^^^^^^^^^^^ method not found in `std::sync::Arc<RecursiveImprovementEngine>`

error[E0599]: no method named `finalize_search` found for struct `std::sync::Arc<QuantumStatisticsCollector>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:127:25
    |
127 |         self.statistics.finalize_search();
    |                         ^^^^^^^^^^^^^^^ method not found in `std::sync::Arc<QuantumStatisticsCollector>`

error[E0061]: this method takes 2 arguments but 1 argument was supplied
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:135:43
    |
135 |         let selected_node = self.selector.quantum_select(&self.root).await?;
    |                                           ^^^^^^^^^^^^^^------------ argument #2 of type `&str` is missing
    |
note: expected `&RwLock<HashMap<String, ...>>`, found `&Arc<QuantumMCTSNode>`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:135:58
    |
135 |         let selected_node = self.selector.quantum_select(&self.root).await?;
    |                                                          ^^^^^^^^^^
    = note: expected reference `&tokio::sync::RwLock<std::collections::HashMap<std::string::String, quantum_mcts::node_state::node::QuantumMCTSNode>>`
               found reference `&std::sync::Arc<quantum_mcts::node_state::node::QuantumMCTSNode>`
note: method defined here
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/selection/core.rs:37:18
    |
37  |     pub async fn quantum_select(
    |                  ^^^^^^^^^^^^^^
38  |         &mut self,
39  |         tree: &RwLock<HashMap<String, QuantumMCTSNode>>,
    |         -----------------------------------------------
40  |         root_id: &str,
    |         -------------
help: provide the argument
    |
135 -         let selected_node = self.selector.quantum_select(&self.root).await?;
135 +         let selected_node = self.selector.quantum_select(/* &tokio::sync::RwLock<std::collections::HashMap<std::string::String, quantum_mcts::node_state::node::QuantumMCTSNode>> */, /* &str */).await?;
    |

error[E0599]: no method named `quantum_expand` found for struct `std::sync::Arc<quantum_expander::QuantumExpander>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:138:38
    |
138 |         let new_node = self.expander.quantum_expand(&selected_node).await?;
    |                                      ^^^^^^^^^^^^^^ method not found in `std::sync::Arc<quantum_expander::QuantumExpander>`

error[E0061]: this method takes 3 arguments but 2 arguments were supplied
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:144:29
    |
144 |         self.backpropagator.quantum_backpropagate(&new_node, reward).await?;
    |                             ^^^^^^^^^^^^^^^^^^^^^-------------------
    |                                                  |           |
    |                                                  |           expected `String`, found `f64`
    |                                                  argument #3 of type `Complex64` is missing
    |
note: expected `&RwLock<HashMap<String, ...>>`, found `&Arc<QuantumMCTSNode>`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:144:51
    |
144 |         self.backpropagator.quantum_backpropagate(&new_node, reward).await?;
    |                                                   ^^^^^^^^^
    = note: expected reference `&tokio::sync::RwLock<std::collections::HashMap<std::string::String, quantum_mcts::node_state::node::QuantumMCTSNode>>`
               found reference `&std::sync::Arc<quantum_mcts::node_state::node::QuantumMCTSNode>`
note: method defined here
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/core.rs:54:18
    |
54  |     pub async fn quantum_backpropagate(
    |                  ^^^^^^^^^^^^^^^^^^^^^
55  |         &mut self,
56  |         tree: &RwLock<HashMap<String, QuantumMCTSNode>>,
    |         -----------------------------------------------
57  |         start_node_id: String,
    |         ---------------------
58  |         reward: Complex64,
    |         -----------------
help: try using a conversion method
    |
144 |         self.backpropagator.quantum_backpropagate(&new_node, reward.to_string()).await?;
    |                                                                    ++++++++++++
help: provide the argument
    |
144 -         self.backpropagator.quantum_backpropagate(&new_node, reward).await?;
144 +         self.backpropagator.quantum_backpropagate(/* &tokio::sync::RwLock<std::collections::HashMap<std::string::String, quantum_mcts::node_state::node::QuantumMCTSNode>> */, /* std::string::String */, /* Complex64 */).await?;
    |

error[E0599]: no method named `update_entanglement` found for struct `std::sync::Arc<QuantumEntanglementManager>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:147:35
    |
147 |         self.entanglement_manager.update_entanglement(&new_node, iteration).await?;
    |                                   ^^^^^^^^^^^^^^^^^^^
    |
help: there is a method `update_node_entanglements` with a similar name
    |
147 -         self.entanglement_manager.update_entanglement(&new_node, iteration).await?;
147 +         self.entanglement_manager.update_node_entanglements(&new_node, iteration).await?;
    |

warning: unused variable: `node`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:153:38
    |
153 |     async fn simulate_quantum(&self, node: &Arc<QuantumMCTSNode>) -> QuantumMCTSResult<f64> {
    |                                      ^^^^ help: if this is intentional, prefix it with an underscore: `_node`

error[E0599]: no variant or associated item named `ProcessingError` found for enum `cognitive::types::CognitiveError` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:161:29
    |
161 |         Err(CognitiveError::ProcessingError("Not implemented".to_string()))
    |                             ^^^^^^^^^^^^^^^ variant or associated item not found in `cognitive::types::CognitiveError`
    |
   ::: packages/sweetmcp-memory/src/cognitive/types.rs:233:1
    |
233 | pub enum CognitiveError {
    | ----------------------- variant or associated item `ProcessingError` not found for this enum

error[E0599]: no method named `get_tree_statistics` found for struct `std::sync::Arc<QuantumStatisticsCollector>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:166:25
    |
166 |         self.statistics.get_tree_statistics(&self.root).await
    |                         ^^^^^^^^^^^^^^^^^^^ method not found in `std::sync::Arc<QuantumStatisticsCollector>`

error[E0038]: the trait `llm::LLMProvider` is not dyn compatible
   --> packages/sweetmcp-memory/src/llm/completion/mod.rs:33:9
    |
33  |         self.provider.complete(prompt, max_tokens, temperature).await
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `llm::LLMProvider` is not dyn compatible
    |
note: for a trait to be dyn compatible it needs to allow building a vtable
      for more information, visit <https://doc.rust-lang.org/reference/items/traits.html#dyn-compatibility>
   --> packages/sweetmcp-memory/src/llm/mod.rs:93:10
    |
83  | pub trait LLMProvider: Send + Sync {
    |           ----------- this trait is not dyn compatible...
...
93  |     ) -> impl std::future::Future<Output = Result<String>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_advanced` references an `impl Trait` type in its return type
...
101 |     ) -> impl std::future::Future<Output = Result<String>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_with_messages` references an `impl Trait` type in its return type
...
110 |     ) -> impl std::future::Future<Output = Result<std::collections::HashMap<String, String>>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_with_tools` references an `impl Trait` type in its return type
    = help: consider moving `complete_advanced` to another trait
    = help: consider moving `complete_with_messages` to another trait
    = help: consider moving `complete_with_tools` to another trait
    = help: the following types implement `llm::LLMProvider`:
              llm::anthropic::AnthropicProvider
              llm::openai::OpenAIProvider
            consider defining an enum where each variant holds one of these types,
            implementing `llm::LLMProvider` for this new enum and using it instead
    = note: `llm::LLMProvider` may be implemented in other crates; if you want to support your users passing their own types here, you can't refer to a specific type

error[E0061]: this method takes 1 argument but 3 arguments were supplied
  --> packages/sweetmcp-memory/src/llm/completion/mod.rs:33:23
   |
33 |         self.provider.complete(prompt, max_tokens, temperature).await
   |                       ^^^^^^^^         ----------  ----------- unexpected argument #3 of type `std::option::Option<f32>`
   |                                        |
   |                                        unexpected argument #2 of type `std::option::Option<usize>`
   |
note: method defined here
  --> packages/sweetmcp-memory/src/llm/mod.rs:85:8
   |
85 |     fn complete(&self, prompt: &str) -> PendingCompletion;
   |        ^^^^^^^^
help: remove the extra arguments
   |
33 -         self.provider.complete(prompt, max_tokens, temperature).await
33 +         self.provider.complete(prompt).await
   |

error[E0038]: the trait `llm::LLMProvider` is not dyn compatible
   --> packages/sweetmcp-memory/src/llm/completion/mod.rs:43:9
    |
43  | /         self.provider
44  | |             .complete_with_messages(messages, max_tokens, temperature)
    | |______________________________________________________________________^ `llm::LLMProvider` is not dyn compatible
    |
note: for a trait to be dyn compatible it needs to allow building a vtable
      for more information, visit <https://doc.rust-lang.org/reference/items/traits.html#dyn-compatibility>
   --> packages/sweetmcp-memory/src/llm/mod.rs:93:10
    |
83  | pub trait LLMProvider: Send + Sync {
    |           ----------- this trait is not dyn compatible...
...
93  |     ) -> impl std::future::Future<Output = Result<String>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_advanced` references an `impl Trait` type in its return type
...
101 |     ) -> impl std::future::Future<Output = Result<String>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_with_messages` references an `impl Trait` type in its return type
...
110 |     ) -> impl std::future::Future<Output = Result<std::collections::HashMap<String, String>>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_with_tools` references an `impl Trait` type in its return type
    = help: consider moving `complete_advanced` to another trait
    = help: consider moving `complete_with_messages` to another trait
    = help: consider moving `complete_with_tools` to another trait
    = help: the following types implement `llm::LLMProvider`:
              llm::anthropic::AnthropicProvider
              llm::openai::OpenAIProvider
            consider defining an enum where each variant holds one of these types,
            implementing `llm::LLMProvider` for this new enum and using it instead
    = note: `llm::LLMProvider` may be implemented in other crates; if you want to support your users passing their own types here, you can't refer to a specific type

error[E0599]: no variant or associated item named `DeserializationError` found for enum `LLMError` in the current scope
   --> packages/sweetmcp-memory/src/llm/completion/mod.rs:56:63
    |
56  |         serde_json::from_str(&response).map_err(|e| LLMError::DeserializationError(e.to_string()))
    |                                                               ^^^^^^^^^^^^^^^^^^^^ variant or associated item not found in `LLMError`
    |
   ::: packages/sweetmcp-memory/src/llm/mod.rs:121:1
    |
121 | pub enum LLMError {
    | ----------------- variant or associated item `DeserializationError` not found for this enum
    |
help: there is a variant with a similar name
    |
56  -         serde_json::from_str(&response).map_err(|e| LLMError::DeserializationError(e.to_string()))
56  +         serde_json::from_str(&response).map_err(|e| LLMError::SerializationError(e.to_string()))
    |

error[E0038]: the trait `llm::LLMProvider` is not dyn compatible
   --> packages/sweetmcp-memory/src/llm/completion/mod.rs:67:9
    |
67  | /         self.provider
68  | |             .complete_with_tools(messages, tools, max_tokens, temperature)
    | |__________________________________________________________________________^ `llm::LLMProvider` is not dyn compatible
    |
note: for a trait to be dyn compatible it needs to allow building a vtable
      for more information, visit <https://doc.rust-lang.org/reference/items/traits.html#dyn-compatibility>
   --> packages/sweetmcp-memory/src/llm/mod.rs:93:10
    |
83  | pub trait LLMProvider: Send + Sync {
    |           ----------- this trait is not dyn compatible...
...
93  |     ) -> impl std::future::Future<Output = Result<String>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_advanced` references an `impl Trait` type in its return type
...
101 |     ) -> impl std::future::Future<Output = Result<String>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_with_messages` references an `impl Trait` type in its return type
...
110 |     ) -> impl std::future::Future<Output = Result<std::collections::HashMap<String, String>>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_with_tools` references an `impl Trait` type in its return type
    = help: consider moving `complete_advanced` to another trait
    = help: consider moving `complete_with_messages` to another trait
    = help: consider moving `complete_with_tools` to another trait
    = help: the following types implement `llm::LLMProvider`:
              llm::anthropic::AnthropicProvider
              llm::openai::OpenAIProvider
            consider defining an enum where each variant holds one of these types,
            implementing `llm::LLMProvider` for this new enum and using it instead
    = note: `llm::LLMProvider` may be implemented in other crates; if you want to support your users passing their own types here, you can't refer to a specific type

error[E0038]: the trait `llm::LLMProvider` is not dyn compatible
   --> packages/sweetmcp-memory/src/llm/completion/mod.rs:77:9
    |
77  | /         self.provider
78  | |             .complete_with_messages(messages, None, None)
    | |_________________________________________________________^ `llm::LLMProvider` is not dyn compatible
    |
note: for a trait to be dyn compatible it needs to allow building a vtable
      for more information, visit <https://doc.rust-lang.org/reference/items/traits.html#dyn-compatibility>
   --> packages/sweetmcp-memory/src/llm/mod.rs:93:10
    |
83  | pub trait LLMProvider: Send + Sync {
    |           ----------- this trait is not dyn compatible...
...
93  |     ) -> impl std::future::Future<Output = Result<String>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_advanced` references an `impl Trait` type in its return type
...
101 |     ) -> impl std::future::Future<Output = Result<String>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_with_messages` references an `impl Trait` type in its return type
...
110 |     ) -> impl std::future::Future<Output = Result<std::collections::HashMap<String, String>>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_with_tools` references an `impl Trait` type in its return type
    = help: consider moving `complete_advanced` to another trait
    = help: consider moving `complete_with_messages` to another trait
    = help: consider moving `complete_with_tools` to another trait
    = help: the following types implement `llm::LLMProvider`:
              llm::anthropic::AnthropicProvider
              llm::openai::OpenAIProvider
            consider defining an enum where each variant holds one of these types,
            implementing `llm::LLMProvider` for this new enum and using it instead
    = note: `llm::LLMProvider` may be implemented in other crates; if you want to support your users passing their own types here, you can't refer to a specific type

error[E0038]: the trait `llm::LLMProvider` is not dyn compatible
   --> packages/sweetmcp-memory/src/llm/completion/mod.rs:88:9
    |
88  | /         self.provider
89  | |             .complete_with_tools(messages, tools, None, None)
    | |_____________________________________________________________^ `llm::LLMProvider` is not dyn compatible
    |
note: for a trait to be dyn compatible it needs to allow building a vtable
      for more information, visit <https://doc.rust-lang.org/reference/items/traits.html#dyn-compatibility>
   --> packages/sweetmcp-memory/src/llm/mod.rs:93:10
    |
83  | pub trait LLMProvider: Send + Sync {
    |           ----------- this trait is not dyn compatible...
...
93  |     ) -> impl std::future::Future<Output = Result<String>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_advanced` references an `impl Trait` type in its return type
...
101 |     ) -> impl std::future::Future<Output = Result<String>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_with_messages` references an `impl Trait` type in its return type
...
110 |     ) -> impl std::future::Future<Output = Result<std::collections::HashMap<String, String>>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_with_tools` references an `impl Trait` type in its return type
    = help: consider moving `complete_advanced` to another trait
    = help: consider moving `complete_with_messages` to another trait
    = help: consider moving `complete_with_tools` to another trait
    = help: the following types implement `llm::LLMProvider`:
              llm::anthropic::AnthropicProvider
              llm::openai::OpenAIProvider
            consider defining an enum where each variant holds one of these types,
            implementing `llm::LLMProvider` for this new enum and using it instead
    = note: `llm::LLMProvider` may be implemented in other crates; if you want to support your users passing their own types here, you can't refer to a specific type

error[E0038]: the trait `llm::LLMProvider` is not dyn compatible
   --> packages/sweetmcp-memory/src/llm/completion/mod.rs:98:9
    |
98  | /         self.provider
99  | |             .complete_with_messages(messages, None, Some(0.1))
    | |______________________________________________________________^ `llm::LLMProvider` is not dyn compatible
    |
note: for a trait to be dyn compatible it needs to allow building a vtable
      for more information, visit <https://doc.rust-lang.org/reference/items/traits.html#dyn-compatibility>
   --> packages/sweetmcp-memory/src/llm/mod.rs:93:10
    |
83  | pub trait LLMProvider: Send + Sync {
    |           ----------- this trait is not dyn compatible...
...
93  |     ) -> impl std::future::Future<Output = Result<String>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_advanced` references an `impl Trait` type in its return type
...
101 |     ) -> impl std::future::Future<Output = Result<String>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_with_messages` references an `impl Trait` type in its return type
...
110 |     ) -> impl std::future::Future<Output = Result<std::collections::HashMap<String, String>>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_with_tools` references an `impl Trait` type in its return type
    = help: consider moving `complete_advanced` to another trait
    = help: consider moving `complete_with_messages` to another trait
    = help: consider moving `complete_with_tools` to another trait
    = help: the following types implement `llm::LLMProvider`:
              llm::anthropic::AnthropicProvider
              llm::openai::OpenAIProvider
            consider defining an enum where each variant holds one of these types,
            implementing `llm::LLMProvider` for this new enum and using it instead
    = note: `llm::LLMProvider` may be implemented in other crates; if you want to support your users passing their own types here, you can't refer to a specific type

error[E0038]: the trait `llm::LLMProvider` is not dyn compatible
   --> packages/sweetmcp-memory/src/llm/content_analyzer/mod.rs:56:24
    |
56  |         let response = self.provider.complete(&prompt, Some(500), Some(0.3)).await?;
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `llm::LLMProvider` is not dyn compatible
    |
note: for a trait to be dyn compatible it needs to allow building a vtable
      for more information, visit <https://doc.rust-lang.org/reference/items/traits.html#dyn-compatibility>
   --> packages/sweetmcp-memory/src/llm/mod.rs:93:10
    |
83  | pub trait LLMProvider: Send + Sync {
    |           ----------- this trait is not dyn compatible...
...
93  |     ) -> impl std::future::Future<Output = Result<String>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_advanced` references an `impl Trait` type in its return type
...
101 |     ) -> impl std::future::Future<Output = Result<String>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_with_messages` references an `impl Trait` type in its return type
...
110 |     ) -> impl std::future::Future<Output = Result<std::collections::HashMap<String, String>>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_with_tools` references an `impl Trait` type in its return type
    = help: consider moving `complete_advanced` to another trait
    = help: consider moving `complete_with_messages` to another trait
    = help: consider moving `complete_with_tools` to another trait
    = help: the following types implement `llm::LLMProvider`:
              llm::anthropic::AnthropicProvider
              llm::openai::OpenAIProvider
            consider defining an enum where each variant holds one of these types,
            implementing `llm::LLMProvider` for this new enum and using it instead
    = note: `llm::LLMProvider` may be implemented in other crates; if you want to support your users passing their own types here, you can't refer to a specific type

error[E0061]: this method takes 1 argument but 3 arguments were supplied
  --> packages/sweetmcp-memory/src/llm/content_analyzer/mod.rs:56:38
   |
56 |         let response = self.provider.complete(&prompt, Some(500), Some(0.3)).await?;
   |                                      ^^^^^^^^          ---------  --------- unexpected argument #3 of type `std::option::Option<{float}>`
   |                                                        |
   |                                                        unexpected argument #2 of type `std::option::Option<{integer}>`
   |
note: method defined here
  --> packages/sweetmcp-memory/src/llm/mod.rs:85:8
   |
85 |     fn complete(&self, prompt: &str) -> PendingCompletion;
   |        ^^^^^^^^
help: remove the extra arguments
   |
56 -         let response = self.provider.complete(&prompt, Some(500), Some(0.3)).await?;
56 +         let response = self.provider.complete(&prompt).await?;
   |

error[E0599]: no variant or associated item named `DeserializationError` found for enum `LLMError` in the current scope
   --> packages/sweetmcp-memory/src/llm/content_analyzer/mod.rs:60:36
    |
60  |             .map_err(|e| LLMError::DeserializationError(e.to_string()))
    |                                    ^^^^^^^^^^^^^^^^^^^^ variant or associated item not found in `LLMError`
    |
   ::: packages/sweetmcp-memory/src/llm/mod.rs:121:1
    |
121 | pub enum LLMError {
    | ----------------- variant or associated item `DeserializationError` not found for this enum
    |
help: there is a variant with a similar name
    |
60  -             .map_err(|e| LLMError::DeserializationError(e.to_string()))
60  +             .map_err(|e| LLMError::SerializationError(e.to_string()))
    |

error[E0038]: the trait `llm::LLMProvider` is not dyn compatible
   --> packages/sweetmcp-memory/src/llm/content_analyzer/mod.rs:74:24
    |
74  |         let response = self.provider.complete(&prompt, Some(500), Some(0.3)).await?;
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `llm::LLMProvider` is not dyn compatible
    |
note: for a trait to be dyn compatible it needs to allow building a vtable
      for more information, visit <https://doc.rust-lang.org/reference/items/traits.html#dyn-compatibility>
   --> packages/sweetmcp-memory/src/llm/mod.rs:93:10
    |
83  | pub trait LLMProvider: Send + Sync {
    |           ----------- this trait is not dyn compatible...
...
93  |     ) -> impl std::future::Future<Output = Result<String>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_advanced` references an `impl Trait` type in its return type
...
101 |     ) -> impl std::future::Future<Output = Result<String>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_with_messages` references an `impl Trait` type in its return type
...
110 |     ) -> impl std::future::Future<Output = Result<std::collections::HashMap<String, String>>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_with_tools` references an `impl Trait` type in its return type
    = help: consider moving `complete_advanced` to another trait
    = help: consider moving `complete_with_messages` to another trait
    = help: consider moving `complete_with_tools` to another trait
    = help: the following types implement `llm::LLMProvider`:
              llm::anthropic::AnthropicProvider
              llm::openai::OpenAIProvider
            consider defining an enum where each variant holds one of these types,
            implementing `llm::LLMProvider` for this new enum and using it instead
    = note: `llm::LLMProvider` may be implemented in other crates; if you want to support your users passing their own types here, you can't refer to a specific type

error[E0061]: this method takes 1 argument but 3 arguments were supplied
  --> packages/sweetmcp-memory/src/llm/content_analyzer/mod.rs:74:38
   |
74 |         let response = self.provider.complete(&prompt, Some(500), Some(0.3)).await?;
   |                                      ^^^^^^^^          ---------  --------- unexpected argument #3 of type `std::option::Option<{float}>`
   |                                                        |
   |                                                        unexpected argument #2 of type `std::option::Option<{integer}>`
   |
note: method defined here
  --> packages/sweetmcp-memory/src/llm/mod.rs:85:8
   |
85 |     fn complete(&self, prompt: &str) -> PendingCompletion;
   |        ^^^^^^^^
help: remove the extra arguments
   |
74 -         let response = self.provider.complete(&prompt, Some(500), Some(0.3)).await?;
74 +         let response = self.provider.complete(&prompt).await?;
   |

error[E0599]: no variant or associated item named `DeserializationError` found for enum `LLMError` in the current scope
   --> packages/sweetmcp-memory/src/llm/content_analyzer/mod.rs:78:36
    |
78  |             .map_err(|e| LLMError::DeserializationError(e.to_string()))
    |                                    ^^^^^^^^^^^^^^^^^^^^ variant or associated item not found in `LLMError`
    |
   ::: packages/sweetmcp-memory/src/llm/mod.rs:121:1
    |
121 | pub enum LLMError {
    | ----------------- variant or associated item `DeserializationError` not found for this enum
    |
help: there is a variant with a similar name
    |
78  -             .map_err(|e| LLMError::DeserializationError(e.to_string()))
78  +             .map_err(|e| LLMError::SerializationError(e.to_string()))
    |

warning: unused variable: `id`
   --> packages/sweetmcp-memory/src/memory/lifecycle.rs:142:68
    |
142 |         let memories = self.cache.get_multiple_with_fallback(ids, |id| {
    |                                                                    ^^ help: if this is intentional, prefix it with an underscore: `_id`

error[E0616]: field `cache` of struct `MemoryLifecycle` is private
  --> packages/sweetmcp-memory/src/memory/manager.rs:77:27
   |
77 |         Ok(self.lifecycle.cache.get_memories_by_filter(filter))
   |                           ^^^^^ private field

error[E0616]: field `cache` of struct `MemoryLifecycle` is private
  --> packages/sweetmcp-memory/src/memory/manager.rs:88:46
   |
88 |         if let Some(cached) = self.lifecycle.cache.get(id) {
   |                                              ^^^^^ private field

error[E0616]: field `coordinator` of struct `MemoryLifecycle` is private
  --> packages/sweetmcp-memory/src/memory/manager.rs:93:30
   |
93 |         match self.lifecycle.coordinator.retrieve_memory(id).await {
   |                              ^^^^^^^^^^^ private field

error[E0616]: field `cache` of struct `MemoryLifecycle` is private
  --> packages/sweetmcp-memory/src/memory/manager.rs:96:32
   |
96 |                 self.lifecycle.cache.insert(memory.clone());
   |                                ^^^^^ private field

error[E0277]: the trait bound `&str: CreateResource<Vec<MemoryNodeSchema>>` is not satisfied
   --> packages/sweetmcp-memory/src/memory/memory_manager/crud.rs:151:55
    |
151 |         match self.db.create::<Vec<MemoryNodeSchema>>("memory").content(contents).await {
    |                       ------                          ^^^^^^^^ the trait `CreateResource<Vec<MemoryNodeSchema>>` is not implemented for `&str`
    |                       |
    |                       required by a bound introduced by this call
    |
    = help: the trait `CreateResource<Vec<MemoryNodeSchema>>` is not implemented for `&str`
            but trait `CreateResource<std::option::Option<_>>` is implemented for it
    = help: for that trait implementation, expected `std::option::Option<_>`, found `Vec<MemoryNodeSchema>`
note: required by a bound in `surrealdb::method::<impl Surreal<C>>::create`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/surrealdb-2.3.7/src/api/method/mod.rs:772:41
    |
772 |     pub fn create<R>(&self, resource: impl CreateResource<R>) -> Create<C, R> {
    |                                            ^^^^^^^^^^^^^^^^^ required by this bound in `surrealdb::method::<impl Surreal<C>>::create`

error[E0599]: no method named `content` found for struct `surrealdb::method::Create<'_, surrealdb::engine::any::Any, Vec<MemoryNodeSchema>>` in the current scope
   --> packages/sweetmcp-memory/src/memory/memory_manager/crud.rs:151:65
    |
151 |         match self.db.create::<Vec<MemoryNodeSchema>>("memory").content(contents).await {
    |                                                                 ^^^^^^^ method not found in `surrealdb::method::Create<'_, surrealdb::engine::any::Any, Vec<MemoryNodeSchema>>`
    |
    = note: the method was found for
            - `surrealdb::method::Create<'r, C, std::option::Option<R>>`
            - `surrealdb::method::Create<'r, C, surrealdb::Value>`
    = help: items from traits can only be used if the trait is implemented and in scope
note: `traits::Memory` defines an item `content`, perhaps you need to implement it
   --> packages/sweetmcp-memory/src/memory/memory_type/traits.rs:68:1
    |
68  | pub trait Memory: Send + Sync + Debug {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0515]: cannot return value referencing function parameter `v`
   --> packages/sweetmcp-memory/src/memory/memory_manager/mod.rs:207:56
    |
207 |                 if let Some(avg) = result.and_then(|v| v.get("avg_importance")).and_then(|v| v.as_f64()) {
    |                                                        -^^^^^^^^^^^^^^^^^^^^^^
    |                                                        |
    |                                                        returns a value referencing data owned by the current function
    |                                                        `v` is borrowed here

error[E0616]: field `config` of struct `MemoryQueryExecutor` is private
  --> packages/sweetmcp-memory/src/memory/query/executor_operations.rs:32:34
   |
32 |         let start_time = if self.config.enable_profiling {
   |                                  ^^^^^^ private field
   |
help: a method `config` also exists, call it with parentheses
   |
32 |         let start_time = if self.config().enable_profiling {
   |                                        ++

error[E0616]: field `config` of struct `MemoryQueryExecutor` is private
  --> packages/sweetmcp-memory/src/memory/query/executor_operations.rs:40:37
   |
40 |         let timeout_duration = self.config.timeout_duration();
   |                                     ^^^^^^ private field
   |
help: a method `config` also exists, call it with parentheses
   |
40 |         let timeout_duration = self.config().timeout_duration();
   |                                           ++

error[E0616]: field `config` of struct `MemoryQueryExecutor` is private
  --> packages/sweetmcp-memory/src/memory/query/executor_operations.rs:47:64
   |
47 |                 if let (Some(start), true) = (start_time, self.config.enable_profiling) {
   |                                                                ^^^^^^ private field
   |
help: a method `config` also exists, call it with parentheses
   |
47 |                 if let (Some(start), true) = (start_time, self.config().enable_profiling) {
   |                                                                      ++

error[E0616]: field `config` of struct `MemoryQueryExecutor` is private
  --> packages/sweetmcp-memory/src/memory/query/executor_operations.rs:58:34
   |
58 |                 timeout_ms: self.config.timeout_ms,
   |                                  ^^^^^^ private field
   |
help: a method `config` also exists, call it with parentheses
   |
58 |                 timeout_ms: self.config().timeout_ms,
   |                                        ++

error[E0616]: field `config` of struct `MemoryQueryExecutor` is private
  --> packages/sweetmcp-memory/src/memory/query/executor_operations.rs:79:37
   |
79 |         let timeout_duration = self.config.timeout_duration();
   |                                     ^^^^^^ private field
   |
help: a method `config` also exists, call it with parentheses
   |
79 |         let timeout_duration = self.config().timeout_duration();
   |                                           ++

error[E0616]: field `config` of struct `MemoryQueryExecutor` is private
  --> packages/sweetmcp-memory/src/memory/query/executor_operations.rs:85:36
   |
85 |         stats.was_optimized = self.config.is_optimization_enabled();
   |                                    ^^^^^^ private field
   |
help: a method `config` also exists, call it with parentheses
   |
85 |         stats.was_optimized = self.config().is_optimization_enabled();
   |                                          ++

error[E0599]: no method named `len` found for enum `std::result::Result` in the current scope
    --> packages/sweetmcp-memory/src/memory/query/executor_operations.rs:89:53
     |
89   |                 stats.items_returned = query_result.len();
     |                                                     ^^^ method not found in `std::result::Result<Vec<MemoryNode>, utils::error::Error>`
     |
note: the method `len` exists on the type `Vec<MemoryNode>`
    --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs:2737:5
     |
2737 |     pub const fn len(&self) -> usize {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     = help: items from traits can only be used if the trait is implemented and in scope
note: `vector_index::VectorIndex` defines an item `len`, perhaps you need to implement it
    --> packages/sweetmcp-memory/src/vector/vector_index.rs:43:1
     |
43   | pub trait VectorIndex: Send + Sync {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: use the `?` operator to extract the `Vec<MemoryNode>` value, propagating a `Result::Err` value to the caller
     |
89   |                 stats.items_returned = query_result?.len();
     |                                                    +

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/memory/query/executor_operations.rs:90:21
   |
90 |                 Ok((query_result, stats))
   |                     ^^^^^^^^^^^^ expected `Vec<MemoryNode>`, found `Result<Vec<MemoryNode>, Error>`
   |
   = note: expected struct `Vec<_>`
                found enum `std::result::Result<Vec<_>, utils::error::Error>`
help: use the `?` operator to extract the `std::result::Result<Vec<MemoryNode>, utils::error::Error>` value, propagating a `Result::Err` value to the caller
   |
90 |                 Ok((query_result?, stats))
   |                                 +

error[E0616]: field `config` of struct `MemoryQueryExecutor` is private
  --> packages/sweetmcp-memory/src/memory/query/executor_operations.rs:93:34
   |
93 |                 timeout_ms: self.config.timeout_ms,
   |                                  ^^^^^^ private field
   |
help: a method `config` also exists, call it with parentheses
   |
93 |                 timeout_ms: self.config().timeout_ms,
   |                                        ++

error[E0609]: no field `text_query` on type `filter::MemoryFilter`
   --> packages/sweetmcp-memory/src/memory/query/executor_operations.rs:115:49
    |
115 |         if let Some(text_query) = &query.filter.text_query {
    |                                                 ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `memory_types`, `user_id`, `agent_id`, `tags`, `time_range` ... and 4 others

error[E0609]: no field `metadata_filters` on type `filter::MemoryFilter`
   --> packages/sweetmcp-memory/src/memory/query/executor_operations.rs:127:26
    |
127 |         if !query.filter.metadata_filters.is_empty() && !self.has_reached_limit(&results, query) {
    |                          ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `memory_types`, `user_id`, `agent_id`, `tags`, `time_range` ... and 4 others

error[E0609]: no field `sort_order` on type `&MemoryQuery`
   --> packages/sweetmcp-memory/src/memory/query/executor_operations.rs:132:42
    |
132 |         if let Some(sort_order) = &query.sort_order {
    |                                          ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `filter`, `sort`, `include_relationships`, `include_embeddings`, `min_similarity`

error[E0609]: no field `text_query` on type `filter::MemoryFilter`
   --> packages/sweetmcp-memory/src/memory/query/executor_operations.rs:168:49
    |
168 |         if let Some(text_query) = &query.filter.text_query {
    |                                                 ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `memory_types`, `user_id`, `agent_id`, `tags`, `time_range` ... and 4 others

error[E0609]: no field `metadata_filters` on type `filter::MemoryFilter`
   --> packages/sweetmcp-memory/src/memory/query/executor_operations.rs:187:26
    |
187 |         if !query.filter.metadata_filters.is_empty() && !self.has_reached_limit(&results, query) {
    |                          ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `memory_types`, `user_id`, `agent_id`, `tags`, `time_range` ... and 4 others

error[E0609]: no field `sort_order` on type `&MemoryQuery`
   --> packages/sweetmcp-memory/src/memory/query/executor_operations.rs:192:42
    |
192 |         if let Some(sort_order) = &query.sort_order {
    |                                          ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `filter`, `sort`, `include_relationships`, `include_embeddings`, `min_similarity`

error[E0616]: field `config` of struct `MemoryQueryExecutor` is private
   --> packages/sweetmcp-memory/src/memory/query/executor_operations.rs:201:42
    |
201 |         stats.parallel_operations = self.config.max_parallel;
    |                                          ^^^^^^ private field
    |
help: a method `config` also exists, call it with parentheses
    |
201 |         stats.parallel_operations = self.config().max_parallel;
    |                                                ++

error[E0599]: no method named `get_memories_by_type` found for reference `&dyn MemoryManager` in the current scope
   --> packages/sweetmcp-memory/src/memory/query/executor_operations.rs:216:21
    |
216 |             manager.get_memories_by_type(*memory_type)
    |                     ^^^^^^^^^^^^^^^^^^^^
    |
help: there is a method `get_memory` with a similar name
    |
216 -             manager.get_memories_by_type(*memory_type)
216 +             manager.get_memory(*memory_type)
    |

error[E0616]: field `config` of struct `MemoryQueryExecutor` is private
   --> packages/sweetmcp-memory/src/memory/query/executor_operations.rs:221:36
    |
221 |             .buffer_unordered(self.config.max_parallel);
    |                                    ^^^^^^ private field
    |
help: a method `config` also exists, call it with parentheses
    |
221 |             .buffer_unordered(self.config().max_parallel);
    |                                          ++

error[E0616]: field `config` of struct `MemoryQueryExecutor` is private
   --> packages/sweetmcp-memory/src/memory/query/executor_operations.rs:233:59
    |
233 |             if self.estimate_memory_usage(results) > self.config.max_memory_bytes {
    |                                                           ^^^^^^ private field
    |
help: a method `config` also exists, call it with parentheses
    |
233 |             if self.estimate_memory_usage(results) > self.config().max_memory_bytes {
    |                                                                 ++

error[E0599]: no method named `get_memories_by_type` found for reference `&dyn MemoryManager` in the current scope
   --> packages/sweetmcp-memory/src/memory/query/executor_operations.rs:254:21
    |
254 |             manager.get_memories_by_type(*memory_type)
    |                     ^^^^^^^^^^^^^^^^^^^^
    |
help: there is a method `get_memory` with a similar name
    |
254 -             manager.get_memories_by_type(*memory_type)
254 +             manager.get_memory(*memory_type)
    |

error[E0616]: field `config` of struct `MemoryQueryExecutor` is private
   --> packages/sweetmcp-memory/src/memory/query/executor_operations.rs:259:36
    |
259 |             .buffer_unordered(self.config.max_parallel);
    |                                    ^^^^^^ private field
    |
help: a method `config` also exists, call it with parentheses
    |
259 |             .buffer_unordered(self.config().max_parallel);
    |                                          ++

error[E0616]: field `config` of struct `MemoryQueryExecutor` is private
   --> packages/sweetmcp-memory/src/memory/query/executor_operations.rs:277:38
    |
277 |             if current_memory > self.config.max_memory_bytes {
    |                                      ^^^^^^ private field
    |
help: a method `config` also exists, call it with parentheses
    |
277 |             if current_memory > self.config().max_memory_bytes {
    |                                            ++

error[E0599]: no method named `search_memories_by_text` found for reference `&dyn MemoryManager` in the current scope
   --> packages/sweetmcp-memory/src/memory/query/executor_operations.rs:295:38
    |
295 |         let search_results = manager.search_memories_by_text(text_query).await?;
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^ method not found in `&dyn MemoryManager`

error[E0616]: field `config` of struct `MemoryQueryExecutor` is private
   --> packages/sweetmcp-memory/src/memory/query/executor_operations.rs:305:59
    |
305 |             if self.estimate_memory_usage(results) > self.config.max_memory_bytes {
    |                                                           ^^^^^^ private field
    |
help: a method `config` also exists, call it with parentheses
    |
305 |             if self.estimate_memory_usage(results) > self.config().max_memory_bytes {
    |                                                                 ++

error[E0599]: no method named `search_memories_by_text` found for reference `&dyn MemoryManager` in the current scope
   --> packages/sweetmcp-memory/src/memory/query/executor_operations.rs:324:38
    |
324 |         let search_results = manager.search_memories_by_text(text_query).await?;
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^ method not found in `&dyn MemoryManager`

error[E0616]: field `config` of struct `MemoryQueryExecutor` is private
   --> packages/sweetmcp-memory/src/memory/query/executor_operations.rs:341:38
    |
341 |             if current_memory > self.config.max_memory_bytes {
    |                                      ^^^^^^ private field
    |
help: a method `config` also exists, call it with parentheses
    |
341 |             if current_memory > self.config().max_memory_bytes {
    |                                            ++

error[E0599]: no method named `created_at` found for mutable reference `&mut MemoryNode` in the current scope
  --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:27:38
   |
27 |                 let node_time = node.created_at();
   |                                      ^^^^^^^^^^-- help: remove the arguments
   |                                      |
   |                                      field, not a method

error[E0599]: no method named `created_at` found for mutable reference `&mut MemoryNode` in the current scope
  --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:44:38
   |
44 |                 let node_time = node.created_at();
   |                                      ^^^^^^^^^^-- help: remove the arguments
   |                                      |
   |                                      field, not a method

error[E0609]: no field `metadata_filters` on type `filter::MemoryFilter`
  --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:59:26
   |
59 |         if !query.filter.metadata_filters.is_empty() {
   |                          ^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `memory_types`, `user_id`, `agent_id`, `tags`, `time_range` ... and 4 others

error[E0609]: no field `metadata_filters` on type `filter::MemoryFilter`
  --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:61:67
   |
61 |                 self.matches_metadata_filters(node, &query.filter.metadata_filters)
   |                                                                   ^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `memory_types`, `user_id`, `agent_id`, `tags`, `time_range` ... and 4 others

error[E0609]: no field `metadata_filters` on type `filter::MemoryFilter`
  --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:74:26
   |
74 |         if !query.filter.metadata_filters.is_empty() {
   |                          ^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `memory_types`, `user_id`, `agent_id`, `tags`, `time_range` ... and 4 others

error[E0609]: no field `metadata_filters` on type `filter::MemoryFilter`
  --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:77:67
   |
77 |                 self.matches_metadata_filters(node, &query.filter.metadata_filters)
   |                                                                   ^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `memory_types`, `user_id`, `agent_id`, `tags`, `time_range` ... and 4 others

error[E0624]: method `execute_type_based_query` is private
   --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:223:30
    |
223 |                           self.execute_type_based_query(memory_types, manager, &mut results, query).await?;
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^ private method
    |
   ::: packages/sweetmcp-memory/src/memory/query/executor_operations.rs:207:5
    |
207 | /     async fn execute_type_based_query(
208 | |         &self,
209 | |         memory_types: &[super::super::MemoryType],
210 | |         manager: &dyn MemoryManager,
211 | |         results: &mut SmallVec<[MemoryNode; 32]>,
212 | |         query: &MemoryQuery,
213 | |     ) -> Result<()> {
    | |___________________- private method defined here

error[E0609]: no field `text_query` on type `filter::MemoryFilter`
   --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:227:61
    |
227 |                     if let Some(text_query) = &query.filter.text_query {
    |                                                             ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `memory_types`, `user_id`, `agent_id`, `tags`, `time_range` ... and 4 others

error[E0624]: method `execute_text_search_query` is private
   --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:228:30
    |
228 |                           self.execute_text_search_query(text_query, manager, &mut results, query).await?;
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^ private method
    |
   ::: packages/sweetmcp-memory/src/memory/query/executor_operations.rs:288:5
    |
288 | /     async fn execute_text_search_query(
289 | |         &self,
290 | |         text_query: &str,
291 | |         manager: &dyn MemoryManager,
292 | |         results: &mut SmallVec<[MemoryNode; 32]>,
293 | |         query: &MemoryQuery,
294 | |     ) -> Result<()> {
    | |___________________- private method defined here

error[E0609]: no field `sort_order` on type `&MemoryQuery`
   --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:238:54
    |
238 |                     if let Some(sort_order) = &query.sort_order {
    |                                                      ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `filter`, `sort`, `include_relationships`, `include_embeddings`, `min_similarity`

error[E0616]: field `config` of struct `MemoryQueryExecutor` is private
   --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:245:21
    |
245 |             if self.config.enable_early_termination && self.has_reached_limit(&results, query) {
    |                     ^^^^^^ private field
    |
help: a method `config` also exists, call it with parentheses
    |
245 |             if self.config().enable_early_termination && self.has_reached_limit(&results, query) {
    |                           ++

error[E0624]: method `has_reached_limit` is private
   --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:245:61
    |
245 |             if self.config.enable_early_termination && self.has_reached_limit(&results, query) {
    |                                                             ^^^^^^^^^^^^^^^^^ private method
    |
   ::: packages/sweetmcp-memory/src/memory/query/executor_operations.rs:353:5
    |
353 |     fn has_reached_limit(&self, results: &SmallVec<[MemoryNode; 32]>, query: &MemoryQuery) -> bool {
    |     ---------------------------------------------------------------------------------------------- private method defined here

error[E0599]: no method named `execute` found for struct `MemoryQueryExecutor` in the current scope
  --> packages/sweetmcp-memory/src/memory/query/builder/executor.rs:33:23
   |
33 |         self.executor.execute(query).await
   |                       ^^^^^^^
   |
  ::: packages/sweetmcp-memory/src/memory/query/executor_core.rs:20:1
   |
20 | pub struct MemoryQueryExecutor {
   | ------------------------------ method `execute` not found for this struct
   |
   = help: items from traits can only be used if the trait is implemented and in scope
   = note: the following traits define an item `execute`, perhaps you need to implement one of them:
           candidate #1: `RpcContext`
           candidate #2: `RpcProtocolV1`
           candidate #3: `RpcProtocolV2`
           candidate #4: `async_graphql::executor::Executor`
           candidate #5: `async_graphql::extensions::Extension`
           candidate #6: `hyper::rt::Executor`
help: there is a method `execute_query` with a similar name, but with different arguments
  --> packages/sweetmcp-memory/src/memory/query/executor_operations.rs:21:5
   |
21 | /     pub async fn execute_query(
22 | |         &self,
23 | |         query: &MemoryQuery,
24 | |         manager: &dyn MemoryManager,
25 | |     ) -> Result<Vec<MemoryNode>> {
   | |________________________________^

error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> packages/sweetmcp-memory/src/memory/semantic/coordinator.rs:45:30
    |
45  |         let memory_manager = SemanticMemoryManager::new().await?;
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^-- argument #1 of type `memory_manager_core::config::config::CleanupConfig` is missing
    |
note: associated function defined here
   --> packages/sweetmcp-memory/src/memory/semantic/memory_cleanup.rs:199:12
    |
199 |     pub fn new(cleanup_config: CleanupConfig) -> Self {
    |            ^^^ -----------------------------
help: provide the argument
    |
45  |         let memory_manager = SemanticMemoryManager::new(/* memory_manager_core::config::config::CleanupConfig */).await?;
    |                                                         ++++++++++++++++++++++++++++++++++++++++++++++++++++++++

error[E0277]: `SemanticMemoryManager` is not a future
  --> packages/sweetmcp-memory/src/memory/semantic/coordinator.rs:45:59
   |
45 |         let memory_manager = SemanticMemoryManager::new().await?;
   |                              ---------------------------- ^^^^^ `SemanticMemoryManager` is not a future
   |                              |
   |                              this call returns `SemanticMemoryManager`
   |
   = help: the trait `futures::Future` is not implemented for `SemanticMemoryManager`
   = note: SemanticMemoryManager must be a future or must implement `IntoFuture` to be awaited
   = note: required for `SemanticMemoryManager` to implement `std::future::IntoFuture`
help: remove the `.await`
   |
45 -         let memory_manager = SemanticMemoryManager::new().await?;
45 +         let memory_manager = SemanticMemoryManager::new()?;
   |

error[E0599]: no function or associated item named `new` found for struct `ConfidenceCalculator` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/coordinator.rs:46:59
    |
46  |         let confidence_calculator = ConfidenceCalculator::new();
    |                                                           ^^^ function or associated item not found in `ConfidenceCalculator`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/confidence.rs:195:1
    |
195 | pub struct ConfidenceCalculator;
    | ------------------------------- function or associated item `new` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `new`, perhaps you need to implement one of them:
            candidate #1: `Atomic`
            candidate #2: `Bit`
            candidate #3: `Digest`
            candidate #4: `KeyInit`
            candidate #5: `KeyIvInit`
            candidate #6: `Nullable`
            candidate #7: `UniformSampler`
            candidate #8: `VariableOutput`
            candidate #9: `VariableOutputCore`
            candidate #10: `ahash::HashMapExt`
            candidate #11: `ahash::HashSetExt`
            candidate #12: `aws_lc_rs::aead::BoundKey`
            candidate #13: `ext_sort::chunk::ExternalChunk`
            candidate #14: `itertools::adaptors::coalesce::CountItem`
            candidate #15: `ndarray::DataOwned`
            candidate #16: `ndarray::data_traits::DataOwned`
            candidate #17: `parking_lot_core::thread_parker::ThreadParkerT`
            candidate #18: `petgraph::adj::IndexType`
            candidate #19: `protobuf::message::Message`
            candidate #20: `quick_cache::shard::SharedPlaceholder`
            candidate #21: `quick_cache::shard::SharedPlaceholder`
            candidate #22: `rand::distributions::uniform::UniformSampler`
            candidate #23: `ring::aead::BoundKey`
            candidate #24: `rstar::point::PointExt`
            candidate #25: `serde_with::duplicate_key_impls::error_on_duplicate::PreventDuplicateInsertsMap`
            candidate #26: `serde_with::duplicate_key_impls::error_on_duplicate::PreventDuplicateInsertsSet`
            candidate #27: `serde_with::duplicate_key_impls::first_value_wins::DuplicateInsertsFirstWinsMap`
            candidate #28: `serde_with::duplicate_key_impls::last_value_wins::DuplicateInsertsLastWinsSet`
            candidate #29: `sha2::digest::Mac`
            candidate #30: `spade::triangulation::Triangulation`
            candidate #31: `tendril::tendril::Atomicity`

error[E0599]: no function or associated item named `new` found for struct `SemanticItemTypeClassifier` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/coordinator.rs:47:59
    |
47  |         let type_classifier = SemanticItemTypeClassifier::new();
    |                                                           ^^^ function or associated item not found in `SemanticItemTypeClassifier`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_types.rs:193:1
    |
193 | pub struct SemanticItemTypeClassifier;
    | ------------------------------------- function or associated item `new` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `new`, perhaps you need to implement one of them:
            candidate #1: `Atomic`
            candidate #2: `Bit`
            candidate #3: `Digest`
            candidate #4: `KeyInit`
            candidate #5: `KeyIvInit`
            candidate #6: `Nullable`
            candidate #7: `UniformSampler`
            candidate #8: `VariableOutput`
            candidate #9: `VariableOutputCore`
            candidate #10: `ahash::HashMapExt`
            candidate #11: `ahash::HashSetExt`
            candidate #12: `aws_lc_rs::aead::BoundKey`
            candidate #13: `ext_sort::chunk::ExternalChunk`
            candidate #14: `itertools::adaptors::coalesce::CountItem`
            candidate #15: `ndarray::DataOwned`
            candidate #16: `ndarray::data_traits::DataOwned`
            candidate #17: `parking_lot_core::thread_parker::ThreadParkerT`
            candidate #18: `petgraph::adj::IndexType`
            candidate #19: `protobuf::message::Message`
            candidate #20: `quick_cache::shard::SharedPlaceholder`
            candidate #21: `quick_cache::shard::SharedPlaceholder`
            candidate #22: `rand::distributions::uniform::UniformSampler`
            candidate #23: `ring::aead::BoundKey`
            candidate #24: `rstar::point::PointExt`
            candidate #25: `serde_with::duplicate_key_impls::error_on_duplicate::PreventDuplicateInsertsMap`
            candidate #26: `serde_with::duplicate_key_impls::error_on_duplicate::PreventDuplicateInsertsSet`
            candidate #27: `serde_with::duplicate_key_impls::first_value_wins::DuplicateInsertsFirstWinsMap`
            candidate #28: `serde_with::duplicate_key_impls::last_value_wins::DuplicateInsertsLastWinsSet`
            candidate #29: `sha2::digest::Mac`
            candidate #30: `spade::triangulation::Triangulation`
            candidate #31: `tendril::tendril::Atomicity`

error[E0599]: no function or associated item named `new` found for struct `RelationshipValidator` in the current scope
  --> packages/sweetmcp-memory/src/memory/semantic/coordinator.rs:48:61
   |
48 |         let relationship_validator = RelationshipValidator::new();
   |                                                             ^^^ function or associated item not found in `RelationshipValidator`
   |
  ::: packages/sweetmcp-memory/src/memory/semantic/relationships/relationship_validator.rs:10:1
   |
10 | pub struct RelationshipValidator;
   | -------------------------------- function or associated item `new` not found for this struct
   |
   = help: items from traits can only be used if the trait is implemented and in scope
   = note: the following traits define an item `new`, perhaps you need to implement one of them:
           candidate #1: `Atomic`
           candidate #2: `Bit`
           candidate #3: `Digest`
           candidate #4: `KeyInit`
           candidate #5: `KeyIvInit`
           candidate #6: `Nullable`
           candidate #7: `UniformSampler`
           candidate #8: `VariableOutput`
           candidate #9: `VariableOutputCore`
           candidate #10: `ahash::HashMapExt`
           candidate #11: `ahash::HashSetExt`
           candidate #12: `aws_lc_rs::aead::BoundKey`
           candidate #13: `ext_sort::chunk::ExternalChunk`
           candidate #14: `itertools::adaptors::coalesce::CountItem`
           candidate #15: `ndarray::DataOwned`
           candidate #16: `ndarray::data_traits::DataOwned`
           candidate #17: `parking_lot_core::thread_parker::ThreadParkerT`
           candidate #18: `petgraph::adj::IndexType`
           candidate #19: `protobuf::message::Message`
           candidate #20: `quick_cache::shard::SharedPlaceholder`
           candidate #21: `quick_cache::shard::SharedPlaceholder`
           candidate #22: `rand::distributions::uniform::UniformSampler`
           candidate #23: `ring::aead::BoundKey`
           candidate #24: `rstar::point::PointExt`
           candidate #25: `serde_with::duplicate_key_impls::error_on_duplicate::PreventDuplicateInsertsMap`
           candidate #26: `serde_with::duplicate_key_impls::error_on_duplicate::PreventDuplicateInsertsSet`
           candidate #27: `serde_with::duplicate_key_impls::first_value_wins::DuplicateInsertsFirstWinsMap`
           candidate #28: `serde_with::duplicate_key_impls::last_value_wins::DuplicateInsertsLastWinsSet`
           candidate #29: `sha2::digest::Mac`
           candidate #30: `spade::triangulation::Triangulation`
           candidate #31: `tendril::tendril::Atomicity`

error[E0599]: no function or associated item named `with_config` found for struct `SemanticMemoryManager` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/coordinator.rs:68:53
    |
68  |         let memory_manager = SemanticMemoryManager::with_config(cleanup_config, optimization_strategy).await?;
    |                                                     ^^^^^^^^^^^ function or associated item not found in `SemanticMemoryManager`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/memory_cleanup.rs:185:1
    |
185 | pub struct SemanticMemoryManager {
    | -------------------------------- function or associated item `with_config` not found for this struct
    |
note: if you're trying to build a new `SemanticMemoryManager` consider using one of the following associated functions:
      SemanticMemoryManager::new
      SemanticMemoryManager::with_defaults
   --> packages/sweetmcp-memory/src/memory/semantic/memory_cleanup.rs:199:5
    |
199 |     pub fn new(cleanup_config: CleanupConfig) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
210 |     pub fn with_defaults() -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no function or associated item named `new` found for struct `ConfidenceCalculator` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/coordinator.rs:69:59
    |
69  |         let confidence_calculator = ConfidenceCalculator::new();
    |                                                           ^^^ function or associated item not found in `ConfidenceCalculator`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/confidence.rs:195:1
    |
195 | pub struct ConfidenceCalculator;
    | ------------------------------- function or associated item `new` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `new`, perhaps you need to implement one of them:
            candidate #1: `Atomic`
            candidate #2: `Bit`
            candidate #3: `Digest`
            candidate #4: `KeyInit`
            candidate #5: `KeyIvInit`
            candidate #6: `Nullable`
            candidate #7: `UniformSampler`
            candidate #8: `VariableOutput`
            candidate #9: `VariableOutputCore`
            candidate #10: `ahash::HashMapExt`
            candidate #11: `ahash::HashSetExt`
            candidate #12: `aws_lc_rs::aead::BoundKey`
            candidate #13: `ext_sort::chunk::ExternalChunk`
            candidate #14: `itertools::adaptors::coalesce::CountItem`
            candidate #15: `ndarray::DataOwned`
            candidate #16: `ndarray::data_traits::DataOwned`
            candidate #17: `parking_lot_core::thread_parker::ThreadParkerT`
            candidate #18: `petgraph::adj::IndexType`
            candidate #19: `protobuf::message::Message`
            candidate #20: `quick_cache::shard::SharedPlaceholder`
            candidate #21: `quick_cache::shard::SharedPlaceholder`
            candidate #22: `rand::distributions::uniform::UniformSampler`
            candidate #23: `ring::aead::BoundKey`
            candidate #24: `rstar::point::PointExt`
            candidate #25: `serde_with::duplicate_key_impls::error_on_duplicate::PreventDuplicateInsertsMap`
            candidate #26: `serde_with::duplicate_key_impls::error_on_duplicate::PreventDuplicateInsertsSet`
            candidate #27: `serde_with::duplicate_key_impls::first_value_wins::DuplicateInsertsFirstWinsMap`
            candidate #28: `serde_with::duplicate_key_impls::last_value_wins::DuplicateInsertsLastWinsSet`
            candidate #29: `sha2::digest::Mac`
            candidate #30: `spade::triangulation::Triangulation`
            candidate #31: `tendril::tendril::Atomicity`

error[E0599]: no function or associated item named `new` found for struct `SemanticItemTypeClassifier` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/coordinator.rs:70:59
    |
70  |         let type_classifier = SemanticItemTypeClassifier::new();
    |                                                           ^^^ function or associated item not found in `SemanticItemTypeClassifier`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_types.rs:193:1
    |
193 | pub struct SemanticItemTypeClassifier;
    | ------------------------------------- function or associated item `new` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `new`, perhaps you need to implement one of them:
            candidate #1: `Atomic`
            candidate #2: `Bit`
            candidate #3: `Digest`
            candidate #4: `KeyInit`
            candidate #5: `KeyIvInit`
            candidate #6: `Nullable`
            candidate #7: `UniformSampler`
            candidate #8: `VariableOutput`
            candidate #9: `VariableOutputCore`
            candidate #10: `ahash::HashMapExt`
            candidate #11: `ahash::HashSetExt`
            candidate #12: `aws_lc_rs::aead::BoundKey`
            candidate #13: `ext_sort::chunk::ExternalChunk`
            candidate #14: `itertools::adaptors::coalesce::CountItem`
            candidate #15: `ndarray::DataOwned`
            candidate #16: `ndarray::data_traits::DataOwned`
            candidate #17: `parking_lot_core::thread_parker::ThreadParkerT`
            candidate #18: `petgraph::adj::IndexType`
            candidate #19: `protobuf::message::Message`
            candidate #20: `quick_cache::shard::SharedPlaceholder`
            candidate #21: `quick_cache::shard::SharedPlaceholder`
            candidate #22: `rand::distributions::uniform::UniformSampler`
            candidate #23: `ring::aead::BoundKey`
            candidate #24: `rstar::point::PointExt`
            candidate #25: `serde_with::duplicate_key_impls::error_on_duplicate::PreventDuplicateInsertsMap`
            candidate #26: `serde_with::duplicate_key_impls::error_on_duplicate::PreventDuplicateInsertsSet`
            candidate #27: `serde_with::duplicate_key_impls::first_value_wins::DuplicateInsertsFirstWinsMap`
            candidate #28: `serde_with::duplicate_key_impls::last_value_wins::DuplicateInsertsLastWinsSet`
            candidate #29: `sha2::digest::Mac`
            candidate #30: `spade::triangulation::Triangulation`
            candidate #31: `tendril::tendril::Atomicity`

error[E0599]: no function or associated item named `new` found for struct `RelationshipValidator` in the current scope
  --> packages/sweetmcp-memory/src/memory/semantic/coordinator.rs:71:61
   |
71 |         let relationship_validator = RelationshipValidator::new();
   |                                                             ^^^ function or associated item not found in `RelationshipValidator`
   |
  ::: packages/sweetmcp-memory/src/memory/semantic/relationships/relationship_validator.rs:10:1
   |
10 | pub struct RelationshipValidator;
   | -------------------------------- function or associated item `new` not found for this struct
   |
   = help: items from traits can only be used if the trait is implemented and in scope
   = note: the following traits define an item `new`, perhaps you need to implement one of them:
           candidate #1: `Atomic`
           candidate #2: `Bit`
           candidate #3: `Digest`
           candidate #4: `KeyInit`
           candidate #5: `KeyIvInit`
           candidate #6: `Nullable`
           candidate #7: `UniformSampler`
           candidate #8: `VariableOutput`
           candidate #9: `VariableOutputCore`
           candidate #10: `ahash::HashMapExt`
           candidate #11: `ahash::HashSetExt`
           candidate #12: `aws_lc_rs::aead::BoundKey`
           candidate #13: `ext_sort::chunk::ExternalChunk`
           candidate #14: `itertools::adaptors::coalesce::CountItem`
           candidate #15: `ndarray::DataOwned`
           candidate #16: `ndarray::data_traits::DataOwned`
           candidate #17: `parking_lot_core::thread_parker::ThreadParkerT`
           candidate #18: `petgraph::adj::IndexType`
           candidate #19: `protobuf::message::Message`
           candidate #20: `quick_cache::shard::SharedPlaceholder`
           candidate #21: `quick_cache::shard::SharedPlaceholder`
           candidate #22: `rand::distributions::uniform::UniformSampler`
           candidate #23: `ring::aead::BoundKey`
           candidate #24: `rstar::point::PointExt`
           candidate #25: `serde_with::duplicate_key_impls::error_on_duplicate::PreventDuplicateInsertsMap`
           candidate #26: `serde_with::duplicate_key_impls::error_on_duplicate::PreventDuplicateInsertsSet`
           candidate #27: `serde_with::duplicate_key_impls::first_value_wins::DuplicateInsertsFirstWinsMap`
           candidate #28: `serde_with::duplicate_key_impls::last_value_wins::DuplicateInsertsLastWinsSet`
           candidate #29: `sha2::digest::Mac`
           candidate #30: `spade::triangulation::Triangulation`
           candidate #31: `tendril::tendril::Atomicity`

error[E0599]: no method named `calculate_for_item` found for struct `ConfidenceCalculator` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/coordinator.rs:93:64
    |
93  |         let calculated_confidence = self.confidence_calculator.calculate_for_item(&updated_item);
    |                                                                ^^^^^^^^^^^^^^^^^^ method not found in `ConfidenceCalculator`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/confidence.rs:195:1
    |
195 | pub struct ConfidenceCalculator;
    | ------------------------------- method `calculate_for_item` not found for this struct

error[E0599]: no method named `calculate_for_item` found for struct `ConfidenceCalculator` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/coordinator.rs:118:64
    |
118 |         let calculated_confidence = self.confidence_calculator.calculate_for_item(&item);
    |                                                                ^^^^^^^^^^^^^^^^^^ method not found in `ConfidenceCalculator`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/confidence.rs:195:1
    |
195 | pub struct ConfidenceCalculator;
    | ------------------------------- method `calculate_for_item` not found for this struct

error[E0599]: no method named `validate_relationship` found for struct `RelationshipValidator` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/coordinator.rs:154:37
    |
154 |         self.relationship_validator.validate_relationship(&relationship)?;
    |         ----------------------------^^^^^^^^^^^^^^^^^^^^^---------------
    |         |                           |
    |         |                           this is an associated function, not a method
    |         help: use associated function syntax instead: `RelationshipValidator::validate_relationship(&relationship)`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/relationships/relationship_validator.rs:10:1
    |
10  | pub struct RelationshipValidator;
    | -------------------------------- method `validate_relationship` not found for this struct
    |
    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter
note: the candidate is defined in an impl for the type `RelationshipValidator`
   --> packages/sweetmcp-memory/src/memory/semantic/relationships/relationship_validator.rs:15:5
    |
15  | /     pub fn validate_relationship(
16  | |         source_id: &str,
17  | |         target_id: &str,
18  | |         relationship_type: &SemanticRelationshipType,
19  | |         source_type: &super::super::item_types::SemanticItemType,
20  | |         target_type: &super::super::item_types::SemanticItemType,
21  | |     ) -> Result<(), ValidationError> {
    | |____________________________________^

error[E0599]: no method named `validate_relationship` found for struct `RelationshipValidator` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/coordinator.rs:178:37
    |
178 |         self.relationship_validator.validate_relationship(&relationship)?;
    |         ----------------------------^^^^^^^^^^^^^^^^^^^^^---------------
    |         |                           |
    |         |                           this is an associated function, not a method
    |         help: use associated function syntax instead: `RelationshipValidator::validate_relationship(&relationship)`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/relationships/relationship_validator.rs:10:1
    |
10  | pub struct RelationshipValidator;
    | -------------------------------- method `validate_relationship` not found for this struct
    |
    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter
note: the candidate is defined in an impl for the type `RelationshipValidator`
   --> packages/sweetmcp-memory/src/memory/semantic/relationships/relationship_validator.rs:15:5
    |
15  | /     pub fn validate_relationship(
16  | |         source_id: &str,
17  | |         target_id: &str,
18  | |         relationship_type: &SemanticRelationshipType,
19  | |         source_type: &super::super::item_types::SemanticItemType,
20  | |         target_type: &super::super::item_types::SemanticItemType,
21  | |     ) -> Result<(), ValidationError> {
    | |____________________________________^

error[E0277]: the trait bound `item_types::SemanticItemType: Hash` is not satisfied
   --> packages/sweetmcp-memory/src/memory/semantic/coordinator.rs:276:25
    |
276 |             *type_stats.entry(item.item_type).or_insert(0) += 1;
    |                         ^^^^^ the trait `Hash` is not implemented for `item_types::SemanticItemType`
    |
note: required by a bound in `std::collections::HashMap::<K, V, S>::entry`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:763:13
    |
763 |     K: Eq + Hash,
    |             ^^^^ required by this bound in `HashMap::<K, V, S>::entry`
...
883 |     pub fn entry(&mut self, key: K) -> Entry<'_, K, V> {
    |            ----- required by a bound in this associated function
help: consider annotating `item_types::SemanticItemType` with `#[derive(Hash)]`
   --> packages/sweetmcp-memory/src/memory/semantic/item_types.rs:11:1
    |
11  + #[derive(Hash)]
12  | pub enum SemanticItemType {
    |

error[E0599]: no method named `calculate_statistics` found for struct `ConfidenceCalculator` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/coordinator.rs:280:59
    |
280 |         let confidence_stats = self.confidence_calculator.calculate_statistics(items.values());
    |                                                           ^^^^^^^^^^^^^^^^^^^^ method not found in `ConfidenceCalculator`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/confidence.rs:195:1
    |
195 | pub struct ConfidenceCalculator;
    | ------------------------------- method `calculate_statistics` not found for this struct

error[E0277]: the trait bound `semantic::relationships::relationship_types::SemanticRelationshipType: Hash` is not satisfied
   --> packages/sweetmcp-memory/src/memory/semantic/coordinator.rs:285:38
    |
285 |             *relationship_type_stats.entry(relationship.relationship_type).or_insert(0) += 1;
    |                                      ^^^^^ the trait `Hash` is not implemented for `semantic::relationships::relationship_types::SemanticRelationshipType`
    |
note: required by a bound in `std::collections::HashMap::<K, V, S>::entry`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:763:13
    |
763 |     K: Eq + Hash,
    |             ^^^^ required by this bound in `HashMap::<K, V, S>::entry`
...
883 |     pub fn entry(&mut self, key: K) -> Entry<'_, K, V> {
    |            ----- required by a bound in this associated function
help: consider annotating `semantic::relationships::relationship_types::SemanticRelationshipType` with `#[derive(Hash)]`
   --> packages/sweetmcp-memory/src/memory/semantic/relationships/relationship_types.rs:10:1
    |
10  + #[derive(Hash)]
11  | pub enum SemanticRelationshipType {
    |

error[E0599]: no method named `get_statistics` found for struct `SemanticMemoryManager` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/coordinator.rs:289:48
    |
289 |         let memory_stats = self.memory_manager.get_statistics().await?;
    |                                                ^^^^^^^^^^^^^^
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/memory_cleanup.rs:185:1
    |
185 | pub struct SemanticMemoryManager {
    | -------------------------------- method `get_statistics` not found for this struct
    |
help: there is a method `statistics` with a similar name
    |
289 -         let memory_stats = self.memory_manager.get_statistics().await?;
289 +         let memory_stats = self.memory_manager.statistics().await?;
    |

warning: unused variable: `item`
   --> packages/sweetmcp-memory/src/memory/semantic/coordinator.rs:327:29
    |
327 |                 if let Some(item) = items.remove(&id) {
    |                             ^^^^ help: if this is intentional, prefix it with an underscore: `_item`

error[E0599]: no method named `perform_health_check` found for struct `SemanticMemoryManager` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/coordinator.rs:391:49
    |
391 |         let memory_health = self.memory_manager.perform_health_check().await?;
    |                                                 ^^^^^^^^^^^^^^^^^^^^ method not found in `SemanticMemoryManager`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/memory_cleanup.rs:185:1
    |
185 | pub struct SemanticMemoryManager {
    | -------------------------------- method `perform_health_check` not found for this struct

error[E0609]: no field `max_age_days` on type `memory_manager_core::config::config::CleanupConfig`
   --> packages/sweetmcp-memory/src/memory/semantic/memory_cleanup.rs:317:87
    |
317 |         let cutoff_time = SystemTime::now() - Duration::from_secs(self.cleanup_config.max_age_days * 24 * 3600);
    |                                                                                       ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `batch_size`, `max_cleanup_time_ms`, `aggressive`, `memory_pressure_based`, `memory_pressure_threshold` ... and 3 others

error[E0609]: no field `max_unused_days` on type `memory_manager_core::config::config::CleanupConfig`
   --> packages/sweetmcp-memory/src/memory/semantic/memory_cleanup.rs:318:89
    |
318 |         let unused_cutoff = SystemTime::now() - Duration::from_secs(self.cleanup_config.max_unused_days * 24 * 3600);
    |                                                                                         ^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `batch_size`, `max_cleanup_time_ms`, `aggressive`, `memory_pressure_based`, `memory_pressure_threshold` ... and 3 others

error[E0609]: no field `preserve_high_confidence` on type `memory_manager_core::config::config::CleanupConfig`
   --> packages/sweetmcp-memory/src/memory/semantic/memory_cleanup.rs:327:55
    |
327 |             if should_remove && (!self.cleanup_config.preserve_high_confidence || item.confidence < ConfidenceLevel::High) {
    |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `batch_size`, `max_cleanup_time_ms`, `aggressive`, `memory_pressure_based`, `memory_pressure_threshold` ... and 3 others

error[E0609]: no field `max_age_days` on type `memory_manager_core::config::config::CleanupConfig`
   --> packages/sweetmcp-memory/src/memory/semantic/memory_cleanup.rs:352:87
    |
352 |         let cutoff_time = SystemTime::now() - Duration::from_secs(self.cleanup_config.max_age_days * 24 * 3600);
    |                                                                                       ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `batch_size`, `max_cleanup_time_ms`, `aggressive`, `memory_pressure_based`, `memory_pressure_threshold` ... and 3 others

error[E0609]: no field `max_unused_days` on type `memory_manager_core::config::config::CleanupConfig`
   --> packages/sweetmcp-memory/src/memory/semantic/memory_cleanup.rs:353:89
    |
353 |         let unused_cutoff = SystemTime::now() - Duration::from_secs(self.cleanup_config.max_unused_days * 24 * 3600);
    |                                                                                         ^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `batch_size`, `max_cleanup_time_ms`, `aggressive`, `memory_pressure_based`, `memory_pressure_threshold` ... and 3 others

error[E0609]: no field `min_confidence_threshold` on type `memory_manager_core::config::config::CleanupConfig`
   --> packages/sweetmcp-memory/src/memory/semantic/memory_cleanup.rs:359:58
    |
359 |                 || item.confidence < self.cleanup_config.min_confidence_threshold
    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `batch_size`, `max_cleanup_time_ms`, `aggressive`, `memory_pressure_based`, `memory_pressure_threshold` ... and 3 others

error[E0609]: no field `max_age_days` on type `memory_manager_core::config::config::CleanupConfig`
   --> packages/sweetmcp-memory/src/memory/semantic/memory_cleanup.rs:418:87
    |
418 |         let cutoff_time = SystemTime::now() - Duration::from_secs(self.cleanup_config.max_age_days * 24 * 3600);
    |                                                                                       ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `batch_size`, `max_cleanup_time_ms`, `aggressive`, `memory_pressure_based`, `memory_pressure_threshold` ... and 3 others

error[E0609]: no field `min_confidence_threshold` on type `memory_manager_core::config::config::CleanupConfig`
   --> packages/sweetmcp-memory/src/memory/semantic/memory_cleanup.rs:445:54
    |
445 |             if item.confidence < self.cleanup_config.min_confidence_threshold {
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `batch_size`, `max_cleanup_time_ms`, `aggressive`, `memory_pressure_based`, `memory_pressure_threshold` ... and 3 others

error[E0609]: no field `max_unused_days` on type `memory_manager_core::config::config::CleanupConfig`
   --> packages/sweetmcp-memory/src/memory/semantic/memory_cleanup.rs:472:89
    |
472 |         let unused_cutoff = SystemTime::now() - Duration::from_secs(self.cleanup_config.max_unused_days * 24 * 3600);
    |                                                                                         ^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `batch_size`, `max_cleanup_time_ms`, `aggressive`, `memory_pressure_based`, `memory_pressure_threshold` ... and 3 others

error[E0616]: field `metrics` of struct `operations_core::optimization_executor::OptimizationExecutor` is private
  --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_implementations.rs:65:14
   |
65 |         self.metrics.record_execution(
   |              ^^^^^^^ private field
   |
help: a method `metrics` also exists, call it with parentheses
   |
65 |         self.metrics().record_execution(
   |                     ++

error[E0616]: field `operation_cache` of struct `operations_core::optimization_executor::OptimizationExecutor` is private
  --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_implementations.rs:96:43
   |
96 |         if let Some(cached_result) = self.operation_cache.get(&recommendation.recommendation_type) {
   |                                           ^^^^^^^^^^^^^^^ private field
   |
help: a method `operation_cache` also exists, call it with parentheses
   |
96 |         if let Some(cached_result) = self.operation_cache().get(&recommendation.recommendation_type) {
   |                                                          ++

error[E0616]: field `operation_cache` of struct `operations_core::optimization_executor::OptimizationExecutor` is private
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_implementations.rs:140:14
    |
140 |         self.operation_cache.insert(
    |              ^^^^^^^^^^^^^^^ private field
    |
help: a method `operation_cache` also exists, call it with parentheses
    |
140 |         self.operation_cache().insert(
    |                             ++

error[E0277]: cannot multiply `usize` by `{float}`
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_implementations.rs:217:71
    |
217 |         let improvement = ((initial_size - final_size) / initial_size * 100.0).max(0.0);
    |                                                                       ^ no implementation for `usize * {float}`
    |
    = help: the trait `std::ops::Mul<{float}>` is not implemented for `usize`
    = help: the following other types implement trait `std::ops::Mul<Rhs>`:
              `&usize` implements `std::ops::Mul<&Complex<usize>>`
              `&usize` implements `std::ops::Mul<&num_bigint::bigint::BigInt>`
              `&usize` implements `std::ops::Mul<&num_bigint::biguint::BigUint>`
              `&usize` implements `std::ops::Mul<Complex<usize>>`
              `&usize` implements `std::ops::Mul<num_bigint::bigint::BigInt>`
              `&usize` implements `std::ops::Mul<num_bigint::biguint::BigUint>`
              `&usize` implements `std::ops::Mul<usize>`
              `&usize` implements `std::ops::Mul`
            and 17 others

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_implementations.rs:223:13
    |
202 |       ) -> Result<SingleOptimizationResult> {
    |            -------------------------------- expected `usize` because of return type
...
223 | /             format!("Compressed {} items, reduced memory usage by {:.1}%", 
224 | |                    compressed_count, improvement),
    | |_________________________________________________^ expected `usize`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_implementations.rs:225:13
    |
219 |         Ok(SingleOptimizationResult::success(
    |            --------------------------------- arguments to this function are incorrect
...
225 |             compressed_count > 0,
    |             ^^^^^^^^^^^^^^^^^^^^ expected `usize`, found `bool`
    |
note: associated function defined here
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_core/optimization_results.rs:32:12
    |
32  |     pub fn success(
    |            ^^^^^^^
...
37  |         items_processed: usize,
    |         ----------------------

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_implementations.rs:255:13
    |
234 |       ) -> Result<SingleOptimizationResult> {
    |            -------------------------------- expected `usize` because of return type
...
255 | /             format!("Optimized {} items for cache efficiency, improved by {:.1}%", 
256 | |                    optimized_count, improvement),
    | |________________________________________________^ expected `usize`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_implementations.rs:257:13
    |
251 |         Ok(SingleOptimizationResult::success(
    |            --------------------------------- arguments to this function are incorrect
...
257 |             optimized_count > 0,
    |             ^^^^^^^^^^^^^^^^^^^ expected `usize`, found `bool`
    |
note: associated function defined here
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_core/optimization_results.rs:32:12
    |
32  |     pub fn success(
    |            ^^^^^^^
...
37  |         items_processed: usize,
    |         ----------------------

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_implementations.rs:292:13
    |
266 |       ) -> Result<SingleOptimizationResult> {
    |            -------------------------------- expected `usize` because of return type
...
292 | /             format!("Rebuilt {} indexes, improved efficiency by {:.1}%", 
293 | |                    rebuilt_indexes, improvement),
    | |________________________________________________^ expected `usize`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_implementations.rs:294:13
    |
288 |         Ok(SingleOptimizationResult::success(
    |            --------------------------------- arguments to this function are incorrect
...
294 |             rebuilt_indexes > 0,
    |             ^^^^^^^^^^^^^^^^^^^ expected `usize`, found `bool`
    |
note: associated function defined here
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_core/optimization_results.rs:32:12
    |
32  |     pub fn success(
    |            ^^^^^^^
...
37  |         items_processed: usize,
    |         ----------------------

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_implementations.rs:329:13
    |
303 |       ) -> Result<SingleOptimizationResult> {
    |            -------------------------------- expected `usize` because of return type
...
329 | /             format!("Reallocated {} memory blocks, improved efficiency by {:.1}%", 
330 | |                    reallocated_blocks, improvement),
    | |___________________________________________________^ expected `usize`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_implementations.rs:331:13
    |
325 |         Ok(SingleOptimizationResult::success(
    |            --------------------------------- arguments to this function are incorrect
...
331 |             reallocated_blocks > 0,
    |             ^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found `bool`
    |
note: associated function defined here
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_core/optimization_results.rs:32:12
    |
32  |     pub fn success(
    |            ^^^^^^^
...
37  |         items_processed: usize,
    |         ----------------------

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_implementations.rs:365:13
    |
340 |       ) -> Result<SingleOptimizationResult> {
    |            -------------------------------- expected `usize` because of return type
...
365 | /             format!("Optimized {} access patterns, improved efficiency by {:.1}%", 
366 | |                    optimized_patterns, improvement),
    | |___________________________________________________^ expected `usize`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_implementations.rs:367:13
    |
361 |         Ok(SingleOptimizationResult::success(
    |            --------------------------------- arguments to this function are incorrect
...
367 |             optimized_patterns > 0,
    |             ^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found `bool`
    |
note: associated function defined here
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_core/optimization_results.rs:32:12
    |
32  |     pub fn success(
    |            ^^^^^^^
...
37  |         items_processed: usize,
    |         ----------------------

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_implementations.rs:406:13
    |
376 |       ) -> Result<SingleOptimizationResult> {
    |            -------------------------------- expected `usize` because of return type
...
406 | /             format!("Pruned {} weak relationships, reduced count by {:.1}%", 
407 | |                    pruned_count, improvement),
    | |_____________________________________________^ expected `usize`, found `String`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_implementations.rs:408:13
    |
402 |         Ok(SingleOptimizationResult::success(
    |            --------------------------------- arguments to this function are incorrect
...
408 |             pruned_count > 0,
    |             ^^^^^^^^^^^^^^^^ expected `usize`, found `bool`
    |
note: associated function defined here
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_core/optimization_results.rs:32:12
    |
32  |     pub fn success(
    |            ^^^^^^^
...
37  |         items_processed: usize,
    |         ----------------------

error[E0599]: no function or associated item named `new` found for struct `SingleOptimizationResult` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_implementations.rs:442:38
    |
442 |         Ok(SingleOptimizationResult::new(
    |                                      ^^^ function or associated item not found in `SingleOptimizationResult`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_core/optimization_results.rs:12:1
    |
12  | pub struct SingleOptimizationResult {
    | ----------------------------------- function or associated item `new` not found for this struct
    |
note: if you're trying to build a new `SingleOptimizationResult` consider using one of the following associated functions:
      SingleOptimizationResult::success
      SingleOptimizationResult::failure
      SingleOptimizationResult::partial_success
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_core/optimization_results.rs:32:5
    |
32  | /     pub fn success(
33  | |         optimization_type: RecommendationType,
34  | |         improvement_achieved: f64,
35  | |         execution_time: Duration,
36  | |         memory_saved: usize,
37  | |         items_processed: usize,
38  | |     ) -> Self {
    | |_____________^
...
52  | /     pub fn failure(
53  | |         optimization_type: RecommendationType,
54  | |         execution_time: Duration,
55  | |         error_message: String,
56  | |     ) -> Self {
    | |_____________^
...
70  | /     pub fn partial_success(
71  | |         optimization_type: RecommendationType,
72  | |         improvement_achieved: f64,
73  | |         execution_time: Duration,
...   |
76  | |         warning_message: String,
77  | |     ) -> Self {
    | |_____________^
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `new`, perhaps you need to implement one of them:
            candidate #1: `Atomic`
            candidate #2: `Bit`
            candidate #3: `Digest`
            candidate #4: `KeyInit`
            candidate #5: `KeyIvInit`
            candidate #6: `Nullable`
            candidate #7: `UniformSampler`
            candidate #8: `VariableOutput`
            candidate #9: `VariableOutputCore`
            candidate #10: `ahash::HashMapExt`
            candidate #11: `ahash::HashSetExt`
            candidate #12: `aws_lc_rs::aead::BoundKey`
            candidate #13: `ext_sort::chunk::ExternalChunk`
            candidate #14: `itertools::adaptors::coalesce::CountItem`
            candidate #15: `ndarray::DataOwned`
            candidate #16: `ndarray::data_traits::DataOwned`
            candidate #17: `parking_lot_core::thread_parker::ThreadParkerT`
            candidate #18: `petgraph::adj::IndexType`
            candidate #19: `protobuf::message::Message`
            candidate #20: `quick_cache::shard::SharedPlaceholder`
            candidate #21: `quick_cache::shard::SharedPlaceholder`
            candidate #22: `rand::distributions::uniform::UniformSampler`
            candidate #23: `ring::aead::BoundKey`
            candidate #24: `rstar::point::PointExt`
            candidate #25: `serde_with::duplicate_key_impls::error_on_duplicate::PreventDuplicateInsertsMap`
            candidate #26: `serde_with::duplicate_key_impls::error_on_duplicate::PreventDuplicateInsertsSet`
            candidate #27: `serde_with::duplicate_key_impls::first_value_wins::DuplicateInsertsFirstWinsMap`
            candidate #28: `serde_with::duplicate_key_impls::last_value_wins::DuplicateInsertsLastWinsSet`
            candidate #29: `sha2::digest::Mac`
            candidate #30: `spade::triangulation::Triangulation`
            candidate #31: `tendril::tendril::Atomicity`

error[E0599]: no function or associated item named `new` found for struct `SingleOptimizationResult` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_implementations.rs:486:38
    |
486 |         Ok(SingleOptimizationResult::new(
    |                                      ^^^ function or associated item not found in `SingleOptimizationResult`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_core/optimization_results.rs:12:1
    |
12  | pub struct SingleOptimizationResult {
    | ----------------------------------- function or associated item `new` not found for this struct
    |
note: if you're trying to build a new `SingleOptimizationResult` consider using one of the following associated functions:
      SingleOptimizationResult::success
      SingleOptimizationResult::failure
      SingleOptimizationResult::partial_success
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_core/optimization_results.rs:32:5
    |
32  | /     pub fn success(
33  | |         optimization_type: RecommendationType,
34  | |         improvement_achieved: f64,
35  | |         execution_time: Duration,
36  | |         memory_saved: usize,
37  | |         items_processed: usize,
38  | |     ) -> Self {
    | |_____________^
...
52  | /     pub fn failure(
53  | |         optimization_type: RecommendationType,
54  | |         execution_time: Duration,
55  | |         error_message: String,
56  | |     ) -> Self {
    | |_____________^
...
70  | /     pub fn partial_success(
71  | |         optimization_type: RecommendationType,
72  | |         improvement_achieved: f64,
73  | |         execution_time: Duration,
...   |
76  | |         warning_message: String,
77  | |     ) -> Self {
    | |_____________^
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `new`, perhaps you need to implement one of them:
            candidate #1: `Atomic`
            candidate #2: `Bit`
            candidate #3: `Digest`
            candidate #4: `KeyInit`
            candidate #5: `KeyIvInit`
            candidate #6: `Nullable`
            candidate #7: `UniformSampler`
            candidate #8: `VariableOutput`
            candidate #9: `VariableOutputCore`
            candidate #10: `ahash::HashMapExt`
            candidate #11: `ahash::HashSetExt`
            candidate #12: `aws_lc_rs::aead::BoundKey`
            candidate #13: `ext_sort::chunk::ExternalChunk`
            candidate #14: `itertools::adaptors::coalesce::CountItem`
            candidate #15: `ndarray::DataOwned`
            candidate #16: `ndarray::data_traits::DataOwned`
            candidate #17: `parking_lot_core::thread_parker::ThreadParkerT`
            candidate #18: `petgraph::adj::IndexType`
            candidate #19: `protobuf::message::Message`
            candidate #20: `quick_cache::shard::SharedPlaceholder`
            candidate #21: `quick_cache::shard::SharedPlaceholder`
            candidate #22: `rand::distributions::uniform::UniformSampler`
            candidate #23: `ring::aead::BoundKey`
            candidate #24: `rstar::point::PointExt`
            candidate #25: `serde_with::duplicate_key_impls::error_on_duplicate::PreventDuplicateInsertsMap`
            candidate #26: `serde_with::duplicate_key_impls::error_on_duplicate::PreventDuplicateInsertsSet`
            candidate #27: `serde_with::duplicate_key_impls::first_value_wins::DuplicateInsertsFirstWinsMap`
            candidate #28: `serde_with::duplicate_key_impls::last_value_wins::DuplicateInsertsLastWinsSet`
            candidate #29: `sha2::digest::Mac`
            candidate #30: `spade::triangulation::Triangulation`
            candidate #31: `tendril::tendril::Atomicity`

error[E0599]: no function or associated item named `new` found for struct `SingleOptimizationResult` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_implementations.rs:520:38
    |
520 |         Ok(SingleOptimizationResult::new(
    |                                      ^^^ function or associated item not found in `SingleOptimizationResult`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_core/optimization_results.rs:12:1
    |
12  | pub struct SingleOptimizationResult {
    | ----------------------------------- function or associated item `new` not found for this struct
    |
note: if you're trying to build a new `SingleOptimizationResult` consider using one of the following associated functions:
      SingleOptimizationResult::success
      SingleOptimizationResult::failure
      SingleOptimizationResult::partial_success
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_core/optimization_results.rs:32:5
    |
32  | /     pub fn success(
33  | |         optimization_type: RecommendationType,
34  | |         improvement_achieved: f64,
35  | |         execution_time: Duration,
36  | |         memory_saved: usize,
37  | |         items_processed: usize,
38  | |     ) -> Self {
    | |_____________^
...
52  | /     pub fn failure(
53  | |         optimization_type: RecommendationType,
54  | |         execution_time: Duration,
55  | |         error_message: String,
56  | |     ) -> Self {
    | |_____________^
...
70  | /     pub fn partial_success(
71  | |         optimization_type: RecommendationType,
72  | |         improvement_achieved: f64,
73  | |         execution_time: Duration,
...   |
76  | |         warning_message: String,
77  | |     ) -> Self {
    | |_____________^
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `new`, perhaps you need to implement one of them:
            candidate #1: `Atomic`
            candidate #2: `Bit`
            candidate #3: `Digest`
            candidate #4: `KeyInit`
            candidate #5: `KeyIvInit`
            candidate #6: `Nullable`
            candidate #7: `UniformSampler`
            candidate #8: `VariableOutput`
            candidate #9: `VariableOutputCore`
            candidate #10: `ahash::HashMapExt`
            candidate #11: `ahash::HashSetExt`
            candidate #12: `aws_lc_rs::aead::BoundKey`
            candidate #13: `ext_sort::chunk::ExternalChunk`
            candidate #14: `itertools::adaptors::coalesce::CountItem`
            candidate #15: `ndarray::DataOwned`
            candidate #16: `ndarray::data_traits::DataOwned`
            candidate #17: `parking_lot_core::thread_parker::ThreadParkerT`
            candidate #18: `petgraph::adj::IndexType`
            candidate #19: `protobuf::message::Message`
            candidate #20: `quick_cache::shard::SharedPlaceholder`
            candidate #21: `quick_cache::shard::SharedPlaceholder`
            candidate #22: `rand::distributions::uniform::UniformSampler`
            candidate #23: `ring::aead::BoundKey`
            candidate #24: `rstar::point::PointExt`
            candidate #25: `serde_with::duplicate_key_impls::error_on_duplicate::PreventDuplicateInsertsMap`
            candidate #26: `serde_with::duplicate_key_impls::error_on_duplicate::PreventDuplicateInsertsSet`
            candidate #27: `serde_with::duplicate_key_impls::first_value_wins::DuplicateInsertsFirstWinsMap`
            candidate #28: `serde_with::duplicate_key_impls::last_value_wins::DuplicateInsertsLastWinsSet`
            candidate #29: `sha2::digest::Mac`
            candidate #30: `spade::triangulation::Triangulation`
            candidate #31: `tendril::tendril::Atomicity`

error[E0599]: no method named `get_summary` found for struct `operations_core::optimization_results::OptimizationResult` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/mod.rs:165:59
    |
165 |         info!("Memory optimization completed: {}", result.get_summary());
    |                                                           ^^^^^^^^^^^
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_core/optimization_results.rs:221:1
    |
221 | pub struct OptimizationResult {
    | ----------------------------- method `get_summary` not found for this struct
    |
help: there is a method `summary` with a similar name
    |
165 -         info!("Memory optimization completed: {}", result.get_summary());
165 +         info!("Memory optimization completed: {}", result.summary());
    |

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/memory/storage_coordinator.rs:88:9
   |
88 | /         self.vector_store
89 | |             .search(query_embedding, top_k, filter.map(|f| f.clone()))
90 | |             .await
   | |__________________^ expected `Result<Vec<SearchResult>, Error>`, found `Result<Vec<VectorSearchResult>, Error>`
   |
   = note: expected enum `std::result::Result<Vec<vector::vector_search::core::SearchResult>, _>`
              found enum `std::result::Result<Vec<vector::VectorSearchResult>, _>`

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/vector/vector_search/vector_search.rs:222:13
    |
221 |         match vector_data {
    |               ----------- this expression has type `(Vec<f32>, Option<HashMap<String, Value>>)`
222 |             Ok((vector, _metadata)) => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^ expected `(Vec<f32>, Option<HashMap<String, ...>>)`, found `Result<_, _>`
    |
    = note: expected tuple `(Vec<f32>, std::option::Option<std::collections::HashMap<std::string::String, surrealdb::sql::Value>>)`
                found enum `std::result::Result<_, _>`
    = note: the full name for the type has been written to '/Volumes/samsung_t9/sweetmcp/target/debug/deps/sweetmcp_memory-4002f0e13ee93e6a.long-type-8464736405909198749.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/vector/vector_search/vector_search.rs:226:13
    |
221 |         match vector_data {
    |               ----------- this expression has type `(Vec<f32>, Option<HashMap<String, Value>>)`
...
226 |             None => Ok(Vec::new()),
    |             ^^^^ expected `(Vec<f32>, Option<HashMap<String, ...>>)`, found `Option<_>`
    |
    = note: expected tuple `(Vec<f32>, std::option::Option<std::collections::HashMap<std::string::String, surrealdb::sql::Value>>)`
                found enum `std::option::Option<_>`
    = note: the full name for the type has been written to '/Volumes/samsung_t9/sweetmcp/target/debug/deps/sweetmcp_memory-4002f0e13ee93e6a.long-type-8464736405909198749.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0277]: the size for values of type `[f32]` cannot be known at compilation time
   --> packages/sweetmcp-memory/src/vector/vector_search/vector_search.rs:222:17
    |
222 |             Ok((vector, _metadata)) => {
    |                 ^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `[f32]`
    = note: all local variables must have a statically known size

warning: variable does not need to be mutable
   --> packages/sweetmcp-memory/src/vector/vector_search/hybrid_search.rs:283:21
    |
283 |                 let mut mutable_self = unsafe { &mut *(self as *const _ as *mut Self) };
    |                     ----^^^^^^^^^^^^
    |                     |
    |                     help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `vector_results`
   --> packages/sweetmcp-memory/src/vector/vector_search/hybrid_search.rs:322:17
    |
322 |             let vector_results = self.vector_search.search_by_text(query, options.clone()).await?;
    |                 ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_vector_results`

warning: unused variable: `keyword_results`
   --> packages/sweetmcp-memory/src/vector/vector_search/hybrid_search.rs:327:17
    |
327 |             let keyword_results = (self.keyword_search)(query, options.clone()).await?;
    |                 ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_keyword_results`

error[E0624]: method `validate_vector_dimensions` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:116:14
    |
116 |         self.validate_vector_dimensions(&vector)?;
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^ private method
    |
   ::: packages/sweetmcp-memory/src/vector/async_vector_core.rs:108:5
    |
108 |     fn validate_vector_dimensions(&self, vector: &[f32]) -> Result<(), Error> {
    |     ------------------------------------------------------------------------- private method defined here

error[E0624]: method `normalize_vector` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:119:14
    |
119 |         self.normalize_vector(&mut vector);
    |              ^^^^^^^^^^^^^^^^ private method
    |
   ::: packages/sweetmcp-memory/src/vector/async_vector_core.rs:131:5
    |
131 |     fn normalize_vector(&self, vector: &mut [f32]) {
    |     ---------------------------------------------- private method defined here

error[E0616]: field `dimension_cache` of struct `async_vector_core::InMemoryVectorStore` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:123:14
    |
123 |         self.dimension_cache.insert(id.clone(), dimensions);
    |              ^^^^^^^^^^^^^^^ private field

error[E0616]: field `vectors` of struct `async_vector_core::InMemoryVectorStore` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:126:14
    |
126 |         self.vectors.insert(id.clone(), vector);
    |              ^^^^^^^ private field

error[E0616]: field `metadata` of struct `async_vector_core::InMemoryVectorStore` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:130:18
    |
130 |             self.metadata.insert(id.clone(), meta);
    |                  ^^^^^^^^ private field

error[E0624]: method `increment_operations` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:134:14
    |
134 |         self.increment_operations();
    |              ^^^^^^^^^^^^^^^^^^^^ private method
    |
   ::: packages/sweetmcp-memory/src/vector/async_vector_core.rs:102:5
    |
102 |     fn increment_operations(&self) {
    |     ------------------------------ private method defined here

error[E0616]: field `metrics` of struct `async_vector_core::InMemoryVectorStore` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:135:14
    |
135 |         self.metrics.increment_adds();
    |              ^^^^^^^ private field
    |
help: a method `metrics` also exists, call it with parentheses
    |
135 |         self.metrics().increment_adds();
    |                     ++

error[E0616]: field `vectors` of struct `async_vector_core::InMemoryVectorStore` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:147:27
    |
147 |         let vector = self.vectors.get(id).map(|v| v.clone());
    |                           ^^^^^^^ private field

error[E0616]: field `metadata` of struct `async_vector_core::InMemoryVectorStore` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:148:29
    |
148 |         let metadata = self.metadata.get(id).map(|m| m.clone());
    |                             ^^^^^^^^ private field

error[E0624]: method `increment_operations` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:150:14
    |
150 |         self.increment_operations();
    |              ^^^^^^^^^^^^^^^^^^^^ private method
    |
   ::: packages/sweetmcp-memory/src/vector/async_vector_core.rs:102:5
    |
102 |     fn increment_operations(&self) {
    |     ------------------------------ private method defined here

error[E0616]: field `vectors` of struct `async_vector_core::InMemoryVectorStore` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:167:35
    |
167 |         let vector_removed = self.vectors.remove(id).is_some();
    |                                   ^^^^^^^ private field

error[E0616]: field `metadata` of struct `async_vector_core::InMemoryVectorStore` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:168:37
    |
168 |         let metadata_removed = self.metadata.remove(id).is_some();
    |                                     ^^^^^^^^ private field

error[E0616]: field `dimension_cache` of struct `async_vector_core::InMemoryVectorStore` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:169:14
    |
169 |         self.dimension_cache.remove(id);
    |              ^^^^^^^^^^^^^^^ private field

error[E0624]: method `increment_operations` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:174:18
    |
174 |             self.increment_operations();
    |                  ^^^^^^^^^^^^^^^^^^^^ private method
    |
   ::: packages/sweetmcp-memory/src/vector/async_vector_core.rs:102:5
    |
102 |     fn increment_operations(&self) {
    |     ------------------------------ private method defined here

error[E0616]: field `metrics` of struct `async_vector_core::InMemoryVectorStore` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:175:18
    |
175 |             self.metrics.increment_removals();
    |                  ^^^^^^^ private field
    |
help: a method `metrics` also exists, call it with parentheses
    |
175 |             self.metrics().increment_removals();
    |                         ++

error[E0624]: method `validate_vector_dimensions` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:194:24
    |
194 |             match self.validate_vector_dimensions(&vector) {
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ private method
    |
   ::: packages/sweetmcp-memory/src/vector/async_vector_core.rs:108:5
    |
108 |     fn validate_vector_dimensions(&self, vector: &[f32]) -> Result<(), Error> {
    |     ------------------------------------------------------------------------- private method defined here

error[E0624]: method `normalize_vector` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:197:26
    |
197 |                     self.normalize_vector(&mut vector);
    |                          ^^^^^^^^^^^^^^^^ private method
    |
   ::: packages/sweetmcp-memory/src/vector/async_vector_core.rs:131:5
    |
131 |     fn normalize_vector(&self, vector: &mut [f32]) {
    |     ---------------------------------------------- private method defined here

error[E0616]: field `dimension_cache` of struct `async_vector_core::InMemoryVectorStore` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:201:26
    |
201 |                     self.dimension_cache.insert(id.clone(), dimensions);
    |                          ^^^^^^^^^^^^^^^ private field

error[E0616]: field `vectors` of struct `async_vector_core::InMemoryVectorStore` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:204:26
    |
204 |                     self.vectors.insert(id.clone(), vector);
    |                          ^^^^^^^ private field

error[E0616]: field `metadata` of struct `async_vector_core::InMemoryVectorStore` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:208:30
    |
208 |                         self.metadata.insert(id.clone(), meta);
    |                              ^^^^^^^^ private field

error[E0624]: method `increment_operations` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:222:18
    |
222 |             self.increment_operations();
    |                  ^^^^^^^^^^^^^^^^^^^^ private method
    |
   ::: packages/sweetmcp-memory/src/vector/async_vector_core.rs:102:5
    |
102 |     fn increment_operations(&self) {
    |     ------------------------------ private method defined here

error[E0616]: field `metrics` of struct `async_vector_core::InMemoryVectorStore` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:223:18
    |
223 |             self.metrics.increment_adds();
    |                  ^^^^^^^ private field
    |
help: a method `metrics` also exists, call it with parentheses
    |
223 |             self.metrics().increment_adds();
    |                         ++

error[E0599]: no variant or associated item named `BatchOperationFailed` found for enum `utils::error::Error` in the current scope
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:233:31
    |
233 |             return Err(Error::BatchOperationFailed(
    |                               ^^^^^^^^^^^^^^^^^^^^ variant or associated item not found in `utils::error::Error`
    |
   ::: packages/sweetmcp-memory/src/utils/error.rs:14:1
    |
14  | pub enum Error {
    | -------------- variant or associated item `BatchOperationFailed` not found for this enum

error[E0616]: field `vectors` of struct `async_vector_core::InMemoryVectorStore` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:250:18
    |
250 |         if !self.vectors.contains_key(id) {
    |                  ^^^^^^^ private field

error[E0599]: no variant or associated item named `VectorNotFound` found for enum `utils::error::Error` in the current scope
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:251:31
    |
251 |             return Err(Error::VectorNotFound(id.to_string()));
    |                               ^^^^^^^^^^^^^^ variant or associated item not found in `utils::error::Error`
    |
   ::: packages/sweetmcp-memory/src/utils/error.rs:14:1
    |
14  | pub enum Error {
    | -------------- variant or associated item `VectorNotFound` not found for this enum

error[E0616]: field `metadata` of struct `async_vector_core::InMemoryVectorStore` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:255:14
    |
255 |         self.metadata.insert(id.to_string(), metadata);
    |              ^^^^^^^^ private field

error[E0624]: method `increment_operations` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:257:14
    |
257 |         self.increment_operations();
    |              ^^^^^^^^^^^^^^^^^^^^ private method
    |
   ::: packages/sweetmcp-memory/src/vector/async_vector_core.rs:102:5
    |
102 |     fn increment_operations(&self) {
    |     ------------------------------ private method defined here

error[E0616]: field `metadata` of struct `async_vector_core::InMemoryVectorStore` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:273:27
    |
273 |         for entry in self.metadata.iter() {
    |                           ^^^^^^^^ private field

error[E0616]: field `vectors` of struct `async_vector_core::InMemoryVectorStore` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:278:44
    |
278 |                 if let Some(vector) = self.vectors.get(id) {
    |                                            ^^^^^^^ private field

error[E0624]: method `validate_vector_dimensions` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:314:14
    |
314 |         self.validate_vector_dimensions(query_vector)?;
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^ private method
    |
   ::: packages/sweetmcp-memory/src/vector/async_vector_core.rs:108:5
    |
108 |     fn validate_vector_dimensions(&self, vector: &[f32]) -> Result<(), Error> {
    |     ------------------------------------------------------------------------- private method defined here

error[E0616]: field `vectors` of struct `async_vector_core::InMemoryVectorStore` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:319:27
    |
319 |         for entry in self.vectors.iter() {
    |                           ^^^^^^^ private field

error[E0616]: field `metadata` of struct `async_vector_core::InMemoryVectorStore` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:342:33
    |
342 |             let metadata = self.metadata.get(&id).map(|m| m.clone());
    |                                 ^^^^^^^^ private field

error[E0560]: struct `vector::VectorSearchResult` has no field named `similarity`
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:345:17
    |
345 |                 similarity,
    |                 ^^^^^^^^^^ `vector::VectorSearchResult` does not have this field
    |
    = note: available fields are: `score`

error[E0624]: method `increment_operations` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:351:14
    |
351 |         self.increment_operations();
    |              ^^^^^^^^^^^^^^^^^^^^ private method
    |
   ::: packages/sweetmcp-memory/src/vector/async_vector_core.rs:102:5
    |
102 |     fn increment_operations(&self) {
    |     ------------------------------ private method defined here

error[E0616]: field `metrics` of struct `async_vector_core::InMemoryVectorStore` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:352:14
    |
352 |         self.metrics.increment_searches();
    |              ^^^^^^^ private field
    |
help: a method `metrics` also exists, call it with parentheses
    |
352 |         self.metrics().increment_searches();
    |                     ++

error[E0616]: field `metrics` of struct `async_vector_core::InMemoryVectorStore` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:354:14
    |
354 |         self.metrics.add_search_time(elapsed_ms);
    |              ^^^^^^^ private field
    |
help: a method `metrics` also exists, call it with parentheses
    |
354 |         self.metrics().add_search_time(elapsed_ms);
    |                     ++

error[E0624]: method `validate_vector_dimensions` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:375:14
    |
375 |         self.validate_vector_dimensions(query_vector)?;
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^ private method
    |
   ::: packages/sweetmcp-memory/src/vector/async_vector_core.rs:108:5
    |
108 |     fn validate_vector_dimensions(&self, vector: &[f32]) -> Result<(), Error> {
    |     ------------------------------------------------------------------------- private method defined here

error[E0616]: field `vectors` of struct `async_vector_core::InMemoryVectorStore` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:380:27
    |
380 |         for entry in self.vectors.iter() {
    |                           ^^^^^^^ private field

error[E0616]: field `metadata` of struct `async_vector_core::InMemoryVectorStore` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:400:33
    |
400 |             let metadata = self.metadata.get(&id).map(|m| m.clone());
    |                                 ^^^^^^^^ private field

error[E0560]: struct `vector::VectorSearchResult` has no field named `similarity`
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:403:17
    |
403 |                 similarity,
    |                 ^^^^^^^^^^ `vector::VectorSearchResult` does not have this field
    |
    = note: available fields are: `score`

error[E0624]: method `increment_operations` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:409:14
    |
409 |         self.increment_operations();
    |              ^^^^^^^^^^^^^^^^^^^^ private method
    |
   ::: packages/sweetmcp-memory/src/vector/async_vector_core.rs:102:5
    |
102 |     fn increment_operations(&self) {
    |     ------------------------------ private method defined here

error[E0616]: field `metrics` of struct `async_vector_core::InMemoryVectorStore` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:410:14
    |
410 |         self.metrics.increment_searches();
    |              ^^^^^^^ private field
    |
help: a method `metrics` also exists, call it with parentheses
    |
410 |         self.metrics().increment_searches();
    |                     ++

error[E0616]: field `metrics` of struct `async_vector_core::InMemoryVectorStore` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:412:14
    |
412 |         self.metrics.add_search_time(elapsed_ms);
    |              ^^^^^^^ private field
    |
help: a method `metrics` also exists, call it with parentheses
    |
412 |         self.metrics().add_search_time(elapsed_ms);
    |                     ++

error[E0624]: method `validate_vector_dimensions` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:433:14
    |
433 |         self.validate_vector_dimensions(query_vector)?;
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^ private method
    |
   ::: packages/sweetmcp-memory/src/vector/async_vector_core.rs:108:5
    |
108 |     fn validate_vector_dimensions(&self, vector: &[f32]) -> Result<(), Error> {
    |     ------------------------------------------------------------------------- private method defined here

error[E0616]: field `vectors` of struct `async_vector_core::InMemoryVectorStore` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:438:27
    |
438 |         for entry in self.vectors.iter() {
    |                           ^^^^^^^ private field

error[E0616]: field `metadata` of struct `async_vector_core::InMemoryVectorStore` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:452:37
    |
452 |                 let metadata = self.metadata.get(id).map(|m| m.clone());
    |                                     ^^^^^^^^ private field

error[E0560]: struct `vector::VectorSearchResult` has no field named `similarity`
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:457:21
    |
457 |                     similarity,
    |                     ^^^^^^^^^^ `vector::VectorSearchResult` does not have this field
    |
    = note: available fields are: `score`

error[E0609]: no field `similarity` on type `&vector::VectorSearchResult`
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:464:34
    |
464 |         results.sort_by(|a, b| b.similarity.partial_cmp(&a.similarity).unwrap_or(std::cmp::Ordering::Equal));
    |                                  ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `score`, `metadata`

error[E0609]: no field `similarity` on type `&vector::VectorSearchResult`
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:464:60
    |
464 |         results.sort_by(|a, b| b.similarity.partial_cmp(&a.similarity).unwrap_or(std::cmp::Ordering::Equal));
    |                                                            ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `score`, `metadata`

error[E0624]: method `increment_operations` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:467:14
    |
467 |         self.increment_operations();
    |              ^^^^^^^^^^^^^^^^^^^^ private method
    |
   ::: packages/sweetmcp-memory/src/vector/async_vector_core.rs:102:5
    |
102 |     fn increment_operations(&self) {
    |     ------------------------------ private method defined here

error[E0616]: field `metrics` of struct `async_vector_core::InMemoryVectorStore` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:468:14
    |
468 |         self.metrics.increment_searches();
    |              ^^^^^^^ private field
    |
help: a method `metrics` also exists, call it with parentheses
    |
468 |         self.metrics().increment_searches();
    |                     ++

error[E0616]: field `metrics` of struct `async_vector_core::InMemoryVectorStore` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:470:14
    |
470 |         self.metrics.add_search_time(elapsed_ms);
    |              ^^^^^^^ private field
    |
help: a method `metrics` also exists, call it with parentheses
    |
470 |         self.metrics().add_search_time(elapsed_ms);
    |                     ++

error[E0599]: no method named `metrics` found for struct `tokio::sync::RwLockReadGuard<'_, SearchStrategyExecutor>` in the current scope
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_core.rs:107:21
    |
107 |         Ok(executor.metrics().clone())
    |                     ^^^^^^^ private field, not a method
    |
help: there is a method `get_metrics` with a similar name
    |
107 |         Ok(executor.get_metrics().clone())
    |                     ++++

error[E0599]: no variant or associated item named `InvalidConfiguration` found for enum `utils::error::Error` in the current scope
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_core.rs:143:31
    |
143 |             return Err(Error::InvalidConfiguration("Invalid coordinator configuration".to_string()));
    |                               ^^^^^^^^^^^^^^^^^^^^ variant or associated item not found in `utils::error::Error`
    |
   ::: packages/sweetmcp-memory/src/utils/error.rs:14:1
    |
14  | pub enum Error {
    | -------------- variant or associated item `InvalidConfiguration` not found for this enum

error[E0616]: field `search_executor` of struct `AsyncVectorOptimizationCoordinator` is private
  --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_operations.rs:43:37
   |
43 |                 let executor = self.search_executor.read().await;
   |                                     ^^^^^^^^^^^^^^^ private field

error[E0616]: field `search_executor` of struct `AsyncVectorOptimizationCoordinator` is private
  --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_operations.rs:54:41
   |
54 |                     let executor = self.search_executor.read().await;
   |                                         ^^^^^^^^^^^^^^^ private field

error[E0616]: field `search_executor` of struct `AsyncVectorOptimizationCoordinator` is private
  --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_operations.rs:64:41
   |
64 |                     let executor = self.search_executor.read().await;
   |                                         ^^^^^^^^^^^^^^^ private field

error[E0616]: field `search_executor` of struct `AsyncVectorOptimizationCoordinator` is private
  --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_operations.rs:76:37
   |
76 |                 let executor = self.search_executor.read().await;
   |                                     ^^^^^^^^^^^^^^^ private field

error[E0616]: field `metrics` of struct `AsyncVectorOptimizationCoordinator` is private
  --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_operations.rs:88:14
   |
88 |         self.metrics.record_search_operation(execution_time, results.len());
   |              ^^^^^^^ private field
   |
help: a method `metrics` also exists, call it with parentheses
   |
88 |         self.metrics().record_search_operation(execution_time, results.len());
   |                     ++

error[E0616]: field `optimization_executor` of struct `AsyncVectorOptimizationCoordinator` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_operations.rs:106:29
    |
106 |         let executor = self.optimization_executor.read().await;
    |                             ^^^^^^^^^^^^^^^^^^^^^ private field

error[E0616]: field `metrics` of struct `AsyncVectorOptimizationCoordinator` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_operations.rs:146:14
    |
146 |         self.metrics.record_optimization_pipeline(
    |              ^^^^^^^ private field
    |
help: a method `metrics` also exists, call it with parentheses
    |
146 |         self.metrics().record_optimization_pipeline(
    |                     ++

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_operations.rs:174:72
    |
174 |         let optimization_spec = OptimizationSpec::from_recommendations(&recommendations);
    |                                 -------------------------------------- ^^^^^^^^^^^^^^^^ expected `&[OptimizationRecommendation]`, found `&SmallVec<[...; 8]>`
    |                                 |
    |                                 arguments to this function are incorrect
    |
    = note: expected reference `&[coordinator_types::OptimizationRecommendation]`
               found reference `&SmallVec<[coordinator_analysis::OptimizationRecommendation; 8]>`
note: associated function defined here
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_types.rs:326:12
    |
326 |     pub fn from_recommendations(recommendations: &[OptimizationRecommendation]) -> Self {
    |            ^^^^^^^^^^^^^^^^^^^^ ----------------------------------------------

error[E0599]: no variant or associated item named `ApproximateNearestNeighbor` found for enum `search_strategies::SearchStrategy` in the current scope
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_operations.rs:211:39
    |
211 |             return Ok(SearchStrategy::ApproximateNearestNeighbor);
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ variant or associated item not found in `search_strategies::SearchStrategy`
    |
   ::: packages/sweetmcp-memory/src/vector/async_vector_optimization/search_strategies.rs:18:1
    |
18  | pub enum SearchStrategy {
    | ----------------------- variant or associated item `ApproximateNearestNeighbor` not found for this enum

error[E0560]: struct `vector::VectorSearchResult` has no field named `vector`
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/search_strategies.rs:150:21
    |
150 |                     vector: vector.clone(),
    |                     ^^^^^^ `vector::VectorSearchResult` does not have this field
    |
    = note: available fields are: `score`

error[E0560]: struct `vector::VectorSearchResult` has no field named `distance`
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/search_strategies.rs:151:21
    |
151 |                     distance: *distance,
    |                     ^^^^^^^^ `vector::VectorSearchResult` does not have this field
    |
    = note: available fields are: `score`

error[E0560]: struct `vector::VectorSearchResult` has no field named `vector`
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/search_strategies.rs:203:21
    |
203 |                     vector: vector.clone(),
    |                     ^^^^^^ `vector::VectorSearchResult` does not have this field
    |
    = note: available fields are: `score`

error[E0560]: struct `vector::VectorSearchResult` has no field named `distance`
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/search_strategies.rs:204:21
    |
204 |                     distance: *distance,
    |                     ^^^^^^^^ `vector::VectorSearchResult` does not have this field
    |
    = note: available fields are: `score`

error[E0502]: cannot borrow `*self` as mutable because it is also borrowed as immutable
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/optimization_algorithms/mod.rs:179:45
    |
176 | ...thm in self.get_active_algorithms() {
    |           ----------------------------
    |           |
    |           immutable borrow occurs here
    |           immutable borrow later used here
...
179 | ... if let Ok(dim_result) = self.execute_dimension_reduction(vectors, vectors.first().map(|(_, v)| v.len() / 2).unwrap_or(50)).await {
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here

error[E0502]: cannot borrow `*self` as mutable because it is also borrowed as immutable
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/optimization_algorithms/mod.rs:184:47
    |
176 |         for &algorithm in self.get_active_algorithms() {
    |                           ----------------------------
    |                           |
    |                           immutable borrow occurs here
    |                           immutable borrow later used here
...
184 |                     if let Ok(quant_result) = self.execute_vector_quantization(vectors, 256).await {
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here

error[E0502]: cannot borrow `*self` as mutable because it is also borrowed as immutable
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/optimization_algorithms/mod.rs:189:47
    |
176 |         for &algorithm in self.get_active_algorithms() {
    |                           ----------------------------
    |                           |
    |                           immutable borrow occurs here
    |                           immutable borrow later used here
...
189 |                     if let Ok(index_result) = self.execute_index_optimization(vectors).await {
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here

error[E0502]: cannot borrow `*self` as mutable because it is also borrowed as immutable
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/optimization_algorithms/mod.rs:194:47
    |
176 |         for &algorithm in self.get_active_algorithms() {
    |                           ----------------------------
    |                           |
    |                           immutable borrow occurs here
    |                           immutable borrow later used here
...
194 |                     if let Ok(cache_result) = self.execute_cache_optimization(vectors, 1000).await {
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here

error[E0502]: cannot borrow `*self` as mutable because it is also borrowed as immutable
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/optimization_algorithms/mod.rs:199:47
    |
176 |         for &algorithm in self.get_active_algorithms() {
    |                           ----------------------------
    |                           |
    |                           immutable borrow occurs here
    |                           immutable borrow later used here
...
199 |                     if let Ok(batch_result) = self.execute_batch_optimization(vectors, 100).await {
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here

error[E0502]: cannot borrow `*self` as mutable because it is also borrowed as immutable
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/optimization_algorithms/mod.rs:204:48
    |
176 |         for &algorithm in self.get_active_algorithms() {
    |                           ----------------------------
    |                           |
    |                           immutable borrow occurs here
    |                           immutable borrow later used here
...
204 |                     if let Ok(layout_result) = self.execute_memory_layout_optimization(vectors).await {
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here

error[E0046]: not all trait items implemented, missing: `complete_advanced`, `complete_with_messages`, `complete_with_tools`
   --> packages/sweetmcp-memory/src/llm/anthropic.rs:41:1
    |
41  |   impl LLMProvider for AnthropicProvider {
    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `complete_advanced`, `complete_with_messages`, `complete_with_tools` in implementation
    |
   ::: packages/sweetmcp-memory/src/llm/mod.rs:88:5
    |
88  | /     fn complete_advanced(
89  | |         &self,
90  | |         prompt: &str,
91  | |         max_tokens: Option<usize>,
92  | |         temperature: Option<f32>,
93  | |     ) -> impl std::future::Future<Output = Result<String>> + Send;
    | |__________________________________________________________________- `complete_advanced` from trait
...
96  | /     fn complete_with_messages(
97  | |         &self,
98  | |         messages: Vec<std::collections::HashMap<String, String>>,
99  | |         max_tokens: Option<usize>,
100 | |         temperature: Option<f32>,
101 | |     ) -> impl std::future::Future<Output = Result<String>> + Send;
    | |__________________________________________________________________- `complete_with_messages` from trait
...
104 | /     fn complete_with_tools(
105 | |         &self,
106 | |         messages: Vec<std::collections::HashMap<String, String>>,
107 | |         tools: Vec<std::collections::HashMap<String, String>>,
108 | |         max_tokens: Option<usize>,
109 | |         temperature: Option<f32>,
110 | |     ) -> impl std::future::Future<Output = Result<std::collections::HashMap<String, String>>> + Send;
    | |_____________________________________________________________________________________________________- `complete_with_tools` from trait

error[E0046]: not all trait items implemented, missing: `complete_advanced`, `complete_with_messages`, `complete_with_tools`
   --> packages/sweetmcp-memory/src/llm/openai.rs:41:1
    |
41  |   impl LLMProvider for OpenAIProvider {
    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `complete_advanced`, `complete_with_messages`, `complete_with_tools` in implementation
    |
   ::: packages/sweetmcp-memory/src/llm/mod.rs:88:5
    |
88  | /     fn complete_advanced(
89  | |         &self,
90  | |         prompt: &str,
91  | |         max_tokens: Option<usize>,
92  | |         temperature: Option<f32>,
93  | |     ) -> impl std::future::Future<Output = Result<String>> + Send;
    | |__________________________________________________________________- `complete_advanced` from trait
...
96  | /     fn complete_with_messages(
97  | |         &self,
98  | |         messages: Vec<std::collections::HashMap<String, String>>,
99  | |         max_tokens: Option<usize>,
100 | |         temperature: Option<f32>,
101 | |     ) -> impl std::future::Future<Output = Result<String>> + Send;
    | |__________________________________________________________________- `complete_with_messages` from trait
...
104 | /     fn complete_with_tools(
105 | |         &self,
106 | |         messages: Vec<std::collections::HashMap<String, String>>,
107 | |         tools: Vec<std::collections::HashMap<String, String>>,
108 | |         max_tokens: Option<usize>,
109 | |         temperature: Option<f32>,
110 | |     ) -> impl std::future::Future<Output = Result<std::collections::HashMap<String, String>>> + Send;
    | |_____________________________________________________________________________________________________- `complete_with_tools` from trait

error[E0038]: the trait `llm::LLMProvider` is not dyn compatible
   --> packages/sweetmcp-memory/src/llm/completion/mod.rs:12:19
    |
12  |     provider: Arc<dyn LLMProvider>,
    |                   ^^^^^^^^^^^^^^^ `llm::LLMProvider` is not dyn compatible
    |
note: for a trait to be dyn compatible it needs to allow building a vtable
      for more information, visit <https://doc.rust-lang.org/reference/items/traits.html#dyn-compatibility>
   --> packages/sweetmcp-memory/src/llm/mod.rs:93:10
    |
83  | pub trait LLMProvider: Send + Sync {
    |           ----------- this trait is not dyn compatible...
...
93  |     ) -> impl std::future::Future<Output = Result<String>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_advanced` references an `impl Trait` type in its return type
...
101 |     ) -> impl std::future::Future<Output = Result<String>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_with_messages` references an `impl Trait` type in its return type
...
110 |     ) -> impl std::future::Future<Output = Result<std::collections::HashMap<String, String>>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_with_tools` references an `impl Trait` type in its return type
    = help: consider moving `complete_advanced` to another trait
    = help: consider moving `complete_with_messages` to another trait
    = help: consider moving `complete_with_tools` to another trait
    = help: the following types implement `llm::LLMProvider`:
              llm::anthropic::AnthropicProvider
              llm::openai::OpenAIProvider
            consider defining an enum where each variant holds one of these types,
            implementing `llm::LLMProvider` for this new enum and using it instead
    = note: `llm::LLMProvider` may be implemented in other crates; if you want to support your users passing their own types here, you can't refer to a specific type

error[E0038]: the trait `llm::LLMProvider` is not dyn compatible
   --> packages/sweetmcp-memory/src/llm/content_analyzer/mod.rs:36:30
    |
36  |     provider: std::sync::Arc<dyn LLMProvider>,
    |                              ^^^^^^^^^^^^^^^ `llm::LLMProvider` is not dyn compatible
    |
note: for a trait to be dyn compatible it needs to allow building a vtable
      for more information, visit <https://doc.rust-lang.org/reference/items/traits.html#dyn-compatibility>
   --> packages/sweetmcp-memory/src/llm/mod.rs:93:10
    |
83  | pub trait LLMProvider: Send + Sync {
    |           ----------- this trait is not dyn compatible...
...
93  |     ) -> impl std::future::Future<Output = Result<String>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_advanced` references an `impl Trait` type in its return type
...
101 |     ) -> impl std::future::Future<Output = Result<String>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_with_messages` references an `impl Trait` type in its return type
...
110 |     ) -> impl std::future::Future<Output = Result<std::collections::HashMap<String, String>>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_with_tools` references an `impl Trait` type in its return type
    = help: consider moving `complete_advanced` to another trait
    = help: consider moving `complete_with_messages` to another trait
    = help: consider moving `complete_with_tools` to another trait
    = help: the following types implement `llm::LLMProvider`:
              llm::anthropic::AnthropicProvider
              llm::openai::OpenAIProvider
            consider defining an enum where each variant holds one of these types,
            implementing `llm::LLMProvider` for this new enum and using it instead
    = note: `llm::LLMProvider` may be implemented in other crates; if you want to support your users passing their own types here, you can't refer to a specific type

error[E0046]: not all trait items implemented, missing: `update`, `delete`, `embed`
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:21:1
    |
21  |   impl VectorStore for InMemoryVectorStore {
    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `update`, `delete`, `embed` in implementation
    |
   ::: packages/sweetmcp-memory/src/vector/mod.rs:138:5
    |
138 | /     fn update(
139 | |         &self,
140 | |         id: String,
141 | |         embedding: Vec<f32>,
142 | |         metadata: Option<serde_json::Value>,
143 | |     ) -> PendingVectorOp;
    | |_________________________- `update` from trait
...
146 |       fn delete(&self, id: String) -> PendingVectorOp;
    |       ------------------------------------------------ `delete` from trait
...
157 |       fn embed(&self, text: String) -> PendingEmbedding;
    |       -------------------------------------------------- `embed` from trait

error[E0038]: the trait `llm::LLMProvider` is not dyn compatible
   --> packages/sweetmcp-memory/src/llm/completion/mod.rs:17:30
    |
17  |     pub fn new(provider: Arc<dyn LLMProvider>) -> Self {
    |                              ^^^^^^^^^^^^^^^ `llm::LLMProvider` is not dyn compatible
    |
note: for a trait to be dyn compatible it needs to allow building a vtable
      for more information, visit <https://doc.rust-lang.org/reference/items/traits.html#dyn-compatibility>
   --> packages/sweetmcp-memory/src/llm/mod.rs:93:10
    |
83  | pub trait LLMProvider: Send + Sync {
    |           ----------- this trait is not dyn compatible...
...
93  |     ) -> impl std::future::Future<Output = Result<String>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_advanced` references an `impl Trait` type in its return type
...
101 |     ) -> impl std::future::Future<Output = Result<String>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_with_messages` references an `impl Trait` type in its return type
...
110 |     ) -> impl std::future::Future<Output = Result<std::collections::HashMap<String, String>>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_with_tools` references an `impl Trait` type in its return type
    = help: consider moving `complete_advanced` to another trait
    = help: consider moving `complete_with_messages` to another trait
    = help: consider moving `complete_with_tools` to another trait
    = help: the following types implement `llm::LLMProvider`:
              llm::anthropic::AnthropicProvider
              llm::openai::OpenAIProvider
            consider defining an enum where each variant holds one of these types,
            implementing `llm::LLMProvider` for this new enum and using it instead
    = note: `llm::LLMProvider` may be implemented in other crates; if you want to support your users passing their own types here, you can't refer to a specific type
help: you might have meant to use `Self` to refer to the implementing type
    |
17  -     pub fn new(provider: Arc<dyn LLMProvider>) -> Self {
17  +     pub fn new(provider: Arc<Self>) -> Self {
    |

error[E0038]: the trait `llm::LLMProvider` is not dyn compatible
   --> packages/sweetmcp-memory/src/llm/completion/mod.rs:22:36
    |
22  |     pub fn provider(&self) -> &Arc<dyn LLMProvider> {
    |                                    ^^^^^^^^^^^^^^^ `llm::LLMProvider` is not dyn compatible
    |
note: for a trait to be dyn compatible it needs to allow building a vtable
      for more information, visit <https://doc.rust-lang.org/reference/items/traits.html#dyn-compatibility>
   --> packages/sweetmcp-memory/src/llm/mod.rs:93:10
    |
83  | pub trait LLMProvider: Send + Sync {
    |           ----------- this trait is not dyn compatible...
...
93  |     ) -> impl std::future::Future<Output = Result<String>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_advanced` references an `impl Trait` type in its return type
...
101 |     ) -> impl std::future::Future<Output = Result<String>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_with_messages` references an `impl Trait` type in its return type
...
110 |     ) -> impl std::future::Future<Output = Result<std::collections::HashMap<String, String>>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_with_tools` references an `impl Trait` type in its return type
    = help: consider moving `complete_advanced` to another trait
    = help: consider moving `complete_with_messages` to another trait
    = help: consider moving `complete_with_tools` to another trait
    = help: the following types implement `llm::LLMProvider`:
              llm::anthropic::AnthropicProvider
              llm::openai::OpenAIProvider
            consider defining an enum where each variant holds one of these types,
            implementing `llm::LLMProvider` for this new enum and using it instead
    = note: `llm::LLMProvider` may be implemented in other crates; if you want to support your users passing their own types here, you can't refer to a specific type
help: you might have meant to use `Self` to refer to the implementing type
    |
22  -     pub fn provider(&self) -> &Arc<dyn LLMProvider> {
22  +     pub fn provider(&self) -> &Arc<Self> {
    |

error[E0038]: the trait `llm::LLMProvider` is not dyn compatible
   --> packages/sweetmcp-memory/src/llm/content_analyzer/mod.rs:41:41
    |
41  |     pub fn new(provider: std::sync::Arc<dyn LLMProvider>) -> Self {
    |                                         ^^^^^^^^^^^^^^^ `llm::LLMProvider` is not dyn compatible
    |
note: for a trait to be dyn compatible it needs to allow building a vtable
      for more information, visit <https://doc.rust-lang.org/reference/items/traits.html#dyn-compatibility>
   --> packages/sweetmcp-memory/src/llm/mod.rs:93:10
    |
83  | pub trait LLMProvider: Send + Sync {
    |           ----------- this trait is not dyn compatible...
...
93  |     ) -> impl std::future::Future<Output = Result<String>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_advanced` references an `impl Trait` type in its return type
...
101 |     ) -> impl std::future::Future<Output = Result<String>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_with_messages` references an `impl Trait` type in its return type
...
110 |     ) -> impl std::future::Future<Output = Result<std::collections::HashMap<String, String>>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_with_tools` references an `impl Trait` type in its return type
    = help: consider moving `complete_advanced` to another trait
    = help: consider moving `complete_with_messages` to another trait
    = help: consider moving `complete_with_tools` to another trait
    = help: the following types implement `llm::LLMProvider`:
              llm::anthropic::AnthropicProvider
              llm::openai::OpenAIProvider
            consider defining an enum where each variant holds one of these types,
            implementing `llm::LLMProvider` for this new enum and using it instead
    = note: `llm::LLMProvider` may be implemented in other crates; if you want to support your users passing their own types here, you can't refer to a specific type
help: you might have meant to use `Self` to refer to the implementing type
    |
41  -     pub fn new(provider: std::sync::Arc<dyn LLMProvider>) -> Self {
41  +     pub fn new(provider: std::sync::Arc<Self>) -> Self {
    |

error[E0038]: the trait `llm::LLMProvider` is not dyn compatible
   --> packages/sweetmcp-memory/src/llm/content_analyzer/mod.rs:82:47
    |
82  |     pub fn provider(&self) -> &std::sync::Arc<dyn LLMProvider> {
    |                                               ^^^^^^^^^^^^^^^ `llm::LLMProvider` is not dyn compatible
    |
note: for a trait to be dyn compatible it needs to allow building a vtable
      for more information, visit <https://doc.rust-lang.org/reference/items/traits.html#dyn-compatibility>
   --> packages/sweetmcp-memory/src/llm/mod.rs:93:10
    |
83  | pub trait LLMProvider: Send + Sync {
    |           ----------- this trait is not dyn compatible...
...
93  |     ) -> impl std::future::Future<Output = Result<String>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_advanced` references an `impl Trait` type in its return type
...
101 |     ) -> impl std::future::Future<Output = Result<String>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_with_messages` references an `impl Trait` type in its return type
...
110 |     ) -> impl std::future::Future<Output = Result<std::collections::HashMap<String, String>>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_with_tools` references an `impl Trait` type in its return type
    = help: consider moving `complete_advanced` to another trait
    = help: consider moving `complete_with_messages` to another trait
    = help: consider moving `complete_with_tools` to another trait
    = help: the following types implement `llm::LLMProvider`:
              llm::anthropic::AnthropicProvider
              llm::openai::OpenAIProvider
            consider defining an enum where each variant holds one of these types,
            implementing `llm::LLMProvider` for this new enum and using it instead
    = note: `llm::LLMProvider` may be implemented in other crates; if you want to support your users passing their own types here, you can't refer to a specific type
help: you might have meant to use `Self` to refer to the implementing type
    |
82  -     pub fn provider(&self) -> &std::sync::Arc<dyn LLMProvider> {
82  +     pub fn provider(&self) -> &std::sync::Arc<Self> {
    |

error[E0592]: duplicate definitions with name `new`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/surface_code/mod.rs:57:5
    |
57  |       pub fn new(distance: usize, boundary_type: BoundaryType) -> CognitiveResult<Self> {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `new`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/error_correction/mod.rs:148:5
    |
148 | /     pub fn new(
149 | |         code_type: TopologicalCodeType,
150 | |         dimensions: (usize, usize),
151 | |         boundary: BoundaryConditions,
152 | |     ) -> CognitiveResult<Self> {
    | |______________________________- other definition for `new`

error[E0592]: duplicate definitions with name `validate`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/surface_code/mod.rs:181:5
    |
181 |     pub fn validate(&self) -> CognitiveResult<bool> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `validate`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/error_correction/mod.rs:210:5
    |
210 |     pub fn validate(&self) -> Result<(), String> {
    |     -------------------------------------------- other definition for `validate`

error[E0592]: duplicate definitions with name `initialize_quantum_state`
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/core.rs:137:5
    |
137 |     pub fn initialize_quantum_state(&self, syndrome: &[bool]) -> Vec<f64> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `initialize_quantum_state`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/quantum_ops.rs:11:5
    |
11  |     pub(super) fn initialize_quantum_state(&self, syndrome: &[bool]) -> Vec<f64> {
    |     ---------------------------------------------------------------------------- other definition for `initialize_quantum_state`

error[E0592]: duplicate definitions with name `apply_quantum_layer`
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/core.rs:168:5
    |
168 | /     pub fn apply_quantum_layer(
169 | |         &self,
170 | |         mut state: Vec<f64>,
171 | |         layer: &QuantumLayer,
172 | |         qubit_count: usize,
173 | |     ) -> Vec<f64> {
    | |_________________^ duplicate definitions for `apply_quantum_layer`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/quantum_ops.rs:31:5
    |
31  | /     pub(super) fn apply_quantum_layer(
32  | |         &self,
33  | |         mut quantum_state: Vec<f64>,
34  | |         layer: &QuantumLayer,
35  | |         qubit_count: usize,
36  | |     ) -> Vec<f64> {
    | |_________________- other definition for `apply_quantum_layer`

error[E0592]: duplicate definitions with name `apply_cnot_gate`
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/core.rs:354:5
    |
354 | /     fn apply_cnot_gate(
355 | |         &self,
356 | |         mut state: Vec<f64>,
357 | |         control: usize,
358 | |         target: usize,
359 | |         qubit_count: usize,
360 | |     ) -> Vec<f64> {
    | |_________________^ duplicate definitions for `apply_cnot_gate`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/quantum_ops.rs:138:5
    |
138 |       fn apply_cnot_gate(&self, state: &mut [f64], control: usize, target: usize, qubit_count: usize) {
    |       ----------------------------------------------------------------------------------------------- other definition for `apply_cnot_gate`

error[E0592]: duplicate definitions with name `evaluate`
  --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/training.rs:77:5
   |
77 |     pub fn evaluate(&self, test_data: &[(Vec<bool>, Vec<bool>)]) -> f64 {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `evaluate`
   |
  ::: packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/inference.rs:33:5
   |
33 |     pub fn evaluate(&self, test_data: &[(Vec<bool>, Vec<bool>)]) -> ModelMetrics {
   |     ---------------------------------------------------------------------------- other definition for `evaluate`

error[E0592]: duplicate definitions with name `new`
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/core.rs:423:5
    |
423 |     pub fn new(qubit_count: usize) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `new`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/inference.rs:367:5
    |
367 |     pub fn new(qubit_count: usize) -> Self {
    |     -------------------------------------- other definition for `new`

error[E0592]: duplicate definitions with name `add_gate`
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/core.rs:432:5
    |
432 |     pub fn add_gate(&mut self, gate: ParameterizedGate) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `add_gate`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/inference.rs:376:5
    |
376 |     pub fn add_gate(&mut self, gate: ParameterizedGate) {
    |     --------------------------------------------------- other definition for `add_gate`

error[E0592]: duplicate definitions with name `status_summary`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:138:5
    |
138 |     pub fn status_summary(&self) -> EngineStatus {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `status_summary`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:273:5
    |
273 |     pub fn status_summary(&self) -> EngineStatus {
    |     -------------------------------------------- other definition for `status_summary`

error[E0592]: duplicate definitions with name `quick_health_check`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/health.rs:337:5
    |
337 |     pub async fn quick_health_check(&self) -> Result<f64, CognitiveError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `quick_health_check`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:254:5
    |
254 |     pub async fn quick_health_check(&self) -> Result<f64, CognitiveError> {
    |     --------------------------------------------------------------------- other definition for `quick_health_check`

error[E0592]: duplicate definitions with name `perform_comprehensive_operation`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:25:5
   |
25 |  /     pub async fn perform_comprehensive_operation(
26 |  |         &mut self,
27 |  |         tree: &mut HashMap<String, QuantumMCTSNode>,
28 |  |         operation_type: EngineOperationType,
29 |  |     ) -> Result<EngineOperationResult, CognitiveError> {
   |  |______________________________________________________^ duplicate definitions for `perform_comprehensive_operation`
   |
  ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operation_executor.rs:21:5
   |
21 | /      pub async fn perform_comprehensive_operation(
22 | |          &mut self,
23 | |          tree: &mut HashMap<String, QuantumMCTSNode>,
24 | |          operation_type: EngineOperationType,
25 | |      ) -> Result<EngineOperationResult, CognitiveError> {
   | |_______________________________________________________- other definition for `perform_comprehensive_operation`

error[E0592]: duplicate definitions with name `perform_automatic_maintenance`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:323:5
    |
323 | /     pub async fn perform_automatic_maintenance(
324 | |         &mut self,
325 | |         tree: &mut HashMap<String, QuantumMCTSNode>,
326 | |     ) -> Result<Vec<EngineOperationResult>, CognitiveError> {
    | |___________________________________________________________^ duplicate definitions for `perform_automatic_maintenance`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operation_executor.rs:184:5
    |
184 | /     pub async fn perform_automatic_maintenance(
185 | |         &mut self,
186 | |         tree: &mut HashMap<String, QuantumMCTSNode>,
187 | |     ) -> Result<Vec<EngineOperationResult>, CognitiveError> {
    | |___________________________________________________________- other definition for `perform_automatic_maintenance`

error[E0592]: duplicate definitions with name `perform_combined_optimization`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:198:5
    |
198 | /     pub async fn perform_combined_optimization(
199 | |         &mut self,
200 | |         tree: &mut HashMap<String, QuantumMCTSNode>,
201 | |         start_time: Instant,
202 | |     ) -> Result<EngineOperationResult, CognitiveError> {
    | |______________________________________________________^ duplicate definitions for `perform_combined_optimization`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/combined_optimization.rs:19:5
    |
19  | /     pub async fn perform_combined_optimization(
20  | |         &mut self,
21  | |         tree: &mut HashMap<String, QuantumMCTSNode>,
22  | |         start_time: Instant,
23  | |     ) -> Result<EngineOperationResult, CognitiveError> {
    | |______________________________________________________- other definition for `perform_combined_optimization`

error[E0592]: duplicate definitions with name `get_comprehensive_statistics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:370:5
    |
370 |     pub fn get_comprehensive_statistics(&self) -> Result<EngineStatistics, CognitiveError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `get_comprehensive_statistics`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:229:5
    |
229 |     pub async fn get_comprehensive_statistics(&self) -> Result<EngineStatistics, CognitiveError> {
    |     -------------------------------------------------------------------------------------------- other definition for `get_comprehensive_statistics`

error[E0592]: duplicate definitions with name `create_performance_report`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:424:5
    |
424 |     pub fn create_performance_report(&self) -> Result<EnginePerformanceReport, CognitiveError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `create_performance_report`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/performance_grading.rs:197:5
    |
197 |     pub async fn create_performance_report(&self) -> Result<EnginePerformanceReport, CognitiveError> {
    |     ------------------------------------------------------------------------------------------------ other definition for `create_performance_report`

error[E0592]: duplicate definitions with name `calculate_latency_grade`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:467:5
    |
467 |     fn calculate_latency_grade(latency_us: f64) -> char {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `calculate_latency_grade`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/performance_grading.rs:231:5
    |
231 |     fn calculate_latency_grade(latency_us: f64) -> char {
    |     --------------------------------------------------- other definition for `calculate_latency_grade`

error[E0592]: duplicate definitions with name `calculate_throughput_grade`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:479:5
    |
479 |     fn calculate_throughput_grade(ops_per_sec: f64) -> char {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `calculate_throughput_grade`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/performance_grading.rs:242:5
    |
242 |     fn calculate_throughput_grade(ops_per_sec: f64) -> char {
    |     ------------------------------------------------------- other definition for `calculate_throughput_grade`

error[E0592]: duplicate definitions with name `calculate_reliability_grade`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:491:5
    |
491 |     fn calculate_reliability_grade(success_rate: f64) -> char {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `calculate_reliability_grade`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/performance_grading.rs:253:5
    |
253 |     fn calculate_reliability_grade(success_rate: f64) -> char {
    |     --------------------------------------------------------- other definition for `calculate_reliability_grade`

error[E0592]: duplicate definitions with name `calculate_efficiency_grade`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:503:5
    |
503 |     fn calculate_efficiency_grade(cache_hit_rate: f64) -> char {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `calculate_efficiency_grade`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/performance_grading.rs:264:5
    |
264 |     fn calculate_efficiency_grade(cache_hit_rate: f64) -> char {
    |     ---------------------------------------------------------- other definition for `calculate_efficiency_grade`

error[E0592]: duplicate definitions with name `is_overly_dense`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:257:5
    |
257 |     pub fn is_overly_dense(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `is_overly_dense`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:51:5
    |
51  |     pub fn is_overly_dense(&self) -> bool {
    |     ------------------------------------- other definition for `is_overly_dense`

error[E0592]: duplicate definitions with name `is_sparse`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:262:5
    |
262 |     pub fn is_sparse(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `is_sparse`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:45:5
    |
45  |     pub fn is_sparse(&self) -> bool {
    |     ------------------------------- other definition for `is_sparse`

error[E0592]: duplicate definitions with name `has_good_connectivity`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:267:5
    |
267 |     pub fn has_good_connectivity(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `has_good_connectivity`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:39:5
    |
39  |     pub fn has_good_connectivity(&self) -> bool {
    |     ------------------------------------------- other definition for `has_good_connectivity`

error[E0592]: duplicate definitions with name `start_tracking`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:265:5
    |
265 |     pub fn start_tracking(&self) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `start_tracking`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/mod.rs:199:5
    |
199 |     pub fn start_tracking(&self) -> PerformanceTracker {
    |     -------------------------------------------------- other definition for `start_tracking`

error[E0592]: duplicate definitions with name `reset`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:275:5
    |
275 |     pub fn reset(&self) {
    |     ^^^^^^^^^^^^^^^^^^^ duplicate definitions for `reset`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/mod.rs:404:5
    |
404 |     pub fn reset(&mut self) {
    |     ----------------------- other definition for `reset`

error[E0592]: duplicate definitions with name `record_error`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/mod.rs:319:5
    |
194 |     pub fn record_error(&self) {
    |     -------------------------- other definition for `record_error`
...
319 |     pub fn record_error(&self) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `record_error`

error[E0592]: duplicate definitions with name `find_metadata_by_key_substring`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:133:5
    |
133 |     pub fn find_metadata_by_key_substring(&self, substring: &str) -> HashMap<&String, &Value> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `find_metadata_by_key_substring`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_advanced.rs:19:5
    |
19  |     pub fn find_metadata_by_key_substring(&self, substring: &str) -> HashMap<&String, &Value> {
    |     ----------------------------------------------------------------------------------------- other definition for `find_metadata_by_key_substring`

error[E0592]: duplicate definitions with name `get_metadata_matching_pattern`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:177:5
    |
177 |     pub fn get_metadata_matching_pattern(&self, pattern: &str) -> HashMap<&String, &Value> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `get_metadata_matching_pattern`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_advanced.rs:32:5
    |
32  |     pub fn get_metadata_matching_pattern(&self, pattern: &str) -> HashMap<&String, &Value> {
    |     -------------------------------------------------------------------------------------- other definition for `get_metadata_matching_pattern`

error[E0592]: duplicate definitions with name `count_metadata_matching_pattern`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:191:5
    |
191 |     pub fn count_metadata_matching_pattern(&self, pattern: &str) -> usize {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `count_metadata_matching_pattern`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_advanced.rs:46:5
    |
46  |     pub fn count_metadata_matching_pattern(&self, pattern: &str) -> usize {
    |     --------------------------------------------------------------------- other definition for `count_metadata_matching_pattern`

error[E0592]: duplicate definitions with name `get_sorted_metadata_keys`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:281:5
    |
281 |     pub fn get_sorted_metadata_keys(&self) -> Vec<String> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `get_sorted_metadata_keys`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_advanced.rs:57:5
    |
57  |     pub fn get_sorted_metadata_keys(&self) -> Vec<String> {
    |     ----------------------------------------------------- other definition for `get_sorted_metadata_keys`

error[E0592]: duplicate definitions with name `filter_metadata_by_type`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:302:5
    |
302 |     pub fn filter_metadata_by_type(&self, value_type: &str) -> HashMap<&String, &Value> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `filter_metadata_by_type`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_advanced.rs:70:5
    |
70  |     pub fn filter_metadata_by_type(&self, value_type: &str) -> HashMap<&String, &Value> {
    |     ----------------------------------------------------------------------------------- other definition for `filter_metadata_by_type`

error[E0592]: duplicate definitions with name `update_metadata`
  --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:18:5
   |
18 |     pub fn update_metadata(&mut self, key: &str, value: Value) {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `update_metadata`
   |
  ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_basic.rs:18:5
   |
18 |     pub fn update_metadata(&mut self, key: &str, value: Value) {
   |     ---------------------------------------------------------- other definition for `update_metadata`

error[E0592]: duplicate definitions with name `remove_metadata`
  --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:30:5
   |
30 |     pub fn remove_metadata(&mut self, key: &str) -> Option<Value> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `remove_metadata`
   |
  ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_basic.rs:30:5
   |
30 |     pub fn remove_metadata(&mut self, key: &str) -> Option<Value> {
   |     ------------------------------------------------------------- other definition for `remove_metadata`

error[E0592]: duplicate definitions with name `get_metadata`
  --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:45:5
   |
45 |     pub fn get_metadata(&self, key: &str) -> Option<&Value> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `get_metadata`
   |
  ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_basic.rs:45:5
   |
45 |     pub fn get_metadata(&self, key: &str) -> Option<&Value> {
   |     ------------------------------------------------------- other definition for `get_metadata`

error[E0592]: duplicate definitions with name `metadata`
  --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:53:5
   |
53 |     pub fn metadata(&self) -> &HashMap<String, Value> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `metadata`
   |
  ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_basic.rs:53:5
   |
53 |     pub fn metadata(&self) -> &HashMap<String, Value> {
   |     ------------------------------------------------- other definition for `metadata`

error[E0592]: duplicate definitions with name `clear_metadata`
  --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:58:5
   |
58 |     pub fn clear_metadata(&mut self) {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `clear_metadata`
   |
  ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_basic.rs:58:5
   |
58 |     pub fn clear_metadata(&mut self) {
   |     -------------------------------- other definition for `clear_metadata`

error[E0592]: duplicate definitions with name `replace_metadata`
  --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:67:5
   |
67 |     pub fn replace_metadata(&mut self, metadata: HashMap<String, Value>) {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `replace_metadata`
   |
  ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_basic.rs:67:5
   |
67 |     pub fn replace_metadata(&mut self, metadata: HashMap<String, Value>) {
   |     -------------------------------------------------------------------- other definition for `replace_metadata`

error[E0592]: duplicate definitions with name `merge_metadata`
  --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:76:5
   |
76 |     pub fn merge_metadata(&mut self, other_metadata: &HashMap<String, Value>) {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `merge_metadata`
   |
  ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_basic.rs:76:5
   |
76 |     pub fn merge_metadata(&mut self, other_metadata: &HashMap<String, Value>) {
   |     ------------------------------------------------------------------------- other definition for `merge_metadata`

error[E0592]: duplicate definitions with name `metadata_count`
  --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:87:5
   |
87 |     pub fn metadata_count(&self) -> usize {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `metadata_count`
   |
  ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_basic.rs:87:5
   |
87 |     pub fn metadata_count(&self) -> usize {
   |     ------------------------------------- other definition for `metadata_count`

error[E0592]: duplicate definitions with name `has_metadata`
  --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:95:5
   |
95 |     pub fn has_metadata(&self) -> bool {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `has_metadata`
   |
  ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_basic.rs:95:5
   |
95 |     pub fn has_metadata(&self) -> bool {
   |     ---------------------------------- other definition for `has_metadata`

error[E0592]: duplicate definitions with name `has_metadata_key`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:106:5
    |
106 |     pub fn has_metadata_key(&self, key: &str) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `has_metadata_key`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_basic.rs:106:5
    |
106 |     pub fn has_metadata_key(&self, key: &str) -> bool {
    |     ------------------------------------------------- other definition for `has_metadata_key`

error[E0592]: duplicate definitions with name `metadata_keys`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:114:5
    |
114 |     pub fn metadata_keys(&self) -> Vec<&String> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `metadata_keys`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_basic.rs:114:5
    |
114 |     pub fn metadata_keys(&self) -> Vec<&String> {
    |     ------------------------------------------- other definition for `metadata_keys`

error[E0592]: duplicate definitions with name `metadata_values`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:122:5
    |
122 |     pub fn metadata_values(&self) -> Vec<&Value> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `metadata_values`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_basic.rs:122:5
    |
122 |     pub fn metadata_values(&self) -> Vec<&Value> {
    |     -------------------------------------------- other definition for `metadata_values`

error[E0592]: duplicate definitions with name `update_multiple_metadata`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:143:5
    |
143 |     pub fn update_multiple_metadata(&mut self, updates: HashMap<String, Value>) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `update_multiple_metadata`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_basic.rs:130:5
    |
130 |     pub fn update_multiple_metadata(&mut self, updates: HashMap<String, Value>) {
    |     --------------------------------------------------------------------------- other definition for `update_multiple_metadata`

error[E0592]: duplicate definitions with name `remove_multiple_metadata`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:157:5
    |
157 |     pub fn remove_multiple_metadata(&mut self, keys: &[String]) -> HashMap<String, Value> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `remove_multiple_metadata`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_basic.rs:144:5
    |
144 |     pub fn remove_multiple_metadata(&mut self, keys: &[String]) -> HashMap<String, Value> {
    |     ------------------------------------------------------------------------------------- other definition for `remove_multiple_metadata`

error[E0592]: duplicate definitions with name `get_metadata_as_string`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:205:5
    |
205 |     pub fn get_metadata_as_string(&self, key: &str) -> Option<&str> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `get_metadata_as_string`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_basic.rs:196:5
    |
196 |     pub fn get_metadata_as_string(&self, key: &str) -> Option<&str> {
    |     --------------------------------------------------------------- other definition for `get_metadata_as_string`

error[E0592]: duplicate definitions with name `get_metadata_as_number`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:216:5
    |
216 |     pub fn get_metadata_as_number(&self, key: &str) -> Option<f64> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `get_metadata_as_number`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_basic.rs:207:5
    |
207 |     pub fn get_metadata_as_number(&self, key: &str) -> Option<f64> {
    |     -------------------------------------------------------------- other definition for `get_metadata_as_number`

error[E0592]: duplicate definitions with name `get_metadata_as_bool`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:227:5
    |
227 |     pub fn get_metadata_as_bool(&self, key: &str) -> Option<bool> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `get_metadata_as_bool`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_basic.rs:218:5
    |
218 |     pub fn get_metadata_as_bool(&self, key: &str) -> Option<bool> {
    |     ------------------------------------------------------------- other definition for `get_metadata_as_bool`

error[E0592]: duplicate definitions with name `set_metadata_string`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:236:5
    |
236 |     pub fn set_metadata_string(&mut self, key: &str, value: &str) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `set_metadata_string`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_basic.rs:162:5
    |
162 |     pub fn set_metadata_string(&mut self, key: &str, value: &str) {
    |     ------------------------------------------------------------- other definition for `set_metadata_string`

error[E0592]: duplicate definitions with name `set_metadata_number`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:246:5
    |
246 |     pub fn set_metadata_number(&mut self, key: &str, value: f64) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `set_metadata_number`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_basic.rs:172:5
    |
172 |     pub fn set_metadata_number(&mut self, key: &str, value: f64) {
    |     ------------------------------------------------------------ other definition for `set_metadata_number`

error[E0592]: duplicate definitions with name `set_metadata_bool`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:258:5
    |
258 |     pub fn set_metadata_bool(&mut self, key: &str, value: bool) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `set_metadata_bool`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_basic.rs:184:5
    |
184 |     pub fn set_metadata_bool(&mut self, key: &str, value: bool) {
    |     ----------------------------------------------------------- other definition for `set_metadata_bool`

error[E0592]: duplicate definitions with name `metadata_equals`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:271:5
    |
271 |     pub fn metadata_equals(&self, key: &str, expected_value: &Value) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `metadata_equals`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_basic.rs:230:5
    |
230 |     pub fn metadata_equals(&self, key: &str, expected_value: &Value) -> bool {
    |     ------------------------------------------------------------------------ other definition for `metadata_equals`

error[E0592]: duplicate definitions with name `clone_metadata`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:291:5
    |
291 |     pub fn clone_metadata(&self) -> HashMap<String, Value> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `clone_metadata`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_basic.rs:240:5
    |
240 |     pub fn clone_metadata(&self) -> HashMap<String, Value> {
    |     ------------------------------------------------------ other definition for `clone_metadata`

error[E0592]: duplicate definitions with name `metadata_summary`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:322:5
    |
322 |     pub fn metadata_summary(&self) -> String {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `metadata_summary`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_basic.rs:248:5
    |
248 |     pub fn metadata_summary(&self) -> String {
    |     ---------------------------------------- other definition for `metadata_summary`

error[E0592]: duplicate definitions with name `find_metadata_by_key_substring`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:133:5
    |
133 |     pub fn find_metadata_by_key_substring(&self, substring: &str) -> HashMap<&String, &Value> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `find_metadata_by_key_substring`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_filtering.rs:19:5
    |
19  |     pub fn find_metadata_by_key_substring(&self, substring: &str) -> HashMap<&String, &Value> {
    |     ----------------------------------------------------------------------------------------- other definition for `find_metadata_by_key_substring`

error[E0592]: duplicate definitions with name `get_metadata_matching_pattern`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:177:5
    |
177 |     pub fn get_metadata_matching_pattern(&self, pattern: &str) -> HashMap<&String, &Value> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `get_metadata_matching_pattern`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_filtering.rs:32:5
    |
32  |     pub fn get_metadata_matching_pattern(&self, pattern: &str) -> HashMap<&String, &Value> {
    |     -------------------------------------------------------------------------------------- other definition for `get_metadata_matching_pattern`

error[E0592]: duplicate definitions with name `count_metadata_matching_pattern`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:191:5
    |
191 |     pub fn count_metadata_matching_pattern(&self, pattern: &str) -> usize {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `count_metadata_matching_pattern`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_filtering.rs:46:5
    |
46  |     pub fn count_metadata_matching_pattern(&self, pattern: &str) -> usize {
    |     --------------------------------------------------------------------- other definition for `count_metadata_matching_pattern`

error[E0592]: duplicate definitions with name `get_sorted_metadata_keys`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:281:5
    |
281 |     pub fn get_sorted_metadata_keys(&self) -> Vec<String> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `get_sorted_metadata_keys`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_filtering.rs:57:5
    |
57  |     pub fn get_sorted_metadata_keys(&self) -> Vec<String> {
    |     ----------------------------------------------------- other definition for `get_sorted_metadata_keys`

error[E0592]: duplicate definitions with name `filter_metadata_by_type`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:302:5
    |
302 |     pub fn filter_metadata_by_type(&self, value_type: &str) -> HashMap<&String, &Value> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `filter_metadata_by_type`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_filtering.rs:70:5
    |
70  |     pub fn filter_metadata_by_type(&self, value_type: &str) -> HashMap<&String, &Value> {
    |     ----------------------------------------------------------------------------------- other definition for `filter_metadata_by_type`

error[E0592]: duplicate definitions with name `update_metadata`
  --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:18:5
   |
18 |     pub fn update_metadata(&mut self, key: &str, value: Value) {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `update_metadata`
   |
  ::: packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:78:5
   |
78 |     pub fn update_metadata(&mut self, key: &str, value: Value) {
   |     ---------------------------------------------------------- other definition for `update_metadata`

error[E0592]: duplicate definitions with name `remove_metadata`
  --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:30:5
   |
30 |     pub fn remove_metadata(&mut self, key: &str) -> Option<Value> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `remove_metadata`
   |
  ::: packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:90:5
   |
90 |     pub fn remove_metadata(&mut self, key: &str) -> Option<Value> {
   |     ------------------------------------------------------------- other definition for `remove_metadata`

error[E0592]: duplicate definitions with name `get_metadata`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:45:5
    |
45  |     pub fn get_metadata(&self, key: &str) -> Option<&Value> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `get_metadata`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:105:5
    |
105 |     pub fn get_metadata(&self, key: &str) -> Option<&Value> {
    |     ------------------------------------------------------- other definition for `get_metadata`

error[E0592]: duplicate definitions with name `metadata`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:53:5
    |
53  |     pub fn metadata(&self) -> &HashMap<String, Value> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `metadata`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:113:5
    |
113 |     pub fn metadata(&self) -> &HashMap<String, Value> {
    |     ------------------------------------------------- other definition for `metadata`

error[E0592]: duplicate definitions with name `clear_metadata`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:58:5
    |
58  |     pub fn clear_metadata(&mut self) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `clear_metadata`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:118:5
    |
118 |     pub fn clear_metadata(&mut self) {
    |     -------------------------------- other definition for `clear_metadata`

error[E0592]: duplicate definitions with name `replace_metadata`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:67:5
    |
67  |     pub fn replace_metadata(&mut self, metadata: HashMap<String, Value>) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `replace_metadata`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:127:5
    |
127 |     pub fn replace_metadata(&mut self, metadata: HashMap<String, Value>) {
    |     -------------------------------------------------------------------- other definition for `replace_metadata`

error[E0592]: duplicate definitions with name `merge_metadata`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:76:5
    |
76  |     pub fn merge_metadata(&mut self, other_metadata: &HashMap<String, Value>) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `merge_metadata`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:136:5
    |
136 |     pub fn merge_metadata(&mut self, other_metadata: &HashMap<String, Value>) {
    |     ------------------------------------------------------------------------- other definition for `merge_metadata`

error[E0592]: duplicate definitions with name `metadata_count`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:87:5
    |
87  |     pub fn metadata_count(&self) -> usize {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `metadata_count`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:155:5
    |
155 |     pub fn metadata_count(&self) -> usize {
    |     ------------------------------------- other definition for `metadata_count`

error[E0592]: duplicate definitions with name `has_metadata`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:95:5
    |
95  |     pub fn has_metadata(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `has_metadata`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:171:5
    |
171 |     pub fn has_metadata(&self) -> bool {
    |     ---------------------------------- other definition for `has_metadata`

error[E0592]: duplicate definitions with name `has_metadata_key`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:106:5
    |
106 |     pub fn has_metadata_key(&self, key: &str) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `has_metadata_key`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:182:5
    |
182 |     pub fn has_metadata_key(&self, key: &str) -> bool {
    |     ------------------------------------------------- other definition for `has_metadata_key`

error[E0592]: duplicate definitions with name `metadata_keys`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:114:5
    |
114 |     pub fn metadata_keys(&self) -> Vec<&String> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `metadata_keys`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:190:5
    |
190 |     pub fn metadata_keys(&self) -> Vec<&String> {
    |     ------------------------------------------- other definition for `metadata_keys`

error[E0592]: duplicate definitions with name `metadata_values`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:122:5
    |
122 |     pub fn metadata_values(&self) -> Vec<&Value> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `metadata_values`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:198:5
    |
198 |     pub fn metadata_values(&self) -> Vec<&Value> {
    |     -------------------------------------------- other definition for `metadata_values`

error[E0592]: duplicate definitions with name `find_metadata_by_key_substring`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:133:5
    |
133 |     pub fn find_metadata_by_key_substring(&self, substring: &str) -> HashMap<&String, &Value> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `find_metadata_by_key_substring`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:236:5
    |
236 |     pub fn find_metadata_by_key_substring(&self, substring: &str) -> HashMap<&String, &Value> {
    |     ----------------------------------------------------------------------------------------- other definition for `find_metadata_by_key_substring`

error[E0592]: duplicate definitions with name `update_multiple_metadata`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:143:5
    |
143 |     pub fn update_multiple_metadata(&mut self, updates: HashMap<String, Value>) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `update_multiple_metadata`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:246:5
    |
246 |     pub fn update_multiple_metadata(&mut self, updates: HashMap<String, Value>) {
    |     --------------------------------------------------------------------------- other definition for `update_multiple_metadata`

error[E0592]: duplicate definitions with name `remove_multiple_metadata`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:157:5
    |
157 |     pub fn remove_multiple_metadata(&mut self, keys: &[String]) -> HashMap<String, Value> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `remove_multiple_metadata`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:260:5
    |
260 |     pub fn remove_multiple_metadata(&mut self, keys: &[String]) -> HashMap<String, Value> {
    |     ------------------------------------------------------------------------------------- other definition for `remove_multiple_metadata`

error[E0592]: duplicate definitions with name `find_metadata_by_key_substring`
  --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_advanced.rs:19:5
   |
19 |     pub fn find_metadata_by_key_substring(&self, substring: &str) -> HashMap<&String, &Value> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `find_metadata_by_key_substring`
   |
  ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_filtering.rs:19:5
   |
19 |     pub fn find_metadata_by_key_substring(&self, substring: &str) -> HashMap<&String, &Value> {
   |     ----------------------------------------------------------------------------------------- other definition for `find_metadata_by_key_substring`

error[E0592]: duplicate definitions with name `get_metadata_matching_pattern`
  --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_advanced.rs:32:5
   |
32 |     pub fn get_metadata_matching_pattern(&self, pattern: &str) -> HashMap<&String, &Value> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `get_metadata_matching_pattern`
   |
  ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_filtering.rs:32:5
   |
32 |     pub fn get_metadata_matching_pattern(&self, pattern: &str) -> HashMap<&String, &Value> {
   |     -------------------------------------------------------------------------------------- other definition for `get_metadata_matching_pattern`

error[E0592]: duplicate definitions with name `count_metadata_matching_pattern`
  --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_advanced.rs:46:5
   |
46 |     pub fn count_metadata_matching_pattern(&self, pattern: &str) -> usize {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `count_metadata_matching_pattern`
   |
  ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_filtering.rs:46:5
   |
46 |     pub fn count_metadata_matching_pattern(&self, pattern: &str) -> usize {
   |     --------------------------------------------------------------------- other definition for `count_metadata_matching_pattern`

error[E0592]: duplicate definitions with name `get_sorted_metadata_keys`
  --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_advanced.rs:57:5
   |
57 |     pub fn get_sorted_metadata_keys(&self) -> Vec<String> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `get_sorted_metadata_keys`
   |
  ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_filtering.rs:57:5
   |
57 |     pub fn get_sorted_metadata_keys(&self) -> Vec<String> {
   |     ----------------------------------------------------- other definition for `get_sorted_metadata_keys`

error[E0592]: duplicate definitions with name `filter_metadata_by_type`
  --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_advanced.rs:70:5
   |
70 |     pub fn filter_metadata_by_type(&self, value_type: &str) -> HashMap<&String, &Value> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `filter_metadata_by_type`
   |
  ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_filtering.rs:70:5
   |
70 |     pub fn filter_metadata_by_type(&self, value_type: &str) -> HashMap<&String, &Value> {
   |     ----------------------------------------------------------------------------------- other definition for `filter_metadata_by_type`

error[E0592]: duplicate definitions with name `filter_metadata_by_value`
  --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_advanced.rs:93:5
   |
95 |           F: Fn(&Value) -> bool,
   |                                ^ duplicate definitions for `filter_metadata_by_value`
   |
  ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_filtering.rs:93:5
   |
93 | /     pub fn filter_metadata_by_value<F>(&self, predicate: F) -> HashMap<&String, &Value>
94 | |     where
95 | |         F: Fn(&Value) -> bool,
   | |______________________________- other definition for `filter_metadata_by_value`

error[E0592]: duplicate definitions with name `filter_metadata_by_key`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_advanced.rs:109:5
    |
111 |           F: Fn(&String) -> bool,
    |                                 ^ duplicate definitions for `filter_metadata_by_key`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_filtering.rs:109:5
    |
109 | /     pub fn filter_metadata_by_key<F>(&self, predicate: F) -> HashMap<&String, &Value>
110 | |     where
111 | |         F: Fn(&String) -> bool,
    | |_______________________________- other definition for `filter_metadata_by_key`

error[E0592]: duplicate definitions with name `get_string_metadata`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_advanced.rs:122:5
    |
122 |     pub fn get_string_metadata(&self) -> HashMap<&String, &str> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `get_string_metadata`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_filtering.rs:122:5
    |
122 |     pub fn get_string_metadata(&self) -> HashMap<&String, &str> {
    |     ----------------------------------------------------------- other definition for `get_string_metadata`

error[E0592]: duplicate definitions with name `get_number_metadata`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_advanced.rs:134:5
    |
134 |     pub fn get_number_metadata(&self) -> HashMap<&String, f64> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `get_number_metadata`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_filtering.rs:134:5
    |
134 |     pub fn get_number_metadata(&self) -> HashMap<&String, f64> {
    |     ---------------------------------------------------------- other definition for `get_number_metadata`

error[E0592]: duplicate definitions with name `get_boolean_metadata`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_advanced.rs:146:5
    |
146 |     pub fn get_boolean_metadata(&self) -> HashMap<&String, bool> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `get_boolean_metadata`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_filtering.rs:146:5
    |
146 |     pub fn get_boolean_metadata(&self) -> HashMap<&String, bool> {
    |     ------------------------------------------------------------ other definition for `get_boolean_metadata`

error[E0592]: duplicate definitions with name `find_keys_with_string_value_containing`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_advanced.rs:161:5
    |
161 |     pub fn find_keys_with_string_value_containing(&self, substring: &str) -> Vec<&String> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `find_keys_with_string_value_containing`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_filtering.rs:161:5
    |
161 |     pub fn find_keys_with_string_value_containing(&self, substring: &str) -> Vec<&String> {
    |     ------------------------------------------------------------------------------------- other definition for `find_keys_with_string_value_containing`

error[E0592]: duplicate definitions with name `get_metadata_in_numeric_range`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_advanced.rs:185:5
    |
185 |     pub fn get_metadata_in_numeric_range(&self, min: f64, max: f64) -> HashMap<&String, f64> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `get_metadata_in_numeric_range`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_filtering.rs:185:5
    |
185 |     pub fn get_metadata_in_numeric_range(&self, min: f64, max: f64) -> HashMap<&String, f64> {
    |     ---------------------------------------------------------------------------------------- other definition for `get_metadata_in_numeric_range`

error[E0592]: duplicate definitions with name `count_metadata_by_type`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_advanced.rs:205:5
    |
205 |     pub fn count_metadata_by_type(&self) -> HashMap<&'static str, usize> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `count_metadata_by_type`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_filtering.rs:231:5
    |
231 |     pub fn count_metadata_by_type(&self) -> HashMap<&'static str, usize> {
    |     -------------------------------------------------------------------- other definition for `count_metadata_by_type`

error[E0592]: duplicate definitions with name `get_keys_with_prefix`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_advanced.rs:230:5
    |
230 |     pub fn get_keys_with_prefix(&self, prefix: &str) -> Vec<&String> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `get_keys_with_prefix`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_filtering.rs:208:5
    |
208 |     pub fn get_keys_with_prefix(&self, prefix: &str) -> Vec<&String> {
    |     ---------------------------------------------------------------- other definition for `get_keys_with_prefix`

error[E0592]: duplicate definitions with name `get_keys_with_suffix`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_advanced.rs:243:5
    |
243 |     pub fn get_keys_with_suffix(&self, suffix: &str) -> Vec<&String> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `get_keys_with_suffix`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_filtering.rs:221:5
    |
221 |     pub fn get_keys_with_suffix(&self, suffix: &str) -> Vec<&String> {
    |     ---------------------------------------------------------------- other definition for `get_keys_with_suffix`

error[E0592]: duplicate definitions with name `any_metadata_value_matches`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_advanced.rs:256:5
    |
258 |           F: Fn(&Value) -> bool,
    |                                ^ duplicate definitions for `any_metadata_value_matches`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_filtering.rs:256:5
    |
256 | /     pub fn any_metadata_value_matches<F>(&self, predicate: F) -> bool
257 | |     where
258 | |         F: Fn(&Value) -> bool,
    | |______________________________- other definition for `any_metadata_value_matches`

error[E0592]: duplicate definitions with name `all_metadata_values_match`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_advanced.rs:270:5
    |
272 |           F: Fn(&Value) -> bool,
    |                                ^ duplicate definitions for `all_metadata_values_match`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_filtering.rs:270:5
    |
270 | /     pub fn all_metadata_values_match<F>(&self, predicate: F) -> bool
271 | |     where
272 | |         F: Fn(&Value) -> bool,
    | |______________________________- other definition for `all_metadata_values_match`

error[E0592]: duplicate definitions with name `find_first_metadata`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_advanced.rs:284:5
    |
286 |           F: Fn(&String, &Value) -> bool,
    |                                         ^ duplicate definitions for `find_first_metadata`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_filtering.rs:284:5
    |
284 | /     pub fn find_first_metadata<F>(&self, predicate: F) -> Option<(&String, &Value)>
285 | |     where
286 | |         F: Fn(&String, &Value) -> bool,
    | |_______________________________________- other definition for `find_first_metadata`

error[E0592]: duplicate definitions with name `get_metadata_statistics`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_advanced.rs:296:5
    |
296 |     pub fn get_metadata_statistics(&self) -> (usize, usize, usize, usize, usize, usize, usize) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `get_metadata_statistics`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_metadata_stats.rs:16:5
    |
16  |     pub fn get_metadata_statistics(&self) -> (usize, usize, usize, usize, usize, usize, usize) {
    |     ------------------------------------------------------------------------------------------ other definition for `get_metadata_statistics`

error[E0592]: duplicate definitions with name `find_metadata_by_key_substring`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_advanced.rs:19:5
    |
19  |     pub fn find_metadata_by_key_substring(&self, substring: &str) -> HashMap<&String, &Value> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `find_metadata_by_key_substring`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:236:5
    |
236 |     pub fn find_metadata_by_key_substring(&self, substring: &str) -> HashMap<&String, &Value> {
    |     ----------------------------------------------------------------------------------------- other definition for `find_metadata_by_key_substring`

error[E0592]: duplicate definitions with name `update_metadata`
  --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_basic.rs:18:5
   |
18 |     pub fn update_metadata(&mut self, key: &str, value: Value) {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `update_metadata`
   |
  ::: packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:78:5
   |
78 |     pub fn update_metadata(&mut self, key: &str, value: Value) {
   |     ---------------------------------------------------------- other definition for `update_metadata`

error[E0592]: duplicate definitions with name `remove_metadata`
  --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_basic.rs:30:5
   |
30 |     pub fn remove_metadata(&mut self, key: &str) -> Option<Value> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `remove_metadata`
   |
  ::: packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:90:5
   |
90 |     pub fn remove_metadata(&mut self, key: &str) -> Option<Value> {
   |     ------------------------------------------------------------- other definition for `remove_metadata`

error[E0592]: duplicate definitions with name `get_metadata`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_basic.rs:45:5
    |
45  |     pub fn get_metadata(&self, key: &str) -> Option<&Value> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `get_metadata`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:105:5
    |
105 |     pub fn get_metadata(&self, key: &str) -> Option<&Value> {
    |     ------------------------------------------------------- other definition for `get_metadata`

error[E0592]: duplicate definitions with name `metadata`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_basic.rs:53:5
    |
53  |     pub fn metadata(&self) -> &HashMap<String, Value> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `metadata`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:113:5
    |
113 |     pub fn metadata(&self) -> &HashMap<String, Value> {
    |     ------------------------------------------------- other definition for `metadata`

error[E0592]: duplicate definitions with name `clear_metadata`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_basic.rs:58:5
    |
58  |     pub fn clear_metadata(&mut self) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `clear_metadata`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:118:5
    |
118 |     pub fn clear_metadata(&mut self) {
    |     -------------------------------- other definition for `clear_metadata`

error[E0592]: duplicate definitions with name `replace_metadata`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_basic.rs:67:5
    |
67  |     pub fn replace_metadata(&mut self, metadata: HashMap<String, Value>) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `replace_metadata`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:127:5
    |
127 |     pub fn replace_metadata(&mut self, metadata: HashMap<String, Value>) {
    |     -------------------------------------------------------------------- other definition for `replace_metadata`

error[E0592]: duplicate definitions with name `merge_metadata`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_basic.rs:76:5
    |
76  |     pub fn merge_metadata(&mut self, other_metadata: &HashMap<String, Value>) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `merge_metadata`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:136:5
    |
136 |     pub fn merge_metadata(&mut self, other_metadata: &HashMap<String, Value>) {
    |     ------------------------------------------------------------------------- other definition for `merge_metadata`

error[E0592]: duplicate definitions with name `metadata_count`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_basic.rs:87:5
    |
87  |     pub fn metadata_count(&self) -> usize {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `metadata_count`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:155:5
    |
155 |     pub fn metadata_count(&self) -> usize {
    |     ------------------------------------- other definition for `metadata_count`

error[E0592]: duplicate definitions with name `has_metadata`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_basic.rs:95:5
    |
95  |     pub fn has_metadata(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `has_metadata`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:171:5
    |
171 |     pub fn has_metadata(&self) -> bool {
    |     ---------------------------------- other definition for `has_metadata`

error[E0592]: duplicate definitions with name `has_metadata_key`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_basic.rs:106:5
    |
106 |     pub fn has_metadata_key(&self, key: &str) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `has_metadata_key`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:182:5
    |
182 |     pub fn has_metadata_key(&self, key: &str) -> bool {
    |     ------------------------------------------------- other definition for `has_metadata_key`

error[E0592]: duplicate definitions with name `metadata_keys`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_basic.rs:114:5
    |
114 |     pub fn metadata_keys(&self) -> Vec<&String> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `metadata_keys`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:190:5
    |
190 |     pub fn metadata_keys(&self) -> Vec<&String> {
    |     ------------------------------------------- other definition for `metadata_keys`

error[E0592]: duplicate definitions with name `metadata_values`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_basic.rs:122:5
    |
122 |     pub fn metadata_values(&self) -> Vec<&Value> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `metadata_values`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:198:5
    |
198 |     pub fn metadata_values(&self) -> Vec<&Value> {
    |     -------------------------------------------- other definition for `metadata_values`

error[E0592]: duplicate definitions with name `update_multiple_metadata`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_basic.rs:130:5
    |
130 |     pub fn update_multiple_metadata(&mut self, updates: HashMap<String, Value>) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `update_multiple_metadata`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:246:5
    |
246 |     pub fn update_multiple_metadata(&mut self, updates: HashMap<String, Value>) {
    |     --------------------------------------------------------------------------- other definition for `update_multiple_metadata`

error[E0592]: duplicate definitions with name `remove_multiple_metadata`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_basic.rs:144:5
    |
144 |     pub fn remove_multiple_metadata(&mut self, keys: &[String]) -> HashMap<String, Value> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `remove_multiple_metadata`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:260:5
    |
260 |     pub fn remove_multiple_metadata(&mut self, keys: &[String]) -> HashMap<String, Value> {
    |     ------------------------------------------------------------------------------------- other definition for `remove_multiple_metadata`

error[E0592]: duplicate definitions with name `find_metadata_by_key_substring`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_filtering.rs:19:5
    |
19  |     pub fn find_metadata_by_key_substring(&self, substring: &str) -> HashMap<&String, &Value> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `find_metadata_by_key_substring`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:236:5
    |
236 |     pub fn find_metadata_by_key_substring(&self, substring: &str) -> HashMap<&String, &Value> {
    |     ----------------------------------------------------------------------------------------- other definition for `find_metadata_by_key_substring`

error[E0592]: duplicate definitions with name `add_tags`
  --> packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:17:5
   |
17 |     pub fn add_tags(&mut self, tags: Vec<String>) {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `add_tags`
   |
  ::: packages/sweetmcp-memory/src/memory/semantic/item_tags.rs:14:5
   |
14 |     pub fn add_tags(&mut self, tags: Vec<String>) {
   |     --------------------------------------------- other definition for `add_tags`

error[E0592]: duplicate definitions with name `remove_tag`
  --> packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:29:5
   |
29 |     pub fn remove_tag(&mut self, tag: &str) -> bool {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `remove_tag`
   |
  ::: packages/sweetmcp-memory/src/memory/semantic/item_tags.rs:26:5
   |
26 |     pub fn remove_tag(&mut self, tag: &str) -> bool {
   |     ----------------------------------------------- other definition for `remove_tag`

error[E0592]: duplicate definitions with name `has_tag`
  --> packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:46:5
   |
46 |     pub fn has_tag(&self, tag: &str) -> bool {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `has_tag`
   |
  ::: packages/sweetmcp-memory/src/memory/semantic/item_tags.rs:43:5
   |
43 |     pub fn has_tag(&self, tag: &str) -> bool {
   |     ---------------------------------------- other definition for `has_tag`

error[E0592]: duplicate definitions with name `tags`
  --> packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:54:5
   |
54 |     pub fn tags(&self) -> &[String] {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `tags`
   |
  ::: packages/sweetmcp-memory/src/memory/semantic/item_tags.rs:51:5
   |
51 |     pub fn tags(&self) -> &[String] {
   |     ------------------------------- other definition for `tags`

error[E0592]: duplicate definitions with name `clear_tags`
  --> packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:59:5
   |
59 |     pub fn clear_tags(&mut self) {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `clear_tags`
   |
  ::: packages/sweetmcp-memory/src/memory/semantic/item_tags.rs:56:5
   |
56 |     pub fn clear_tags(&mut self) {
   |     ---------------------------- other definition for `clear_tags`

error[E0592]: duplicate definitions with name `replace_tags`
  --> packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:68:5
   |
68 |     pub fn replace_tags(&mut self, tags: Vec<String>) {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `replace_tags`
   |
  ::: packages/sweetmcp-memory/src/memory/semantic/item_tags.rs:65:5
   |
65 |     pub fn replace_tags(&mut self, tags: Vec<String>) {
   |     ------------------------------------------------- other definition for `replace_tags`

error[E0592]: duplicate definitions with name `tag_count`
   --> packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:147:5
    |
147 |     pub fn tag_count(&self) -> usize {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `tag_count`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_tags.rs:74:5
    |
74  |     pub fn tag_count(&self) -> usize {
    |     -------------------------------- other definition for `tag_count`

error[E0592]: duplicate definitions with name `has_tags`
   --> packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:163:5
    |
163 |     pub fn has_tags(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `has_tags`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_tags.rs:82:5
    |
82  |     pub fn has_tags(&self) -> bool {
    |     ------------------------------ other definition for `has_tags`

error[E0592]: duplicate definitions with name `filter_tags`
   --> packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:209:5
    |
209 | /     pub fn filter_tags<F>(&self, predicate: F) -> Vec<&String>
210 | |     where
211 | |         F: Fn(&String) -> bool,
    | |_______________________________^ duplicate definitions for `filter_tags`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_tags.rs:93:5
    |
93  | /     pub fn filter_tags<F>(&self, predicate: F) -> Vec<&String>
94  | |     where
95  | |         F: Fn(&String) -> bool,
    | |_______________________________- other definition for `filter_tags`

error[E0592]: duplicate definitions with name `find_tags_containing`
   --> packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:223:5
    |
223 |     pub fn find_tags_containing(&self, substring: &str) -> Vec<&String> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `find_tags_containing`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_tags.rs:107:5
    |
107 |     pub fn find_tags_containing(&self, substring: &str) -> Vec<&String> {
    |     ------------------------------------------------------------------- other definition for `find_tags_containing`

error[E0592]: duplicate definitions with name `add_tag_if_not_exists`
   --> packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:280:5
    |
280 |     pub fn add_tag_if_not_exists(&mut self, tag: &str) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `add_tag_if_not_exists`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_tags.rs:120:5
    |
120 |     pub fn add_tag_if_not_exists(&mut self, tag: &str) -> bool {
    |     ---------------------------------------------------------- other definition for `add_tag_if_not_exists`

error[E0592]: duplicate definitions with name `toggle_tag`
   --> packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:297:5
    |
297 |     pub fn toggle_tag(&mut self, tag: &str) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `toggle_tag`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_tags.rs:137:5
    |
137 |     pub fn toggle_tag(&mut self, tag: &str) -> bool {
    |     ----------------------------------------------- other definition for `toggle_tag`

error[E0592]: duplicate definitions with name `get_tags_matching_pattern`
   --> packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:315:5
    |
315 |     pub fn get_tags_matching_pattern(&self, pattern: &str) -> Vec<&String> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `get_tags_matching_pattern`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_tags.rs:155:5
    |
155 |     pub fn get_tags_matching_pattern(&self, pattern: &str) -> Vec<&String> {
    |     ---------------------------------------------------------------------- other definition for `get_tags_matching_pattern`

error[E0592]: duplicate definitions with name `count_tags_matching_pattern`
   --> packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:329:5
    |
329 |     pub fn count_tags_matching_pattern(&self, pattern: &str) -> usize {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `count_tags_matching_pattern`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/item_tags.rs:169:5
    |
169 |     pub fn count_tags_matching_pattern(&self, pattern: &str) -> usize {
    |     ----------------------------------------------------------------- other definition for `count_tags_matching_pattern`

error[E0038]: the trait `llm::LLMProvider` is not dyn compatible
   --> packages/sweetmcp-memory/src/api/sdk.rs:34:56
    |
34  |         let content_analyzer = LLMContentAnalyzer::new(completion_service.provider());
    |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `llm::LLMProvider` is not dyn compatible
    |
note: for a trait to be dyn compatible it needs to allow building a vtable
      for more information, visit <https://doc.rust-lang.org/reference/items/traits.html#dyn-compatibility>
   --> packages/sweetmcp-memory/src/llm/mod.rs:93:10
    |
83  | pub trait LLMProvider: Send + Sync {
    |           ----------- this trait is not dyn compatible...
...
93  |     ) -> impl std::future::Future<Output = Result<String>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_advanced` references an `impl Trait` type in its return type
...
101 |     ) -> impl std::future::Future<Output = Result<String>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_with_messages` references an `impl Trait` type in its return type
...
110 |     ) -> impl std::future::Future<Output = Result<std::collections::HashMap<String, String>>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_with_tools` references an `impl Trait` type in its return type
    = help: consider moving `complete_advanced` to another trait
    = help: consider moving `complete_with_messages` to another trait
    = help: consider moving `complete_with_tools` to another trait
    = help: the following types implement `llm::LLMProvider`:
              llm::anthropic::AnthropicProvider
              llm::openai::OpenAIProvider
            consider defining an enum where each variant holds one of these types,
            implementing `llm::LLMProvider` for this new enum and using it instead
    = note: `llm::LLMProvider` may be implemented in other crates; if you want to support your users passing their own types here, you can't refer to a specific type

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/api/sdk.rs:34:56
   |
34 |         let content_analyzer = LLMContentAnalyzer::new(completion_service.provider());
   |                                ----------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Arc<dyn LLMProvider>`, found `&Arc<dyn LLMProvider>`
   |                                |
   |                                arguments to this function are incorrect
   |
   = note: expected struct `std::sync::Arc<_>`
           found reference `&std::sync::Arc<_>`
note: associated function defined here
  --> packages/sweetmcp-memory/src/llm/content_analyzer/mod.rs:41:12
   |
41 |     pub fn new(provider: std::sync::Arc<dyn LLMProvider>) -> Self {
   |            ^^^ -----------------------------------------
help: consider using clone here
   |
34 |         let content_analyzer = LLMContentAnalyzer::new(completion_service.provider().clone());
   |                                                                                     ++++++++

error[E0560]: struct `cognitive::types::Model` has no field named `name`
   --> packages/sweetmcp-memory/src/cognitive/committee/core/agents.rs:322:17
    |
322 |                 name: "gpt-4".to_string(),
    |                 ^^^^ `cognitive::types::Model` does not have this field
    |
    = note: all struct fields are already assigned

error[E0533]: expected value, found struct variant `ModelType::OpenAI`
   --> packages/sweetmcp-memory/src/cognitive/committee/core/agents.rs:323:29
    |
323 |                 model_type: ModelType::OpenAI,
    |                             ^^^^^^^^^^^^^^^^^ not a value
    |
help: you might have meant to create a new value of the struct
    |
323 |                 model_type: ModelType::OpenAI { model: /* value */ },
    |                                               ++++++++++++++++++++++

error[E0560]: struct `cognitive::types::Model` has no field named `max_tokens`
   --> packages/sweetmcp-memory/src/cognitive/committee/core/agents.rs:324:17
    |
324 |                 max_tokens: 4000,
    |                 ^^^^^^^^^^ `cognitive::types::Model` does not have this field
    |
    = note: all struct fields are already assigned

error[E0560]: struct `cognitive::types::Model` has no field named `temperature`
   --> packages/sweetmcp-memory/src/cognitive/committee/core/agents.rs:325:17
    |
325 |                 temperature: 0.1,
    |                 ^^^^^^^^^^^ `cognitive::types::Model` does not have this field
    |
    = note: all struct fields are already assigned

error[E0560]: struct `cognitive::types::Model` has no field named `name`
   --> packages/sweetmcp-memory/src/cognitive/committee/core/agents.rs:364:17
    |
364 |                 name: "gpt-4".to_string(),
    |                 ^^^^ `cognitive::types::Model` does not have this field
    |
    = note: all struct fields are already assigned

error[E0533]: expected value, found struct variant `ModelType::OpenAI`
   --> packages/sweetmcp-memory/src/cognitive/committee/core/agents.rs:365:29
    |
365 |                 model_type: ModelType::OpenAI,
    |                             ^^^^^^^^^^^^^^^^^ not a value
    |
help: you might have meant to create a new value of the struct
    |
365 |                 model_type: ModelType::OpenAI { model: /* value */ },
    |                                               ++++++++++++++++++++++

error[E0560]: struct `cognitive::types::Model` has no field named `max_tokens`
   --> packages/sweetmcp-memory/src/cognitive/committee/core/agents.rs:366:17
    |
366 |                 max_tokens: 4000,
    |                 ^^^^^^^^^^ `cognitive::types::Model` does not have this field
    |
    = note: all struct fields are already assigned

error[E0560]: struct `cognitive::types::Model` has no field named `temperature`
   --> packages/sweetmcp-memory/src/cognitive/committee/core/agents.rs:367:17
    |
367 |                 temperature: 0.1,
    |                 ^^^^^^^^^^^ `cognitive::types::Model` does not have this field
    |
    = note: all struct fields are already assigned

error[E0560]: struct `cognitive::types::Model` has no field named `name`
   --> packages/sweetmcp-memory/src/cognitive/committee/core/agents.rs:386:13
    |
386 |             name: model_name.to_string(),
    |             ^^^^ `cognitive::types::Model` does not have this field
    |
    = note: all struct fields are already assigned

error[E0533]: expected value, found struct variant `ModelType::OpenAI`
   --> packages/sweetmcp-memory/src/cognitive/committee/core/agents.rs:387:25
    |
387 |             model_type: ModelType::OpenAI, // Default to OpenAI
    |                         ^^^^^^^^^^^^^^^^^ not a value
    |
help: you might have meant to create a new value of the struct
    |
387 |             model_type: ModelType::OpenAI { model: /* value */ }, // Default to OpenAI
    |                                           ++++++++++++++++++++++

error[E0560]: struct `cognitive::types::Model` has no field named `max_tokens`
   --> packages/sweetmcp-memory/src/cognitive/committee/core/agents.rs:388:13
    |
388 |             max_tokens: 4000,
    |             ^^^^^^^^^^ `cognitive::types::Model` does not have this field
    |
    = note: all struct fields are already assigned

error[E0560]: struct `cognitive::types::Model` has no field named `temperature`
   --> packages/sweetmcp-memory/src/cognitive/committee/core/agents.rs:389:13
    |
389 |             temperature: 0.1,
    |             ^^^^^^^^^^^ `cognitive::types::Model` does not have this field
    |
    = note: all struct fields are already assigned

error[E0599]: no method named `weight` found for enum `agents::AgentPerspective` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/committee/core/committee.rs:267:54
    |
267 |             let weight = agent.map(|a| a.perspective.weight()).unwrap_or(1.0);
    |                                                      ^^^^^^ method not found in `agents::AgentPerspective`
    |
   ::: packages/sweetmcp-memory/src/cognitive/committee/core/agents.rs:14:1
    |
14  | pub enum AgentPerspective {
    | ------------------------- method `weight` not found for this enum
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `weight`, perhaps you need to implement one of them:
            candidate #1: `EdgeRef`
            candidate #2: `NodeRef`
            candidate #3: `quick_cache::Weighter`
            candidate #4: `quick_cache::Weighter`
            candidate #5: `quick_cache::shard::InternalWeighter`

error[E0560]: struct `cognitive::types::Model` has no field named `name`
   --> packages/sweetmcp-memory/src/cognitive/committee/core/committee.rs:329:17
    |
329 |                 name: "gpt-4".to_string(),
    |                 ^^^^ `cognitive::types::Model` does not have this field
    |
    = note: all struct fields are already assigned

error[E0533]: expected value, found struct variant `ModelType::OpenAI`
   --> packages/sweetmcp-memory/src/cognitive/committee/core/committee.rs:330:29
    |
330 |                 model_type: ModelType::OpenAI,
    |                             ^^^^^^^^^^^^^^^^^ not a value
    |
help: you might have meant to create a new value of the struct
    |
330 |                 model_type: ModelType::OpenAI { model: /* value */ },
    |                                               ++++++++++++++++++++++

error[E0560]: struct `cognitive::types::Model` has no field named `max_tokens`
   --> packages/sweetmcp-memory/src/cognitive/committee/core/committee.rs:331:17
    |
331 |                 max_tokens: 4000,
    |                 ^^^^^^^^^^ `cognitive::types::Model` does not have this field
    |
    = note: all struct fields are already assigned

error[E0560]: struct `cognitive::types::Model` has no field named `temperature`
   --> packages/sweetmcp-memory/src/cognitive/committee/core/committee.rs:332:17
    |
332 |                 temperature: 0.1,
    |                 ^^^^^^^^^^^ `cognitive::types::Model` does not have this field
    |
    = note: all struct fields are already assigned

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/committee/core/committee.rs:337:17
    |
335 |             CommitteeAgent::new(
    |             ------------------- arguments to this function are incorrect
336 |                 format!("agent_{}", i),
337 |                 perspective,
    |                 ^^^^^^^^^^^ expected `agents::AgentPerspective`, found `agent_perspectives::AgentPerspective`
    |
    = note: `agent_perspectives::AgentPerspective` and `agents::AgentPerspective` have similar names, but are actually distinct types
note: `agent_perspectives::AgentPerspective` is defined in module `crate::cognitive::committee::core::agent_perspectives` of the current crate
   --> packages/sweetmcp-memory/src/cognitive/committee/core/agent_perspectives.rs:10:1
    |
10  | pub enum AgentPerspective {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^
note: `agents::AgentPerspective` is defined in module `crate::cognitive::committee::core::agents` of the current crate
   --> packages/sweetmcp-memory/src/cognitive/committee/core/agents.rs:14:1
    |
14  | pub enum AgentPerspective {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^
note: associated function defined here
   --> packages/sweetmcp-memory/src/cognitive/committee/core/agents.rs:113:12
    |
113 |     pub fn new(id: String, perspective: AgentPerspective, model: Model) -> Self {
    |            ^^^             -----------------------------

error[E0609]: no field `baseline_metrics` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/committee/core/committee.rs:350:17
    |
350 |         if spec.baseline_metrics.is_some() {
    |                 ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `cognitive::types::Model` has no field named `name`
   --> packages/sweetmcp-memory/src/cognitive/committee/core/committee.rs:359:17
    |
359 |                 name: "gpt-4".to_string(),
    |                 ^^^^ `cognitive::types::Model` does not have this field
    |
    = note: all struct fields are already assigned

error[E0533]: expected value, found struct variant `ModelType::OpenAI`
   --> packages/sweetmcp-memory/src/cognitive/committee/core/committee.rs:360:29
    |
360 |                 model_type: ModelType::OpenAI,
    |                             ^^^^^^^^^^^^^^^^^ not a value
    |
help: you might have meant to create a new value of the struct
    |
360 |                 model_type: ModelType::OpenAI { model: /* value */ },
    |                                               ++++++++++++++++++++++

error[E0560]: struct `cognitive::types::Model` has no field named `max_tokens`
   --> packages/sweetmcp-memory/src/cognitive/committee/core/committee.rs:361:17
    |
361 |                 max_tokens: 4000,
    |                 ^^^^^^^^^^ `cognitive::types::Model` does not have this field
    |
    = note: all struct fields are already assigned

error[E0560]: struct `cognitive::types::Model` has no field named `temperature`
   --> packages/sweetmcp-memory/src/cognitive/committee/core/committee.rs:362:17
    |
362 |                 temperature: 0.1,
    |                 ^^^^^^^^^^^ `cognitive::types::Model` does not have this field
    |
    = note: all struct fields are already assigned

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/committee/core/committee.rs:367:17
    |
365 |             CommitteeAgent::new(
    |             ------------------- arguments to this function are incorrect
366 |                 format!("spec_agent_{}", i),
367 |                 perspective,
    |                 ^^^^^^^^^^^ expected `agents::AgentPerspective`, found `agent_perspectives::AgentPerspective`
    |
    = note: `agent_perspectives::AgentPerspective` and `agents::AgentPerspective` have similar names, but are actually distinct types
note: `agent_perspectives::AgentPerspective` is defined in module `crate::cognitive::committee::core::agent_perspectives` of the current crate
   --> packages/sweetmcp-memory/src/cognitive/committee/core/agent_perspectives.rs:10:1
    |
10  | pub enum AgentPerspective {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^
note: `agents::AgentPerspective` is defined in module `crate::cognitive::committee::core::agents` of the current crate
   --> packages/sweetmcp-memory/src/cognitive/committee/core/agents.rs:14:1
    |
14  | pub enum AgentPerspective {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^
note: associated function defined here
   --> packages/sweetmcp-memory/src/cognitive/committee/core/agents.rs:113:12
    |
113 |     pub fn new(id: String, perspective: AgentPerspective, model: Model) -> Self {
    |            ^^^             -----------------------------

error[E0599]: no method named `is_positive` found for reference `&&agents::AgentEvaluation` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/committee/core/committee_agent.rs:68:33
   |
68 |             .filter(|eval| eval.is_positive())
   |                                 ^^^^^^^^^^^ method not found in `&&agents::AgentEvaluation`
   |
   = help: items from traits can only be used if the trait is implemented and in scope
   = note: the following trait defines an item `is_positive`, perhaps you need to implement it:
           candidate #1: `num_traits::sign::Signed`
help: some of the expressions' fields have a method of the same name
   |
68 |             .filter(|eval| eval.implementation_quality.is_positive())
   |                                 +++++++++++++++++++++++
68 |             .filter(|eval| eval.objective_alignment.is_positive())
   |                                 ++++++++++++++++++++
68 |             .filter(|eval| eval.risk_assessment.is_positive())
   |                                 ++++++++++++++++

error[E0609]: no field `baseline_metrics` on type `&coordinator_types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/committee/core/evaluation.rs:35:39
   |
35 |         if let Some(baseline) = &spec.baseline_metrics {
   |                                       ^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `content_type` on type `&coordinator_types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/committee/core/evaluation.rs:40:43
   |
40 |         if let Some(content_type) = &spec.content_type {
   |                                           ^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `evolution_rules` on type `&coordinator_types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/committee/core/evaluation.rs:45:46
   |
45 |         if let Some(evolution_rules) = &spec.evolution_rules {
   |                                              ^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `baseline_metrics` on type `&coordinator_types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/committee/core/evaluation_structures.rs:94:39
   |
94 |         if let Some(baseline) = &spec.baseline_metrics {
   |                                       ^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0599]: no variant or associated item named `GPT4` found for enum `ModelType` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/committee/evaluation/builder.rs:96:44
    |
96  |                     model_type: ModelType::GPT4,
    |                                            ^^^^ variant or associated item not found in `ModelType`
    |
   ::: packages/sweetmcp-memory/src/cognitive/types.rs:454:1
    |
454 | pub enum ModelType {
    | ------------------ variant or associated item `GPT4` not found for this enum

error[E0560]: struct `cognitive::types::Model` has no field named `temperature`
  --> packages/sweetmcp-memory/src/cognitive/committee/evaluation/builder.rs:97:21
   |
97 |                     temperature: 0.7,
   |                     ^^^^^^^^^^^ `cognitive::types::Model` does not have this field
   |
   = note: all struct fields are already assigned

error[E0560]: struct `cognitive::types::Model` has no field named `max_tokens`
  --> packages/sweetmcp-memory/src/cognitive/committee/evaluation/builder.rs:98:21
   |
98 |                     max_tokens: 1000,
   |                     ^^^^^^^^^^ `cognitive::types::Model` does not have this field
   |
   = note: all struct fields are already assigned

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/committee/evaluation/builder.rs:94:17
    |
92  |             let agent = CommitteeAgent::new(
    |                         ------------------- arguments to this function are incorrect
93  |                 format!("agent_{}", i),
94  |                 perspective,
    |                 ^^^^^^^^^^^ expected `agents::AgentPerspective`, found `agent_perspectives::AgentPerspective`
    |
    = note: `agent_perspectives::AgentPerspective` and `agents::AgentPerspective` have similar names, but are actually distinct types
note: `agent_perspectives::AgentPerspective` is defined in module `crate::cognitive::committee::core::agent_perspectives` of the current crate
   --> packages/sweetmcp-memory/src/cognitive/committee/core/agent_perspectives.rs:10:1
    |
10  | pub enum AgentPerspective {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^
note: `agents::AgentPerspective` is defined in module `crate::cognitive::committee::core::agents` of the current crate
   --> packages/sweetmcp-memory/src/cognitive/committee/core/agents.rs:14:1
    |
14  | pub enum AgentPerspective {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^
note: associated function defined here
   --> packages/sweetmcp-memory/src/cognitive/committee/core/agents.rs:113:12
    |
113 |     pub fn new(id: String, perspective: AgentPerspective, model: Model) -> Self {
    |            ^^^             -----------------------------

error[E0609]: no field `consensus_threshold` on type `&mut Committee`
   --> packages/sweetmcp-memory/src/cognitive/committee/evaluation/builder.rs:144:14
    |
144 |         self.consensus_threshold = threshold.clamp(0.0, 1.0);
    |              ^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `agents`

error[E0609]: no field `consensus_threshold` on type `&Committee`
   --> packages/sweetmcp-memory/src/cognitive/committee/evaluation/builder.rs:149:14
    |
149 |         self.consensus_threshold
    |              ^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `agents`

error[E0609]: no field `max_concurrent` on type `&mut Committee`
   --> packages/sweetmcp-memory/src/cognitive/committee/evaluation/builder.rs:154:14
    |
154 |         self.max_concurrent = max.max(1);
    |              ^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `agents`

error[E0609]: no field `max_concurrent` on type `&Committee`
   --> packages/sweetmcp-memory/src/cognitive/committee/evaluation/builder.rs:161:14
    |
161 |         self.max_concurrent
    |              ^^^^^^^^^^^^^^ unknown field
    |
    = note: available field is: `agents`

error[E0599]: no variant named `ConsensusReached` found for enum `CommitteeEvent`
  --> packages/sweetmcp-memory/src/cognitive/evolution.rs:69:41
   |
69 |                         CommitteeEvent::ConsensusReached {
   |                                         ^^^^^^^^^^^^^^^^ variant not found in `CommitteeEvent`
   |
  ::: packages/sweetmcp-memory/src/cognitive/committee/consensus/events.rs:9:1
   |
9  | pub enum CommitteeEvent {
   | ----------------------- variant `ConsensusReached` not found here

error[E0026]: variant `CommitteeEvent::SteeringDecision` does not have a field named `continue_rounds`
  --> packages/sweetmcp-memory/src/cognitive/evolution.rs:86:29
   |
86 | ...                   continue_rounds,
   |                       ^^^^^^^^^^^^^^^ variant `CommitteeEvent::SteeringDecision` does not have this field

error[E0027]: pattern does not mention fields `triggered_by_phase`, `round_number`
  --> packages/sweetmcp-memory/src/cognitive/evolution.rs:84:25
   |
84 | /                         CommitteeEvent::SteeringDecision {
85 | |                             feedback,
86 | |                             continue_rounds,
87 | |                         } => {
   | |_________________________^ missing fields `triggered_by_phase`, `round_number`
   |
help: include the missing fields in the pattern
   |
86 -                             continue_rounds,
87 -                         } => {
86 +                             continue_rounds, triggered_by_phase, round_number } => {
   |
help: if you don't care about these missing fields, you can explicitly ignore them
   |
86 -                             continue_rounds,
87 -                         } => {
86 +                             continue_rounds, triggered_by_phase: _, round_number: _ } => {
   |
help: or always ignore missing fields here
   |
86 -                             continue_rounds,
87 -                         } => {
86 +                             continue_rounds, .. } => {
   |

error[E0061]: this function takes 4 arguments but 2 arguments were supplied
  --> packages/sweetmcp-memory/src/cognitive/evolution.rs:99:35
   |
99 |             let committee = match EvaluationCommittee::new(event_tx.clone(), 4).await {
   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^---------------------
   |                                                           |                  |
   |                                                           |                  argument #2 of type `f64` is missing
   |                                                           argument #4 of type `tokio::sync::mpsc::UnboundedSender<CommitteeEvent>` is missing
   |
note: expected `Vec<CommitteeAgent>`, found `Sender<CommitteeEvent>`
  --> packages/sweetmcp-memory/src/cognitive/evolution.rs:99:60
   |
99 |             let committee = match EvaluationCommittee::new(event_tx.clone(), 4).await {
   |                                                            ^^^^^^^^^^^^^^^^
   = note: expected struct `Vec<agents::CommitteeAgent>`
              found struct `tokio::sync::mpsc::Sender<CommitteeEvent>`
note: associated function defined here
  --> packages/sweetmcp-memory/src/cognitive/committee/consensus/committee.rs:51:12
   |
51 |     pub fn new(
   |            ^^^
52 |         agents: Vec<CommitteeAgent>,
   |         ---------------------------
53 |         consensus_threshold: f64,
   |         ------------------------
54 |         max_concurrent: usize,
55 |         event_tx: mpsc::UnboundedSender<CommitteeEvent>,
   |         -----------------------------------------------
help: provide the arguments
   |
99 -             let committee = match EvaluationCommittee::new(event_tx.clone(), 4).await {
99 +             let committee = match EvaluationCommittee::new(/* Vec<agents::CommitteeAgent> */, /* f64 */, 4, /* tokio::sync::mpsc::UnboundedSender<CommitteeEvent> */).await {
   |

error[E0277]: `Committee` is not a future
  --> packages/sweetmcp-memory/src/cognitive/evolution.rs:99:81
   |
99 |             let committee = match EvaluationCommittee::new(event_tx.clone(), 4).await {
   |                                   --------------------------------------------- ^^^^^ `Committee` is not a future
   |                                   |
   |                                   this call returns `Committee`
   |
   = help: the trait `futures::Future` is not implemented for `Committee`
   = note: Committee must be a future or must implement `IntoFuture` to be awaited
   = note: required for `Committee` to implement `std::future::IntoFuture`
help: remove the `.await`
   |
99 -             let committee = match EvaluationCommittee::new(event_tx.clone(), 4).await {
99 +             let committee = match EvaluationCommittee::new(event_tx.clone(), 4) {
   |

error[E0282]: type annotations needed for `std::sync::Arc<_>`
   --> packages/sweetmcp-memory/src/cognitive/evolution.rs:99:17
    |
99  |             let committee = match EvaluationCommittee::new(event_tx.clone(), 4).await {
    |                 ^^^^^^^^^
...
110 |                 PerformanceAnalyzer::new(spec.clone(), committee.clone(), user_objective.clone())
    |                                                                  ----- type must be known at this point
    |
help: consider giving `committee` an explicit type, where the type for type parameter `T` is specified
    |
99  |             let committee: std::sync::Arc<T> = match EvaluationCommittee::new(event_tx.clone(), 4).await {
    |                          +++++++++++++++++++

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/evolution.rs:161:43
    |
161 |                           performance_gain: (latency_improvement
    |  ___________________________________________^
162 | |                             + memory_improvement
163 | |                             + relevance_improvement)
164 | |                             / 3.0,
    | |_________________________________^ expected `f32`, found `f64`

error[E0609]: no field `total_nodes` on type `tree_types::TreeStatistics`
   --> packages/sweetmcp-memory/src/cognitive/evolution.rs:178:31
    |
178 |                         stats.total_nodes, stats.total_visits, stats.max_depth, stats.best_path
    |                               ^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `node_count`, `max_depth`, `avg_branching_factor`, `simulation_count`, `avg_simulation_time_us` ... and 3 others

error[E0609]: no field `total_visits` on type `tree_types::TreeStatistics`
   --> packages/sweetmcp-memory/src/cognitive/evolution.rs:178:50
    |
178 |                         stats.total_nodes, stats.total_visits, stats.max_depth, stats.best_path
    |                                                  ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `node_count`, `max_depth`, `avg_branching_factor`, `simulation_count`, `avg_simulation_time_us` ... and 3 others

error[E0609]: no field `best_path` on type `tree_types::TreeStatistics`
   --> packages/sweetmcp-memory/src/cognitive/evolution.rs:178:87
    |
178 |                         stats.total_nodes, stats.total_visits, stats.max_depth, stats.best_path
    |                                                                                       ^^^^^^^^^ unknown field
    |
    = note: available fields are: `node_count`, `max_depth`, `avg_branching_factor`, `simulation_count`, `avg_simulation_time_us` ... and 3 others

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `objective`
   --> packages/sweetmcp-memory/src/cognitive/evolution.rs:217:17
    |
217 |                 objective: "Optimize for performance".to_string(),
    |                 ^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `constraints`
   --> packages/sweetmcp-memory/src/cognitive/evolution.rs:218:17
    |
218 |                 constraints: vec!["Max memory: 256MB".to_string()],
    |                 ^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `success_criteria`
   --> packages/sweetmcp-memory/src/cognitive/evolution.rs:219:17
    |
219 |                 success_criteria: vec!["Improve latency by 10%".to_string()],
    |                 ^^^^^^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `optimization_type`
   --> packages/sweetmcp-memory/src/cognitive/evolution.rs:220:17
    |
220 |                 optimization_type: OptimizationType::Performance,
    |                 ^^^^^^^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `timeout_ms`
   --> packages/sweetmcp-memory/src/cognitive/evolution.rs:221:17
    |
221 |                 timeout_ms: Some(300_000),
    |                 ^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `max_iterations`
   --> packages/sweetmcp-memory/src/cognitive/evolution.rs:222:17
    |
222 |                 max_iterations: Some(50),
    |                 ^^^^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `target_quality`
   --> packages/sweetmcp-memory/src/cognitive/evolution.rs:223:17
    |
223 |                 target_quality: 0.8,
    |                 ^^^^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `content_type`
   --> packages/sweetmcp-memory/src/cognitive/evolution.rs:224:17
    |
224 |                 content_type: crate::cognitive::types::ContentType {
    |                 ^^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `baseline_metrics`
   --> packages/sweetmcp-memory/src/cognitive/evolution.rs:233:17
    |
233 |                 baseline_metrics: crate::cognitive::types::BaselineMetrics {
    |                 ^^^^^^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `evolution_rules`
   --> packages/sweetmcp-memory/src/cognitive/evolution.rs:238:17
    |
238 |                 evolution_rules: crate::cognitive::types::EvolutionRules {
    |                 ^^^^^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0599]: no method named `clone` found for struct `SubsystemCoordinator` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/manager.rs:244:44
    |
244 |         let coordinator = self.coordinator.clone();
    |                                            ^^^^^ method not found in `SubsystemCoordinator`
    |
   ::: packages/sweetmcp-memory/src/cognitive/subsystem_coordinator.rs:17:1
    |
17  | pub struct SubsystemCoordinator {
    | ------------------------------- method `clone` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `clone`, perhaps you need to implement it:
            candidate #1: `Clone`

error[E0599]: no function or associated item named `new_with_error` found for struct `PendingMemory` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/manager.rs:382:35
    |
382 |             return PendingMemory::new_with_error(
    |                                   ^^^^^^^^^^^^^^ function or associated item not found in `PendingMemory`
    |
   ::: packages/sweetmcp-memory/src/memory/pending_types.rs:36:1
    |
36  | pub struct PendingMemory {
    | ------------------------ function or associated item `new_with_error` not found for this struct
    |
note: if you're trying to build a new `PendingMemory`, consider using `PendingMemory::new` which returns `PendingMemory`
   --> packages/sweetmcp-memory/src/memory/pending_types.rs:42:5
    |
42  |     pub fn new(rx: oneshot::Receiver<Result<MemoryNode>>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is a method `unit_error` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-util-0.3.31/src/future/future/mod.rs:537:5
    |
537 | /     fn unit_error(self) -> UnitError<Self>
538 | |     where
539 | |         Self: Sized,
    | |____________________^

error[E0599]: no function or associated item named `new_from_channel` found for struct `PendingMemory` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/manager.rs:387:24
    |
387 |         PendingMemory::new_from_channel(result_rx)
    |                        ^^^^^^^^^^^^^^^^ function or associated item not found in `PendingMemory`
    |
   ::: packages/sweetmcp-memory/src/memory/pending_types.rs:36:1
    |
36  | pub struct PendingMemory {
    | ------------------------ function or associated item `new_from_channel` not found for this struct
    |
note: if you're trying to build a new `PendingMemory`, consider using `PendingMemory::new` which returns `PendingMemory`
   --> packages/sweetmcp-memory/src/memory/pending_types.rs:42:5
    |
42  |     pub fn new(rx: oneshot::Receiver<Result<MemoryNode>>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/manager.rs:391:9
    |
390 |     fn get_memory(&self, id: &str) -> MemoryQuery {
    |                                       ----------- expected `MemoryQuery` because of return type
391 |         self.legacy_manager.get_memory(id)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `MemoryQuery`, found `Pin<Box<...>>`
    |
    = note: expected struct `MemoryQuery`
               found struct `Pin<Box<(dyn futures::Future<Output = std::result::Result<std::option::Option<MemoryNode>, utils::error::Error>> + std::marker::Send + 'static)>>`

error[E0599]: no function or associated item named `new_with_error` found for struct `PendingMemory` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/manager.rs:404:35
    |
404 |             return PendingMemory::new_with_error(
    |                                   ^^^^^^^^^^^^^^ function or associated item not found in `PendingMemory`
    |
   ::: packages/sweetmcp-memory/src/memory/pending_types.rs:36:1
    |
36  | pub struct PendingMemory {
    | ------------------------ function or associated item `new_with_error` not found for this struct
    |
note: if you're trying to build a new `PendingMemory`, consider using `PendingMemory::new` which returns `PendingMemory`
   --> packages/sweetmcp-memory/src/memory/pending_types.rs:42:5
    |
42  |     pub fn new(rx: oneshot::Receiver<Result<MemoryNode>>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is a method `unit_error` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-util-0.3.31/src/future/future/mod.rs:537:5
    |
537 | /     fn unit_error(self) -> UnitError<Self>
538 | |     where
539 | |         Self: Sized,
    | |____________________^

error[E0599]: no function or associated item named `new_from_channel` found for struct `PendingMemory` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/manager.rs:409:24
    |
409 |         PendingMemory::new_from_channel(result_rx)
    |                        ^^^^^^^^^^^^^^^^ function or associated item not found in `PendingMemory`
    |
   ::: packages/sweetmcp-memory/src/memory/pending_types.rs:36:1
    |
36  | pub struct PendingMemory {
    | ------------------------ function or associated item `new_from_channel` not found for this struct
    |
note: if you're trying to build a new `PendingMemory`, consider using `PendingMemory::new` which returns `PendingMemory`
   --> packages/sweetmcp-memory/src/memory/pending_types.rs:42:5
    |
42  |     pub fn new(rx: oneshot::Receiver<Result<MemoryNode>>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/manager.rs:413:9
    |
412 |     fn delete_memory(&self, id: &str) -> PendingDeletion {
    |                                          --------------- expected `PendingDeletion` because of return type
413 |         self.legacy_manager.delete_memory(id)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `PendingDeletion`, found `Pin<Box<...>>`
    |
    = note: expected struct `PendingDeletion`
               found struct `Pin<Box<(dyn futures::Future<Output = std::result::Result<bool, utils::error::Error>> + std::marker::Send + 'static)>>`

error[E0061]: this method takes 2 arguments but 1 argument was supplied
   --> packages/sweetmcp-memory/src/cognitive/manager.rs:417:29
    |
417 |         self.legacy_manager.search_by_content(query)
    |                             ^^^^^^^^^^^^^^^^^------- argument #2 of type `usize` is missing
    |
note: method defined here
   --> packages/sweetmcp-memory/src/memory/memory_manager/trait_def.rs:98:8
    |
98  |     fn search_by_content(&self, query: &str, limit: usize) -> MemoryStream;
    |        ^^^^^^^^^^^^^^^^^                     -----
help: provide the argument
    |
417 |         self.legacy_manager.search_by_content(query, /* usize */)
    |                                                    +++++++++++++

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/manager.rs:424:9
    |
423 |     ) -> PendingRelationship {
    |          ------------------- expected `PendingRelationship` because of return type
424 |         self.legacy_manager.create_relationship(relationship)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `PendingRelationship`, found `Pin<Box<...>>`
    |
    = note: expected struct `PendingRelationship`
               found struct `Pin<Box<(dyn futures::Future<Output = std::result::Result<MemoryRelationship, utils::error::Error>> + std::marker::Send + 'static)>>`

error[E0061]: this method takes 2 arguments but 1 argument was supplied
   --> packages/sweetmcp-memory/src/cognitive/manager.rs:428:29
    |
428 |         self.legacy_manager.get_relationships(memory_id)
    |                             ^^^^^^^^^^^^^^^^^----------- argument #2 of type `std::option::Option<&str>` is missing
    |
note: method defined here
   --> packages/sweetmcp-memory/src/memory/memory_manager/trait_def.rs:79:8
    |
79  |     fn get_relationships(&self, memory_id: &str, relationship_type: Option<&str>) -> MemoryStream;
    |        ^^^^^^^^^^^^^^^^^                         -----------------
help: provide the argument
    |
428 |         self.legacy_manager.get_relationships(memory_id, /* std::option::Option<&str> */)
    |                                                        +++++++++++++++++++++++++++++++++

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/manager.rs:428:9
    |
427 |     fn get_relationships(&self, memory_id: &str) -> RelationshipStream {
    |                                                     ------------------ expected `RelationshipStream` because of return type
428 |         self.legacy_manager.get_relationships(memory_id)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `RelationshipStream`, found `MemoryStream`

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/manager.rs:432:9
    |
431 |     fn delete_relationship(&self, id: &str) -> PendingDeletion {
    |                                                --------------- expected `PendingDeletion` because of return type
432 |         self.legacy_manager.delete_relationship(id)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `PendingDeletion`, found `Pin<Box<...>>`
    |
    = note: expected struct `PendingDeletion`
               found struct `Pin<Box<(dyn futures::Future<Output = std::result::Result<bool, utils::error::Error>> + std::marker::Send + 'static)>>`

error[E0599]: no method named `query_by_type` found for struct `SurrealDBMemoryManager` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/manager.rs:436:29
    |
436 |         self.legacy_manager.query_by_type(memory_type)
    |                             ^^^^^^^^^^^^^ method not found in `SurrealDBMemoryManager`
    |
   ::: packages/sweetmcp-memory/src/memory/memory_manager/core.rs:22:1
    |
22  | pub struct SurrealDBMemoryManager {
    | --------------------------------- method `query_by_type` not found for this struct

error[E0609]: no field `baseline_metrics` on type `std::sync::Arc<coordinator_types::OptimizationSpec>`
  --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_generator.rs:92:48
   |
92 |         let baseline = &self.optimization_spec.baseline_metrics;
   |                                                ^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `content_type` on type `std::sync::Arc<coordinator_types::OptimizationSpec>`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_generator.rs:134:52
    |
134 |         let content_type = &self.optimization_spec.content_type;
    |                                                    ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `evolution_rules` on type `std::sync::Arc<coordinator_types::OptimizationSpec>`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_generator.rs:154:45
    |
154 |         for rule in &self.optimization_spec.evolution_rules {
    |                                             ^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `baseline_metrics` on type `std::sync::Arc<coordinator_types::OptimizationSpec>`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_generator.rs:274:81
    |
274 |         if action.contains("latency") && state.latency > self.optimization_spec.baseline_metrics.latency {
    |                                                                                 ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `baseline_metrics` on type `std::sync::Arc<coordinator_types::OptimizationSpec>`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_generator.rs:278:79
    |
278 |         if action.contains("memory") && state.memory > self.optimization_spec.baseline_metrics.memory {
    |                                                                               ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `baseline_metrics` on type `std::sync::Arc<coordinator_types::OptimizationSpec>`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_generator.rs:282:85
    |
282 |         if action.contains("relevance") && state.relevance < self.optimization_spec.baseline_metrics.relevance {
    |                                                                                     ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0689]: can't call method `min` on ambiguous numeric type `{float}`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_generator.rs:292:18
    |
292 |         priority.min(1.0)
    |                  ^^^
    |
help: you must specify a type for this binding, like `f32`
    |
271 |         let mut priority: f32 = 0.5; // Base priority
    |                         +++++

error[E0609]: no field `metadata` on type `&node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_validator.rs:113:52
    |
113 |         if action.contains("parallelize") && state.metadata.parallelization_level > 0.8 {
    |                                                    ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `&node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_validator.rs:118:39
    |
118 |         for existing_action in &state.metadata.applied_actions {
    |                                       ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `&node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_validator.rs:125:18
    |
125 |         if state.metadata.optimization_level > 0.9 && action.contains("aggressive") {
    |                  ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `baseline_metrics` on type `std::sync::Arc<coordinator_types::OptimizationSpec>`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_validator.rs:133:48
    |
133 |         let baseline = &self.optimization_spec.baseline_metrics;
    |                                                ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `content_type` on type `std::sync::Arc<coordinator_types::OptimizationSpec>`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_validator.rs:134:52
    |
134 |         let content_type = &self.optimization_spec.content_type;
    |                                                    ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `evolution_rules` on type `std::sync::Arc<coordinator_types::OptimizationSpec>`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_validator.rs:157:45
    |
157 |         for rule in &self.optimization_spec.evolution_rules {
    |                                             ^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `metadata` on type `&node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_validator.rs:185:54
    |
185 |         if action.contains("vectorization") && state.metadata.optimization_level < 0.3 {
    |                                                      ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `metadata` on type `&node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_validator.rs:217:32
    |
217 |         let total_risk = state.metadata.risk_level + risk_score;
    |                                ^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0277]: `ActionGenerator` doesn't implement `std::fmt::Debug`
  --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_coordinator.rs:27:5
   |
16 | #[derive(Debug)]
   |          ----- in this derive macro expansion
...
27 |     pub action_generator: Option<ActionGenerator>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::fmt::Debug` is not implemented for `ActionGenerator`
   |
   = note: add `#[derive(Debug)]` to `ActionGenerator` or manually `impl std::fmt::Debug for ActionGenerator`
   = help: the trait `std::fmt::Debug` is implemented for `std::option::Option<T>`

error[E0277]: the trait bound `std::time::Instant: Serialize` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_coordinator.rs:107:24
     |
107  |   #[derive(Debug, Clone, Serialize, Deserialize)]
     |                          ^^^^^^^^^ the trait `Serialize` is not implemented for `std::time::Instant`
...
123  | /     /// Last update timestamp
124  | |     pub last_updated: Instant,
     | |_____________________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1106 others
note: required by a bound in `llm::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `std::time::Instant: Deserialize<'_>` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_coordinator.rs:124:23
     |
124  |     pub last_updated: Instant,
     |                       ^^^^^^^ the trait `Deserialize<'_>` is not implemented for `std::time::Instant`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 1028 others
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `std::time::Instant: Deserialize<'_>` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_coordinator.rs:124:23
     |
124  |     pub last_updated: Instant,
     |                       ^^^^^^^ the trait `Deserialize<'_>` is not implemented for `std::time::Instant`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 1028 others
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `std::time::Instant: Deserialize<'_>` is not satisfied
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_coordinator.rs:107:35
    |
107 | #[derive(Debug, Clone, Serialize, Deserialize)]
    |                                   ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `std::time::Instant`
    |
    = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `std::time::Instant` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `Deserialize<'de>`:
              `&'a [u8]` implements `Deserialize<'de>`
              `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
              `&'a std::path::Path` implements `Deserialize<'de>`
              `&'a str` implements `Deserialize<'de>`
              `()` implements `Deserialize<'de>`
              `(T,)` implements `Deserialize<'de>`
              `(T0, T1)` implements `Deserialize<'de>`
              `(T0, T1, T2)` implements `Deserialize<'de>`
            and 1028 others
note: required by a bound in `llm::_::_serde::__private::de::missing_field`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
    |
23  | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
    |        ------------- required by a bound in this function
24  | where
25  |     V: Deserialize<'de>,
    |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0616]: field `committee` of struct `ActionGenerator` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/mod.rs:189:70
    |
189 |         self.applicator = ActionApplicator::new(spec, self.generator.committee.clone());
    |                                                                      ^^^^^^^^^ private field

error[E0599]: no method named `values` found for struct `Vec<usize>` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/tree_analyzer.rs:35:39
   |
35 |         for child_id in node.children.values() {
   |                                       ^^^^^^ method not found in `Vec<usize>`

error[E0599]: no method named `values` found for struct `Vec<usize>` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/tree_analyzer.rs:94:39
   |
94 |         for child_id in root.children.values() {
   |                                       ^^^^^^ method not found in `Vec<usize>`

error[E0277]: a value of type `Vec<u64>` cannot be built from an iterator over elements of type `u32`
    --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/tree_analyzer.rs:136:74
     |
136  |         let mut visits: Vec<u64> = tree.values().map(|node| node.visits).collect();
     |                                                                          ^^^^^^^ value of type `Vec<u64>` cannot be built from `std::iter::Iterator<Item=u32>`
     |
     = help: the trait `FromIterator<u32>` is not implemented for `Vec<u64>`
             but trait `FromIterator<u64>` is implemented for it
     = help: for that trait implementation, expected `u64`, found `u32`
note: the method call chain might not have had the expected associated types
    --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/tree_analyzer.rs:136:50
     |
136  |         let mut visits: Vec<u64> = tree.values().map(|node| node.visits).collect();
     |                                    ---- -------- ^^^^^^^^^^^^^^^^^^^^^^^ `Iterator::Item` changed to `u32` here
     |                                    |    |
     |                                    |    `Iterator::Item` is `&MCTSNode` here
     |                                    this expression has type `&HashMap<String, MCTSNode>`
note: required by a bound in `std::iter::Iterator::collect`
    --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs:2014:19
     |
2014 |     fn collect<B: FromIterator<Self::Item>>(self) -> B
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::collect`

error[E0599]: no method named `values` found for struct `Vec<usize>` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/path_finder.rs:28:43
   |
28 |             for child_id in node.children.values() {
   |                                           ^^^^^^ method not found in `Vec<usize>`

error[E0609]: no field `applied_action` on type `&MCTSNode`
  --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/path_finder.rs:40:50
   |
40 |                     if let Some(action) = &child.applied_action {
   |                                                  ^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `state`, `visits`, `total_reward`, `children`, `parent` ... and 5 others

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/path_finder.rs:81:25
   |
81 |                 visits: node.visits,
   |                         ^^^^^^^^^^^ expected `u64`, found `u32`

error[E0599]: no method named `values` found for struct `Vec<usize>` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/path_finder.rs:89:39
   |
89 |         for child_id in node.children.values() {
   |                                       ^^^^^^ method not found in `Vec<usize>`

error[E0609]: no field `applied_action` on type `&MCTSNode`
  --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/path_finder.rs:91:46
   |
91 |                 if let Some(action) = &child.applied_action {
   |                                              ^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `state`, `visits`, `total_reward`, `children`, `parent` ... and 5 others

error[E0599]: no function or associated item named `find_characteristic_nodes` found for struct `BasicNodeSearch` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/structure_analysis.rs:78:53
   |
78 |         analysis.characteristic_nodes = NodeSearch::find_characteristic_nodes(tree);
   |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^ function or associated item not found in `BasicNodeSearch`
   |
  ::: packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_basic.rs:11:1
   |
11 | pub struct BasicNodeSearch;
   | -------------------------- function or associated item `find_characteristic_nodes` not found for this struct
   |
help: there is an associated function `find_terminal_nodes` with a similar name
   |
78 -         analysis.characteristic_nodes = NodeSearch::find_characteristic_nodes(tree);
78 +         analysis.characteristic_nodes = NodeSearch::find_terminal_nodes(tree);
   |

error[E0599]: no function or associated item named `find_bottleneck_nodes` found for struct `BasicNodeSearch` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/structure_analysis.rs:81:44
   |
81 |         analysis.bottlenecks = NodeSearch::find_bottleneck_nodes(tree);
   |                                            ^^^^^^^^^^^^^^^^^^^^^ function or associated item not found in `BasicNodeSearch`
   |
  ::: packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_basic.rs:11:1
   |
11 | pub struct BasicNodeSearch;
   | -------------------------- function or associated item `find_bottleneck_nodes` not found for this struct
   |
help: there is an associated function `find_leaf_nodes` with a similar name
   |
81 -         analysis.bottlenecks = NodeSearch::find_bottleneck_nodes(tree);
81 +         analysis.bottlenecks = NodeSearch::find_leaf_nodes(tree);
   |

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_basic.rs:27:29
   |
27 |                     visits: node.visits,
   |                             ^^^^^^^^^^^ expected `u64`, found `u32`

error[E0599]: no method named `calculate_depth` found for reference `&MCTSNode` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_basic.rs:29:33
   |
29 |                     depth: node.calculate_depth(tree),
   |                                 ^^^^^^^^^^^^^^^ method not found in `&MCTSNode`

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_basic.rs:55:30
   |
55 |             if node.visits < min_visits {
   |                -----------   ^^^^^^^^^^ expected `u32`, found `u64`
   |                |
   |                expected because this is `u32`
   |
help: you can convert `node.visits` from `u32` to `u64`, matching the type of `min_visits`
   |
55 |             if u64::from(node.visits) < min_visits {
   |                ++++++++++           +

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_basic.rs:61:30
   |
61 |             if node.visits > max_visits {
   |                -----------   ^^^^^^^^^^ expected `u32`, found `u64`
   |                |
   |                expected because this is `u32`
   |
help: you can convert `node.visits` from `u32` to `u64`, matching the type of `max_visits`
   |
61 |             if u64::from(node.visits) > max_visits {
   |                ++++++++++           +

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_basic.rs:101:25
    |
101 |                 visits: node.visits,
    |                         ^^^^^^^^^^^ expected `u64`, found `u32`

error[E0599]: no method named `calculate_depth` found for reference `&MCTSNode` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_basic.rs:103:29
    |
103 |                 depth: node.calculate_depth(tree),
    |                             ^^^^^^^^^^^^^^^ method not found in `&MCTSNode`

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_statistics.rs:137:29
    |
137 |             total_visits += visits;
    |                             ^^^^^^ expected `u64`, found `u32`

error[E0277]: cannot add-assign `u32` to `u64`
   --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_statistics.rs:137:26
    |
137 |             total_visits += visits;
    |                          ^^ no implementation for `u64 += u32`
    |
    = help: the trait `AddAssign<u32>` is not implemented for `u64`
    = help: the following other types implement trait `AddAssign<Rhs>`:
              `u64` implements `AddAssign<&u64>`
              `u64` implements `AddAssign<zerocopy::byteorder::U64<O>>`
              `u64` implements `AddAssign`

error[E0308]: mismatched types
    --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_statistics.rs:142:41
     |
142  |             min_visits = min_visits.min(visits);
     |                                     --- ^^^^^^ expected `u64`, found `u32`
     |                                     |
     |                                     arguments to this method are incorrect
     |
help: the return type of this call is `u32` due to the type of the argument passed
    --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_statistics.rs:142:26
     |
142  |             min_visits = min_visits.min(visits);
     |                          ^^^^^^^^^^^^^^^------^
     |                                         |
     |                                         this argument influences the return type of `min`
note: method defined here
    --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/cmp.rs:1051:8
     |
1051 |     fn min(self, other: Self) -> Self
     |        ^^^
help: you can convert a `u32` to a `u64`
     |
142  |             min_visits = min_visits.min(visits.into());
     |                                               +++++++

error[E0308]: mismatched types
    --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_statistics.rs:143:41
     |
143  |             max_visits = max_visits.max(visits);
     |                                     --- ^^^^^^ expected `u64`, found `u32`
     |                                     |
     |                                     arguments to this method are incorrect
     |
help: the return type of this call is `u32` due to the type of the argument passed
    --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_statistics.rs:143:26
     |
143  |             max_visits = max_visits.max(visits);
     |                          ^^^^^^^^^^^^^^^------^
     |                                         |
     |                                         this argument influences the return type of `max`
note: method defined here
    --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/cmp.rs:1012:8
     |
1012 |     fn max(self, other: Self) -> Self
     |        ^^^
help: you can convert a `u32` to a `u64`
     |
143  |             max_visits = max_visits.max(visits.into());
     |                                               +++++++

error[E0277]: a value of type `Vec<u64>` cannot be built from an iterator over elements of type `u32`
    --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_statistics.rs:212:70
     |
212  |         let visits: Vec<u64> = tree.values().map(|node| node.visits).collect();
     |                                                                      ^^^^^^^ value of type `Vec<u64>` cannot be built from `std::iter::Iterator<Item=u32>`
     |
     = help: the trait `FromIterator<u32>` is not implemented for `Vec<u64>`
             but trait `FromIterator<u64>` is implemented for it
     = help: for that trait implementation, expected `u64`, found `u32`
note: the method call chain might not have had the expected associated types
    --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_statistics.rs:212:46
     |
212  |         let visits: Vec<u64> = tree.values().map(|node| node.visits).collect();
     |                                ---- -------- ^^^^^^^^^^^^^^^^^^^^^^^ `Iterator::Item` changed to `u32` here
     |                                |    |
     |                                |    `Iterator::Item` is `&MCTSNode` here
     |                                this expression has type `&HashMap<String, MCTSNode>`
note: required by a bound in `std::iter::Iterator::collect`
    --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs:2014:19
     |
2014 |     fn collect<B: FromIterator<Self::Item>>(self) -> B
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::collect`

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_advanced.rs:30:21
   |
30 |                     visits,
   |                     ^^^^^^ expected `u64`, found `u32`
   |
help: you can convert a `u32` to a `u64`
   |
30 |                     visits: visits.into(),
   |                     +++++++       +++++++

error[E0599]: no method named `calculate_depth` found for reference `&MCTSNode` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_advanced.rs:32:33
   |
32 |                     depth: node.calculate_depth(tree),
   |                                 ^^^^^^^^^^^^^^^ method not found in `&MCTSNode`

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_advanced.rs:37:73
   |
37 |             if visits > result.most_visited_node.as_ref().map_or(0, |n| n.visits) {
   |                                                                         ^^^^^^^^ expected `u32`, found `u64`
   |
help: you can convert a `u64` to a `u32` and panic if the converted value doesn't fit
   |
37 |             if visits > result.most_visited_node.as_ref().map_or(0, |n| n.visits.try_into().unwrap()) {
   |                                                                                 ++++++++++++++++++++

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_advanced.rs:41:21
   |
41 |                     visits,
   |                     ^^^^^^ expected `u64`, found `u32`
   |
help: you can convert a `u32` to a `u64`
   |
41 |                     visits: visits.into(),
   |                     +++++++       +++++++

error[E0599]: no method named `calculate_depth` found for reference `&MCTSNode` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_advanced.rs:43:33
   |
43 |                     depth: node.calculate_depth(tree),
   |                                 ^^^^^^^^^^^^^^^ method not found in `&MCTSNode`

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_advanced.rs:52:21
   |
52 |                     visits,
   |                     ^^^^^^ expected `u64`, found `u32`
   |
help: you can convert a `u32` to a `u64`
   |
52 |                     visits: visits.into(),
   |                     +++++++       +++++++

error[E0599]: no method named `calculate_depth` found for reference `&MCTSNode` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_advanced.rs:54:33
   |
54 |                     depth: node.calculate_depth(tree),
   |                                 ^^^^^^^^^^^^^^^ method not found in `&MCTSNode`

error[E0599]: no method named `calculate_depth` found for reference `&MCTSNode` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_advanced.rs:59:30
   |
59 |             let depth = node.calculate_depth(tree);
   |                              ^^^^^^^^^^^^^^^ method not found in `&MCTSNode`

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_advanced.rs:64:21
   |
64 |                     visits,
   |                     ^^^^^^ expected `u64`, found `u32`
   |
help: you can convert a `u32` to a `u64`
   |
64 |                     visits: visits.into(),
   |                     +++++++       +++++++

error[E0599]: no method named `values` found for struct `Vec<usize>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_advanced.rs:102:60
    |
102 |                 let child_visits: Vec<u64> = node.children.values()
    |                                                            ^^^^^^ method not found in `Vec<usize>`

error[E0599]: no method named `calculate_depth` found for reference `&MCTSNode` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_advanced.rs:125:30
    |
125 |             let depth = node.calculate_depth(tree);
    |                              ^^^^^^^^^^^^^^^ method not found in `&MCTSNode`

error[E0277]: a value of type `u64` cannot be made by summing an iterator over elements of type `u32`
    --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_advanced.rs:150:69
     |
150  |         let avg_visits: f64 = tree.values().map(|n| n.visits).sum::<u64>() as f64 / total_nodes as f64;
     |                                                               ---   ^^^ value of type `u64` cannot be made by summing a `std::iter::Iterator<Item=u32>`
     |                                                               |
     |                                                               required by a bound introduced by this call
     |
     = help: the trait `Sum<u32>` is not implemented for `u64`
     = help: the following other types implement trait `Sum<A>`:
               `u64` implements `Sum<&u64>`
               `u64` implements `Sum`
note: the method call chain might not have had the expected associated types
    --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_advanced.rs:150:45
     |
150  |         let avg_visits: f64 = tree.values().map(|n| n.visits).sum::<u64>() as f64 / total_nodes as f64;
     |                               ---- -------- ^^^^^^^^^^^^^^^^^ `Iterator::Item` changed to `u32` here
     |                               |    |
     |                               |    `Iterator::Item` is `&MCTSNode` here
     |                               this expression has type `&HashMap<String, MCTSNode>`
note: required by a bound in `std::iter::Iterator::sum`
    --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs:3578:12
     |
3575 |     fn sum<S>(self) -> S
     |        --- required by a bound in this associated function
...
3578 |         S: Sum<Self::Item>,
     |            ^^^^^^^^^^^^^^^ required by this bound in `Iterator::sum`

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_advanced.rs:157:54
    |
157 |             if reward > avg_reward * 2.0 && visits < (avg_visits * 0.5) as u64 {
    |                                             ------   ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u32`, found `u64`
    |                                             |
    |                                             expected because this is `u32`
    |
help: you can convert `visits` from `u32` to `u64`, matching the type of `(avg_visits * 0.5) as u64`
    |
157 |             if reward > avg_reward * 2.0 && u64::from(visits) < (avg_visits * 0.5) as u64 {
    |                                             ++++++++++      +

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_advanced.rs:167:54
    |
167 |             if reward < avg_reward * 0.5 && visits > (avg_visits * 2.0) as u64 {
    |                                             ------   ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u32`, found `u64`
    |                                             |
    |                                             expected because this is `u32`
    |
help: you can convert `visits` from `u32` to `u64`, matching the type of `(avg_visits * 2.0) as u64`
    |
167 |             if reward < avg_reward * 0.5 && u64::from(visits) > (avg_visits * 2.0) as u64 {
    |                                             ++++++++++      +

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_advanced.rs:214:37
    |
214 |                     current_visits: node.visits,
    |                                     ^^^^^^^^^^^ expected `u64`, found `u32`

error[E0599]: no method named `calculate_depth` found for reference `&MCTSNode` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_advanced.rs:215:33
    |
215 |                     depth: node.calculate_depth(tree),
    |                                 ^^^^^^^^^^^^^^^ method not found in `&MCTSNode`

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_advanced.rs:228:41
    |
228 |                         current_visits: node.visits,
    |                                         ^^^^^^^^^^^ expected `u64`, found `u32`

error[E0599]: no method named `calculate_depth` found for reference `&MCTSNode` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_advanced.rs:229:37
    |
229 |                         depth: node.calculate_depth(tree),
    |                                     ^^^^^^^^^^^^^^^ method not found in `&MCTSNode`

error[E0599]: no function or associated item named `find_characteristic_nodes` found for struct `BasicNodeSearch` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/mod.rs:66:48
   |
66 |         let characteristic_nodes = NodeSearch::find_characteristic_nodes(tree);
   |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^ function or associated item not found in `BasicNodeSearch`
   |
  ::: packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_basic.rs:11:1
   |
11 | pub struct BasicNodeSearch;
   | -------------------------- function or associated item `find_characteristic_nodes` not found for this struct
   |
help: there is an associated function `find_terminal_nodes` with a similar name
   |
66 -         let characteristic_nodes = NodeSearch::find_characteristic_nodes(tree);
66 +         let characteristic_nodes = NodeSearch::find_terminal_nodes(tree);
   |

error[E0599]: no function or associated item named `find_bottleneck_nodes` found for struct `BasicNodeSearch` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/mod.rs:67:39
   |
67 |         let bottlenecks = NodeSearch::find_bottleneck_nodes(tree);
   |                                       ^^^^^^^^^^^^^^^^^^^^^ function or associated item not found in `BasicNodeSearch`
   |
  ::: packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_basic.rs:11:1
   |
11 | pub struct BasicNodeSearch;
   | -------------------------- function or associated item `find_bottleneck_nodes` not found for this struct
   |
help: there is an associated function `find_leaf_nodes` with a similar name
   |
67 -         let bottlenecks = NodeSearch::find_bottleneck_nodes(tree);
67 +         let bottlenecks = NodeSearch::find_leaf_nodes(tree);
   |

error[E0599]: no function or associated item named `find_bottleneck_nodes` found for struct `BasicNodeSearch` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/mod.rs:112:39
    |
112 |         let bottlenecks = NodeSearch::find_bottleneck_nodes(tree);
    |                                       ^^^^^^^^^^^^^^^^^^^^^ function or associated item not found in `BasicNodeSearch`
    |
   ::: packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_basic.rs:11:1
    |
11  | pub struct BasicNodeSearch;
    | -------------------------- function or associated item `find_bottleneck_nodes` not found for this struct
    |
help: there is an associated function `find_leaf_nodes` with a similar name
    |
112 -         let bottlenecks = NodeSearch::find_bottleneck_nodes(tree);
112 +         let bottlenecks = NodeSearch::find_leaf_nodes(tree);
    |

error[E0599]: no function or associated item named `from_tree` found for struct `tree_types::TreeStatistics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/mcts/controller.rs:149:25
    |
149 |         TreeStatistics::from_tree(&self.tree, &self.root_id)
    |                         ^^^^^^^^^ function or associated item not found in `tree_types::TreeStatistics`
    |
   ::: packages/sweetmcp-memory/src/cognitive/mcts/types/tree_types.rs:588:1
    |
588 | pub struct TreeStatistics {
    | ------------------------- function or associated item `from_tree` not found for this struct
    |
note: if you're trying to build a new `tree_types::TreeStatistics`, consider using `tree_types::TreeStatistics::new` which returns `tree_types::TreeStatistics`
   --> packages/sweetmcp-memory/src/cognitive/mcts/types/tree_types.rs:609:5
    |
609 |     pub fn new() -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^
help: there is an associated function `from_ref` with a similar name
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-core-0.5.2/src/extract/from_ref.rs:15:5
    |
15  |     fn from_ref(input: &T) -> Self;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `analyze_tree_structure` found for struct `TreeAnalyzer` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/mcts/controller.rs:155:23
    |
155 |         self.analyzer.analyze_tree_structure(&self.tree, &self.root_id)
    |                       ^^^^^^^^^^^^^^^^^^^^^^ method not found in `TreeAnalyzer`
    |
   ::: packages/sweetmcp-memory/src/cognitive/mcts/analysis/tree_analyzer.rs:10:1
    |
10  | pub struct TreeAnalyzer;
    | ----------------------- method `analyze_tree_structure` not found for this struct

error[E0599]: no method named `find_bottlenecks` found for struct `TreeAnalyzer` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/mcts/controller.rs:167:23
    |
167 |         self.analyzer.find_bottlenecks(&self.tree, &self.root_id)
    |                       ^^^^^^^^^^^^^^^^ method not found in `TreeAnalyzer`
    |
   ::: packages/sweetmcp-memory/src/cognitive/mcts/analysis/tree_analyzer.rs:10:1
    |
10  | pub struct TreeAnalyzer;
    | ----------------------- method `find_bottlenecks` not found for this struct

error[E0061]: this function takes 1 argument but 2 arguments were supplied
   --> packages/sweetmcp-memory/src/cognitive/mcts/controller.rs:295:25
    |
295 |         let root_node = MCTSNode::new_root(initial_state, untried_actions);
    |                         ^^^^^^^^^^^^^^^^^^                --------------- unexpected argument #2 of type `Vec<std::string::String>`
    |
note: associated function defined here
   --> packages/sweetmcp-memory/src/cognitive/mcts/types/node_types.rs:141:12
    |
141 |     pub fn new_root(state: CodeState) -> Self {
    |            ^^^^^^^^
help: remove the extra argument
    |
295 -         let root_node = MCTSNode::new_root(initial_state, untried_actions);
295 +         let root_node = MCTSNode::new_root(initial_state);
    |

error[E0609]: no field `convergence_rate` on type `tree_types::TreeStatistics`
   --> packages/sweetmcp-memory/src/cognitive/mcts/execution.rs:324:65
    |
324 |         if current_iteration > self.max_iterations / 2 && stats.convergence_rate < 0.3 {
    |                                                                 ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `node_count`, `max_depth`, `avg_branching_factor`, `simulation_count`, `avg_simulation_time_us` ... and 3 others

error[E0609]: no field `total_nodes` on type `tree_types::TreeStatistics`
   --> packages/sweetmcp-memory/src/cognitive/mcts/execution.rs:334:18
    |
334 |         if stats.total_nodes > 10000 {
    |                  ^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `node_count`, `max_depth`, `avg_branching_factor`, `simulation_count`, `avg_simulation_time_us` ... and 3 others

error[E0616]: field `exploration_constant` of struct `TreeOperations` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/execution.rs:366:50
    |
366 |             let current_constant = self.tree_ops.exploration_constant;
    |                                                  ^^^^^^^^^^^^^^^^^^^^ private field

error[E0616]: field `exploration_constant` of struct `TreeOperations` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/execution.rs:367:27
    |
367 |             self.tree_ops.exploration_constant = (current_constant * 1.1).min(2.0);
    |                           ^^^^^^^^^^^^^^^^^^^^ private field

error[E0616]: field `exploration_constant` of struct `TreeOperations` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/execution.rs:368:74
    |
368 |             debug!("Increased exploration constant to {}", self.tree_ops.exploration_constant);
    |                                                                          ^^^^^^^^^^^^^^^^^^^^ private field

error[E0616]: field `exploration_constant` of struct `TreeOperations` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/execution.rs:371:50
    |
371 |             let current_constant = self.tree_ops.exploration_constant;
    |                                                  ^^^^^^^^^^^^^^^^^^^^ private field

error[E0616]: field `exploration_constant` of struct `TreeOperations` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/execution.rs:372:27
    |
372 |             self.tree_ops.exploration_constant = (current_constant * 0.9).max(0.5);
    |                           ^^^^^^^^^^^^^^^^^^^^ private field

error[E0616]: field `exploration_constant` of struct `TreeOperations` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/execution.rs:373:74
    |
373 |             debug!("Decreased exploration constant to {}", self.tree_ops.exploration_constant);
    |                                                                          ^^^^^^^^^^^^^^^^^^^^ private field

error[E0609]: no field `best_performance_score` on type `tree_types::TreeStatistics`
   --> packages/sweetmcp-memory/src/cognitive/mcts/execution.rs:399:61
    |
399 |             best_performance_score: result.final_statistics.best_performance_score,
    |                                                             ^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `node_count`, `max_depth`, `avg_branching_factor`, `simulation_count`, `avg_simulation_time_us` ... and 3 others

error[E0609]: no field `total_nodes` on type `tree_types::TreeStatistics`
   --> packages/sweetmcp-memory/src/cognitive/mcts/execution.rs:400:59
    |
400 |             total_nodes_explored: result.final_statistics.total_nodes,
    |                                                           ^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `node_count`, `max_depth`, `avg_branching_factor`, `simulation_count`, `avg_simulation_time_us` ... and 3 others

error[E0609]: no field `average_branching_factor` on type `tree_types::TreeStatistics`
   --> packages/sweetmcp-memory/src/cognitive/mcts/execution.rs:405:63
    |
405 |             average_branching_factor: result.final_statistics.average_branching_factor,
    |                                                               ^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
405 -             average_branching_factor: result.final_statistics.average_branching_factor,
405 +             average_branching_factor: result.final_statistics.avg_branching_factor,
    |

error[E0609]: no field `best_performance_score` on type `tree_types::TreeStatistics`
   --> packages/sweetmcp-memory/src/cognitive/mcts/execution.rs:435:31
    |
435 |         self.final_statistics.best_performance_score > 0.0
    |                               ^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `node_count`, `max_depth`, `avg_branching_factor`, `simulation_count`, `avg_simulation_time_us` ... and 3 others

error[E0609]: no field `best_performance_score` on type `tree_types::TreeStatistics`
   --> packages/sweetmcp-memory/src/cognitive/mcts/execution.rs:443:55
    |
443 |         let performance_score = self.final_statistics.best_performance_score;
    |                                                       ^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `node_count`, `max_depth`, `avg_branching_factor`, `simulation_count`, `avg_simulation_time_us` ... and 3 others

error[E0599]: no method named `overall_efficiency` found for struct `CoordinatorStatistics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/mcts/results.rs:62:58
    |
62  |         let coordinator_quality = self.coordinator_stats.overall_efficiency();
    |                                                          ^^^^^^^^^^^^^^^^^^ method not found in `CoordinatorStatistics`
    |
   ::: packages/sweetmcp-memory/src/cognitive/mcts/actions/action_coordinator.rs:108:1
    |
108 | pub struct CoordinatorStatistics {
    | -------------------------------- method `overall_efficiency` not found for this struct

error[E0599]: no method named `overall_efficiency` found for struct `CoordinatorStatistics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/mcts/results.rs:146:32
    |
146 |         self.coordinator_stats.overall_efficiency()
    |                                ^^^^^^^^^^^^^^^^^^ method not found in `CoordinatorStatistics`
    |
   ::: packages/sweetmcp-memory/src/cognitive/mcts/actions/action_coordinator.rs:108:1
    |
108 | pub struct CoordinatorStatistics {
    | -------------------------------- method `overall_efficiency` not found for this struct

error[E0599]: no method named `is_critical` found for reference `&node_search_bottleneck::BottleneckNode` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/mcts/results.rs:176:43
    |
176 |         self.bottlenecks.iter().any(|b| b.is_critical())
    |                                           ^^^^^^^^^^^
    |
help: there is a method `is_critical_type` with a similar name
    |
176 |         self.bottlenecks.iter().any(|b| b.is_critical_type())
    |                                                      +++++

error[E0616]: field `executor` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:344:40
    |
344 |         let current_exploration = self.executor.exploration_constant();
    |                                        ^^^^^^^^ private field
    |
help: a method `executor` also exists, call it with parentheses
    |
344 |         let current_exploration = self.executor().exploration_constant();
    |                                                ++

error[E0616]: field `executor` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:355:14
    |
355 |         self.executor.set_exploration_constant(new_exploration);
    |              ^^^^^^^^ private field
    |
help: a method `executor` also exists, call it with parentheses
    |
355 |         self.executor().set_exploration_constant(new_exploration);
    |                      ++

error[E0616]: field `max_parallel` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:361:18
    |
361 |             self.max_parallel.min(16) // Large tree, more parallelism
    |                  ^^^^^^^^^^^^ private field
    |
help: a method `max_parallel` also exists, call it with parentheses
    |
361 |             self.max_parallel().min(16) // Large tree, more parallelism
    |                              ++

error[E0616]: field `max_parallel` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:363:18
    |
363 |             self.max_parallel
    |                  ^^^^^^^^^^^^ private field
    |
help: a method `max_parallel` also exists, call it with parentheses
    |
363 |             self.max_parallel()
    |                              ++

error[E0616]: field `executor` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:377:14
    |
377 |         self.executor.get_execution_recommendations(&self.tree, &self.root_id, current_iteration)
    |              ^^^^^^^^ private field
    |
help: a method `executor` also exists, call it with parentheses
    |
377 |         self.executor().get_execution_recommendations(&self.tree, &self.root_id, current_iteration)
    |                      ++

error[E0616]: field `tree` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:377:59
    |
377 |         self.executor.get_execution_recommendations(&self.tree, &self.root_id, current_iteration)
    |                                                           ^^^^ private field
    |
help: a method `tree` also exists, call it with parentheses
    |
377 |         self.executor.get_execution_recommendations(&self.tree(), &self.root_id, current_iteration)
    |                                                               ++

error[E0616]: field `root_id` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:377:71
    |
377 |         self.executor.get_execution_recommendations(&self.tree, &self.root_id, current_iteration)
    |                                                                       ^^^^^^^ private field
    |
help: a method `root_id` also exists, call it with parentheses
    |
377 |         self.executor.get_execution_recommendations(&self.tree, &self.root_id(), current_iteration)
    |                                                                              ++

error[E0616]: field `tree` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:383:30
    |
383 |         let tree_size = self.tree.len();
    |                              ^^^^ private field
    |
help: a method `tree` also exists, call it with parentheses
    |
383 |         let tree_size = self.tree().len();
    |                                  ++

error[E0616]: field `action_coordinator` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:387:38
    |
387 |         let coordinator_stats = self.action_coordinator.get_statistics();
    |                                      ^^^^^^^^^^^^^^^^^^ private field
    |
help: a method `action_coordinator` also exists, call it with parentheses
    |
387 |         let coordinator_stats = self.action_coordinator().get_statistics();
    |                                                        ++

error[E0616]: field `action_coordinator` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:404:38
    |
404 |         let coordinator_stats = self.action_coordinator.get_statistics();
    |                                      ^^^^^^^^^^^^^^^^^^ private field
    |
help: a method `action_coordinator` also exists, call it with parentheses
    |
404 |         let coordinator_stats = self.action_coordinator().get_statistics();
    |                                                        ++

error[E0609]: no field `total_nodes` on type `tree_types::TreeStatistics`
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:407:32
    |
407 |             total_nodes: stats.total_nodes,
    |                                ^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `node_count`, `max_depth`, `avg_branching_factor`, `simulation_count`, `avg_simulation_time_us` ... and 3 others

error[E0609]: no field `total_visits` on type `tree_types::TreeStatistics`
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:408:33
    |
408 |             total_visits: stats.total_visits,
    |                                 ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `node_count`, `max_depth`, `avg_branching_factor`, `simulation_count`, `avg_simulation_time_us` ... and 3 others

error[E0609]: no field `best_performance_score` on type `tree_types::TreeStatistics`
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:409:43
    |
409 |             best_performance_score: stats.best_performance_score,
    |                                           ^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `node_count`, `max_depth`, `avg_branching_factor`, `simulation_count`, `avg_simulation_time_us` ... and 3 others

error[E0609]: no field `average_branching_factor` on type `tree_types::TreeStatistics`
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:410:45
    |
410 |             average_branching_factor: stats.average_branching_factor,
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
410 -             average_branching_factor: stats.average_branching_factor,
410 +             average_branching_factor: stats.avg_branching_factor,
    |

error[E0609]: no field `convergence_rate` on type `tree_types::TreeStatistics`
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:414:37
    |
414 |             convergence_rate: stats.convergence_rate,
    |                                     ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `node_count`, `max_depth`, `avg_branching_factor`, `simulation_count`, `avg_simulation_time_us` ... and 3 others

error[E0616]: field `executor` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:421:14
    |
421 |         self.executor.create_execution_summary(execution_result, &self.tree, &self.root_id)
    |              ^^^^^^^^ private field
    |
help: a method `executor` also exists, call it with parentheses
    |
421 |         self.executor().create_execution_summary(execution_result, &self.tree, &self.root_id)
    |                      ++

error[E0616]: field `tree` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:421:72
    |
421 |         self.executor.create_execution_summary(execution_result, &self.tree, &self.root_id)
    |                                                                        ^^^^ private field
    |
help: a method `tree` also exists, call it with parentheses
    |
421 |         self.executor.create_execution_summary(execution_result, &self.tree(), &self.root_id)
    |                                                                            ++

error[E0616]: field `root_id` of struct `MCTS` is private
   --> packages/sweetmcp-memory/src/cognitive/mcts/runner.rs:421:84
    |
421 |         self.executor.create_execution_summary(execution_result, &self.tree, &self.root_id)
    |                                                                                    ^^^^^^^ private field
    |
help: a method `root_id` also exists, call it with parentheses
    |
421 |         self.executor.create_execution_summary(execution_result, &self.tree, &self.root_id())
    |                                                                                           ++

error[E0599]: no method named `values` found for struct `Vec<usize>` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/mcts/tree_operations.rs:52:43
   |
52 |             for child_id in node.children.values() {
   |                                           ^^^^^^ method not found in `Vec<usize>`

error[E0599]: no method named `uct_value` found for reference `&MCTSNode` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/mcts/tree_operations.rs:54:33
   |
54 |                 let uct = child.uct_value(parent_visits, self.exploration_constant);
   |                                 ^^^^^^^^^
   |
help: there is a method `ucb1_value` with a similar name
   |
54 -                 let uct = child.uct_value(parent_visits, self.exploration_constant);
54 +                 let uct = child.ucb1_value(parent_visits, self.exploration_constant);
   |

error[E0282]: type annotations needed
  --> packages/sweetmcp-memory/src/cognitive/mcts/tree_operations.rs:58:48
   |
58 |                     best_child = Some(child_id.clone());
   |                                                ^^^^^ cannot infer type for type parameter `Q`

error[E0599]: no function or associated item named `new_child` found for struct `MCTSNode` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/mcts/tree_operations.rs:103:36
    |
103 |         let child_node = MCTSNode::new_child(
    |                                    ^^^^^^^^^ function or associated item not found in `MCTSNode`
    |
   ::: packages/sweetmcp-memory/src/cognitive/mcts/types/node_types.rs:102:1
    |
102 | pub struct MCTSNode {
    | ------------------- function or associated item `new_child` not found for this struct
    |
note: if you're trying to build a new `MCTSNode` consider using one of the following associated functions:
      MCTSNode::new
      MCTSNode::create_root
      MCTSNode::new_root
      MCTSNode::create_child
   --> packages/sweetmcp-memory/src/cognitive/mcts/types/node_types.rs:118:5
    |
118 |       pub fn new(state: CodeState, parent: Option<usize>, action_taken: Option<String>, depth: u16) -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
135 |       pub fn create_root(state: CodeState) -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
141 |       pub fn new_root(state: CodeState) -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
147 | /     pub fn create_child(
148 | |         state: CodeState,
149 | |         parent_index: usize,
150 | |         action: String,
151 | |         depth: u16,
152 | |     ) -> Self {
    | |_____________^
help: there is a method `add_child` with a similar name, but with different arguments
   --> packages/sweetmcp-memory/src/cognitive/mcts/types/node_types.rs:203:5
    |
203 |     pub fn add_child(&mut self, child_index: usize) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0061]: this method takes 1 argument but 2 arguments were supplied
   --> packages/sweetmcp-memory/src/cognitive/mcts/tree_operations.rs:115:21
    |
115 |         parent_node.add_child(action, child_id.clone());
    |                     ^^^^^^^^^ ------  ---------------- unexpected argument #2 of type `std::string::String`
    |                               |
    |                               expected `usize`, found `String`
    |
note: method defined here
   --> packages/sweetmcp-memory/src/cognitive/mcts/types/node_types.rs:203:12
    |
203 |     pub fn add_child(&mut self, child_index: usize) {
    |            ^^^^^^^^^            ------------------
help: remove the extra argument
    |
115 -         parent_node.add_child(action, child_id.clone());
115 +         parent_node.add_child(/* usize */);
    |

warning: use of deprecated method `rand::Rng::gen_range`: Renamed to `random_range`
   --> packages/sweetmcp-memory/src/cognitive/mcts/tree_operations.rs:152:55
    |
152 |                 let action_index = rand::thread_rng().gen_range(0..possible_actions.len());
    |                                                       ^^^^^^^^^

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/mcts/tree_operations.rs:186:27
    |
178 |         mut node_id: String,
    |                      ------ expected due to this parameter type
...
186 |                 node_id = parent_id;
    |                           ^^^^^^^^^- help: try using a conversion method: `.to_string()`
    |                           |
    |                           expected `String`, found `usize`

error[E0599]: no method named `values` found for struct `Vec<usize>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/mcts/tree_operations.rs:205:39
    |
205 |         for child_id in node.children.values() {
    |                                       ^^^^^^ method not found in `Vec<usize>`

error[E0599]: no method named `uct_value` found for reference `&MCTSNode` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/mcts/tree_operations.rs:207:29
    |
207 |             let uct = child.uct_value(node.visits, self.exploration_constant);
    |                             ^^^^^^^^^
    |
help: there is a method `ucb1_value` with a similar name
    |
207 -             let uct = child.uct_value(node.visits, self.exploration_constant);
207 +             let uct = child.ucb1_value(node.visits, self.exploration_constant);
    |

error[E0282]: type annotations needed
   --> packages/sweetmcp-memory/src/cognitive/mcts/tree_operations.rs:206:30
    |
206 |             let child = tree.get(child_id)?;
    |                              ^^^ cannot infer type of the type parameter `Q` declared on the method `get`
...
211 |                 best_child = Some(child_id.clone());
    |                                            ----- type must be known at this point
    |
help: consider specifying the generic argument
    |
206 |             let child = tree.get::<Q>(child_id)?;
    |                                 +++++

error[E0599]: no method named `values` found for struct `Vec<usize>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/mcts/tree_operations.rs:230:39
    |
230 |         for child_id in node.children.values() {
    |                                       ^^^^^^ method not found in `Vec<usize>`

error[E0282]: type annotations needed
   --> packages/sweetmcp-memory/src/cognitive/mcts/tree_operations.rs:231:30
    |
231 |             let child = tree.get(child_id)?;
    |                              ^^^ cannot infer type of the type parameter `Q` declared on the method `get`
...
236 |                 best_child = Some(child_id.clone());
    |                                            ----- type must be known at this point
    |
help: consider specifying the generic argument
    |
231 |             let child = tree.get::<Q>(child_id)?;
    |                                 +++++

error[E0599]: no method named `calculate_depth` found for reference `&MCTSNode` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/mcts/tree_operations.rs:255:30
    |
255 |             .map(|node| node.calculate_depth(tree))
    |                              ^^^^^^^^^^^^^^^ method not found in `&MCTSNode`

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/mcts/tree_operations.rs:273:31
    |
273 |                (node.visits < min_visits || node.average_reward() < min_reward) {
    |                 -----------   ^^^^^^^^^^ expected `u32`, found `u64`
    |                 |
    |                 expected because this is `u32`
    |
help: you can convert `node.visits` from `u32` to `u64`, matching the type of `min_visits`
    |
273 |                (u64::from(node.visits) < min_visits || node.average_reward() < min_reward) {
    |                 ++++++++++           +

error[E0277]: the trait bound `std::string::String: Borrow<usize>` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/mcts/tree_operations.rs:284:56
     |
284  |                     if let Some(parent) = tree.get_mut(parent_id) {
     |                                                ------- ^^^^^^^^^ the trait `Borrow<usize>` is not implemented for `std::string::String`
     |                                                |
     |                                                required by a bound introduced by this call
     |
     = help: the trait `Borrow<usize>` is not implemented for `std::string::String`
             but trait `Borrow<str>` is implemented for it
     = help: for that trait implementation, expected `str`, found `usize`
note: required by a bound in `std::collections::HashMap::<K, V, S>::get_mut`
    --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:1169:12
     |
1167 |     pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
     |            ------- required by a bound in this associated function
1168 |     where
1169 |         K: Borrow<Q>,
     |            ^^^^^^^^^ required by this bound in `HashMap::<K, V, S>::get_mut`

error[E0593]: closure is expected to take 1 argument, but it takes 2 arguments
   --> packages/sweetmcp-memory/src/cognitive/mcts/tree_operations.rs:285:41
    |
285 |                         parent.children.retain(|_, child_id| child_id != node_id);
    |                                         ^^^^^^ ------------- takes 2 arguments
    |                                         |
    |                                         expected closure that takes 1 argument

error[E0599]: no method named `values` found for struct `Vec<usize>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/mcts/tree_operations.rs:313:43
    |
313 |             for child_id in root.children.values() {
    |                                           ^^^^^^ method not found in `Vec<usize>`

error[E0282]: type annotations needed
   --> packages/sweetmcp-memory/src/cognitive/mcts/tree_operations.rs:314:43
    |
314 |                 if let Some(child) = tree.get(child_id) {
    |                                           ^^^ cannot infer type of the type parameter `Q` declared on the method `get`
315 |                     child_visits.push((child_id.clone(), child.visits));
    |                                                 ----- type must be known at this point
    |
help: consider specifying the generic argument
    |
314 |                 if let Some(child) = tree.get::<Q>(child_id) {
    |                                              +++++

error[E0599]: no function or associated item named `from_tree` found for struct `tree_types::TreeStatistics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/mcts/tree_operations.rs:346:25
    |
346 |         TreeStatistics::from_tree(tree, root_id)
    |                         ^^^^^^^^^ function or associated item not found in `tree_types::TreeStatistics`
    |
   ::: packages/sweetmcp-memory/src/cognitive/mcts/types/tree_types.rs:588:1
    |
588 | pub struct TreeStatistics {
    | ------------------------- function or associated item `from_tree` not found for this struct
    |
note: if you're trying to build a new `tree_types::TreeStatistics`, consider using `tree_types::TreeStatistics::new` which returns `tree_types::TreeStatistics`
   --> packages/sweetmcp-memory/src/cognitive/mcts/types/tree_types.rs:609:5
    |
609 |     pub fn new() -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^
help: there is an associated function `from_ref` with a similar name
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-core-0.5.2/src/extract/from_ref.rs:15:5
    |
15  |     fn from_ref(input: &T) -> Self;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `values` found for struct `Vec<usize>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/mcts/tree_operations.rs:364:43
    |
364 |             for child_id in node.children.values() {
    |                                           ^^^^^^ method not found in `Vec<usize>`

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/mcts/tree_operations.rs:369:50
    |
369 |                 if child.parent.as_ref() != Some(node_id) {
    |                                             ---- ^^^^^^^ expected `&usize`, found `&String`
    |                                             |
    |                                             arguments to this enum variant are incorrect
    |
    = note: expected reference `&usize`
               found reference `&std::string::String`
help: the type constructed contains `&std::string::String` due to the type of the argument passed
   --> packages/sweetmcp-memory/src/cognitive/mcts/tree_operations.rs:369:45
    |
369 |                 if child.parent.as_ref() != Some(node_id) {
    |                                             ^^^^^-------^
    |                                                  |
    |                                                  this argument influences the type of `Some`
note: tuple variant defined here
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/option.rs:599:5
    |
599 |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     ^^^^

error[E0277]: the trait bound `std::string::String: Borrow<usize>` is not satisfied
   --> packages/sweetmcp-memory/src/cognitive/mcts/tree_operations.rs:379:39
    |
379 |                 let parent = tree.get(parent_id).ok_or_else(|| {
    |                                   --- ^^^^^^^^^ the trait `Borrow<usize>` is not implemented for `std::string::String`
    |                                   |
    |                                   required by a bound introduced by this call
    |
    = help: the trait `Borrow<usize>` is not implemented for `std::string::String`
            but trait `Borrow<str>` is implemented for it
    = help: for that trait implementation, expected `str`, found `usize`
note: required by a bound in `std::collections::HashMap::<K, V, S>::get`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:907:12
    |
905 |     pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
    |            --- required by a bound in this associated function
906 |     where
907 |         K: Borrow<Q>,
    |            ^^^^^^^^^ required by this bound in `HashMap::<K, V, S>::get`

error[E0599]: no method named `values` found for struct `Vec<usize>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/mcts/tree_operations.rs:383:37
    |
383 |                 if !parent.children.values().any(|child_id| child_id == node_id) {
    |                                     ^^^^^^ method not found in `Vec<usize>`

error[E0609]: no field `applied_action` on type `&MCTSNode`
   --> packages/sweetmcp-memory/src/cognitive/mcts/tree_operations.rs:416:50
    |
416 |                     if let Some(action) = &child.applied_action {
    |                                                  ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `state`, `visits`, `total_reward`, `children`, `parent` ... and 5 others

error[E0609]: no field `total_nodes` on type `tree_types::TreeStatistics`
   --> packages/sweetmcp-memory/src/cognitive/mcts/tree_operations.rs:440:41
    |
440 |         let visit_efficiency = if stats.total_nodes > 0 {
    |                                         ^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `node_count`, `max_depth`, `avg_branching_factor`, `simulation_count`, `avg_simulation_time_us` ... and 3 others

error[E0609]: no field `total_visits` on type `tree_types::TreeStatistics`
   --> packages/sweetmcp-memory/src/cognitive/mcts/tree_operations.rs:441:19
    |
441 |             stats.total_visits as f64 / stats.total_nodes as f64
    |                   ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `node_count`, `max_depth`, `avg_branching_factor`, `simulation_count`, `avg_simulation_time_us` ... and 3 others

error[E0609]: no field `total_nodes` on type `tree_types::TreeStatistics`
   --> packages/sweetmcp-memory/src/cognitive/mcts/tree_operations.rs:441:47
    |
441 |             stats.total_visits as f64 / stats.total_nodes as f64
    |                                               ^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `node_count`, `max_depth`, `avg_branching_factor`, `simulation_count`, `avg_simulation_time_us` ... and 3 others

error[E0609]: no field `best_performance_score` on type `tree_types::TreeStatistics`
   --> packages/sweetmcp-memory/src/cognitive/mcts/tree_operations.rs:447:19
    |
447 |             stats.best_performance_score / stats.max_depth as f64
    |                   ^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `node_count`, `max_depth`, `avg_branching_factor`, `simulation_count`, `avg_simulation_time_us` ... and 3 others

error[E0609]: no field `convergence_rate` on type `tree_types::TreeStatistics`
   --> packages/sweetmcp-memory/src/cognitive/mcts/tree_operations.rs:452:44
    |
452 |         let exploration_efficiency = stats.convergence_rate;
    |                                            ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `node_count`, `max_depth`, `avg_branching_factor`, `simulation_count`, `avg_simulation_time_us` ... and 3 others

error[E0277]: the trait bound `std::time::Instant: Serialize` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/mcts/types/tree_types.rs:587:24
     |
587  |   #[derive(Debug, Clone, Serialize, Deserialize)]
     |                          ^^^^^^^^^ the trait `Serialize` is not implemented for `std::time::Instant`
...
603  | /     /// Last update timestamp
604  | |     pub last_updated: std::time::Instant,
     | |________________________________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1106 others
note: required by a bound in `llm::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `std::time::Instant: Deserialize<'_>` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/mcts/types/tree_types.rs:604:23
     |
604  |     pub last_updated: std::time::Instant,
     |                       ^^^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `std::time::Instant`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 1028 others
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `std::time::Instant: Deserialize<'_>` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/mcts/types/tree_types.rs:604:23
     |
604  |     pub last_updated: std::time::Instant,
     |                       ^^^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `std::time::Instant`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 1028 others
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `std::time::Instant: Deserialize<'_>` is not satisfied
   --> packages/sweetmcp-memory/src/cognitive/mcts/types/tree_types.rs:587:35
    |
587 | #[derive(Debug, Clone, Serialize, Deserialize)]
    |                                   ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `std::time::Instant`
    |
    = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `std::time::Instant` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `Deserialize<'de>`:
              `&'a [u8]` implements `Deserialize<'de>`
              `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
              `&'a std::path::Path` implements `Deserialize<'de>`
              `&'a str` implements `Deserialize<'de>`
              `()` implements `Deserialize<'de>`
              `(T,)` implements `Deserialize<'de>`
              `(T0, T1)` implements `Deserialize<'de>`
              `(T0, T1, T2)` implements `Deserialize<'de>`
            and 1028 others
note: required by a bound in `llm::_::_serde::__private::de::missing_field`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
    |
23  | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
    |        ------------- required by a bound in this function
24  | where
25  |     V: Deserialize<'de>,
    |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `std::time::Instant: Serialize` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/mcts/types/action_types.rs:642:24
     |
642  |   #[derive(Debug, Clone, Serialize, Deserialize)]
     |                          ^^^^^^^^^ the trait `Serialize` is not implemented for `std::time::Instant`
...
656  | /     /// Creation timestamp
657  | |     pub created_at: std::time::Instant,
     | |______________________________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1106 others
note: required by a bound in `llm::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `std::time::Instant: Deserialize<'_>` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/mcts/types/action_types.rs:657:21
     |
657  |     pub created_at: std::time::Instant,
     |                     ^^^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `std::time::Instant`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 1030 others
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `std::time::Instant: Deserialize<'_>` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/mcts/types/action_types.rs:659:21
     |
659  |     pub updated_at: std::time::Instant,
     |                     ^^^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `std::time::Instant`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 1030 others
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `std::time::Instant: Deserialize<'_>` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/mcts/types/action_types.rs:657:21
     |
657  |     pub created_at: std::time::Instant,
     |                     ^^^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `std::time::Instant`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 1030 others
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `std::time::Instant: Deserialize<'_>` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/mcts/types/action_types.rs:659:21
     |
659  |     pub updated_at: std::time::Instant,
     |                     ^^^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `std::time::Instant`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 1030 others
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `std::time::Instant: Deserialize<'_>` is not satisfied
   --> packages/sweetmcp-memory/src/cognitive/mcts/types/action_types.rs:642:35
    |
642 | #[derive(Debug, Clone, Serialize, Deserialize)]
    |                                   ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `std::time::Instant`
    |
    = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `std::time::Instant` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `Deserialize<'de>`:
              `&'a [u8]` implements `Deserialize<'de>`
              `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
              `&'a std::path::Path` implements `Deserialize<'de>`
              `&'a str` implements `Deserialize<'de>`
              `()` implements `Deserialize<'de>`
              `(T,)` implements `Deserialize<'de>`
              `(T0, T1)` implements `Deserialize<'de>`
              `(T0, T1, T2)` implements `Deserialize<'de>`
            and 1030 others
note: required by a bound in `llm::_::_serde::__private::de::missing_field`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
    |
23  | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
    |        ------------- required by a bound in this function
24  | where
25  |     V: Deserialize<'de>,
    |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `std::time::Instant: Serialize` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/mcts/types/action_types.rs:692:24
     |
692  |   #[derive(Debug, Clone, Serialize, Deserialize)]
     |                          ^^^^^^^^^ the trait `Serialize` is not implemented for `std::time::Instant`
...
710  | /     /// Last visit timestamp
711  | |     pub last_visited: std::time::Instant,
     | |________________________________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1106 others
note: required by a bound in `llm::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `std::time::Instant: Deserialize<'_>` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/mcts/types/action_types.rs:711:23
     |
711  |     pub last_visited: std::time::Instant,
     |                       ^^^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `std::time::Instant`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 1030 others
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `std::time::Instant: Deserialize<'_>` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/mcts/types/action_types.rs:711:23
     |
711  |     pub last_visited: std::time::Instant,
     |                       ^^^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `std::time::Instant`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 1030 others
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `std::time::Instant: Deserialize<'_>` is not satisfied
   --> packages/sweetmcp-memory/src/cognitive/mcts/types/action_types.rs:692:35
    |
692 | #[derive(Debug, Clone, Serialize, Deserialize)]
    |                                   ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `std::time::Instant`
    |
    = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `std::time::Instant` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `Deserialize<'de>`:
              `&'a [u8]` implements `Deserialize<'de>`
              `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
              `&'a std::path::Path` implements `Deserialize<'de>`
              `&'a str` implements `Deserialize<'de>`
              `()` implements `Deserialize<'de>`
              `(T,)` implements `Deserialize<'de>`
              `(T0, T1)` implements `Deserialize<'de>`
              `(T0, T1, T2)` implements `Deserialize<'de>`
            and 1030 others
note: required by a bound in `llm::_::_serde::__private::de::missing_field`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
    |
23  | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
    |        ------------- required by a bound in this function
24  | where
25  |     V: Deserialize<'de>,
    |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `std::time::Instant: Serialize` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/mcts/types/action_types.rs:754:24
     |
754  |   #[derive(Debug, Clone, Serialize, Deserialize)]
     |                          ^^^^^^^^^ the trait `Serialize` is not implemented for `std::time::Instant`
...
770  | /     /// Last measurement timestamp
771  | |     pub measured_at: std::time::Instant,
     | |_______________________________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1106 others
note: required by a bound in `llm::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `std::time::Instant: Deserialize<'_>` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/mcts/types/action_types.rs:771:22
     |
771  |     pub measured_at: std::time::Instant,
     |                      ^^^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `std::time::Instant`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 1030 others
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `std::time::Instant: Deserialize<'_>` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/mcts/types/action_types.rs:771:22
     |
771  |     pub measured_at: std::time::Instant,
     |                      ^^^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `std::time::Instant`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 1030 others
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `std::time::Instant: Deserialize<'_>` is not satisfied
   --> packages/sweetmcp-memory/src/cognitive/mcts/types/action_types.rs:754:35
    |
754 | #[derive(Debug, Clone, Serialize, Deserialize)]
    |                                   ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `std::time::Instant`
    |
    = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `std::time::Instant` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `Deserialize<'de>`:
              `&'a [u8]` implements `Deserialize<'de>`
              `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
              `&'a std::path::Path` implements `Deserialize<'de>`
              `&'a str` implements `Deserialize<'de>`
              `()` implements `Deserialize<'de>`
              `(T,)` implements `Deserialize<'de>`
              `(T0, T1)` implements `Deserialize<'de>`
              `(T0, T1, T2)` implements `Deserialize<'de>`
            and 1030 others
note: required by a bound in `llm::_::_serde::__private::de::missing_field`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
    |
23  | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
    |        ------------- required by a bound in this function
24  | where
25  |     V: Deserialize<'de>,
    |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0609]: no field `final_latency` on type `&OptimizationOutcome`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/iteration.rs:133:46
    |
133 |             ((self.initial_latency - outcome.final_latency) / self.initial_latency) * 0.4
    |                                              ^^^^^^^^^^^^^ unknown field

error[E0609]: no field `final_memory` on type `&OptimizationOutcome`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/iteration.rs:139:45
    |
139 |             ((self.initial_memory - outcome.final_memory) / self.initial_memory) * 0.3
    |                                             ^^^^^^^^^^^^ unknown field

error[E0609]: no field `final_relevance` on type `&OptimizationOutcome`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/iteration.rs:145:23
    |
145 |             ((outcome.final_relevance - self.initial_relevance) / self.initial_relevance) * 0.3
    |                       ^^^^^^^^^^^^^^^ unknown field

error[E0609]: no field `max_iterations` on type `std::sync::Arc<coordinator_types::OptimizationSpec>`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/iteration.rs:184:43
    |
184 |         if let Some(max_iter) = self.spec.max_iterations {
    |                                           ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `target_quality` on type `std::sync::Arc<coordinator_types::OptimizationSpec>`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/iteration.rs:192:39
    |
192 |         if current_score >= self.spec.target_quality {
    |                                       ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0277]: the trait bound `coordinator_types::OptimizationSpec: Deserialize<'_>` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_core.rs:26:46
     |
26   |     if let Ok(spec) = serde_json::from_str::<OptimizationSpec>(&contents) {
     |                                              ^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `coordinator_types::OptimizationSpec`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `coordinator_types::OptimizationSpec` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 1027 others
note: required by a bound in `serde_json::from_str`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-1.0.141/src/de.rs:2699:8
     |
2697 | pub fn from_str<'a, T>(s: &'a str) -> Result<T>
     |        -------- required by a bound in this function
2698 | where
2699 |     T: de::Deserialize<'a>,
     |        ^^^^^^^^^^^^^^^^^^^ required by this bound in `from_str`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `objective`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_core.rs:88:9
   |
88 |         objective: user_objective,
   |         ^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `constraints`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_core.rs:89:9
   |
89 |         constraints: vec![
   |         ^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `success_criteria`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_core.rs:95:9
   |
95 |         success_criteria: vec![
   |         ^^^^^^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `optimization_type`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_core.rs:100:9
    |
100 |         optimization_type: OptimizationType::Performance,
    |         ^^^^^^^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `timeout_ms`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_core.rs:101:9
    |
101 |         timeout_ms: Some(300_000), // 5 minutes
    |         ^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `max_iterations`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_core.rs:102:9
    |
102 |         max_iterations: Some(100),
    |         ^^^^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `target_quality`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_core.rs:103:9
    |
103 |         target_quality: 0.8,
    |         ^^^^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0277]: the trait bound `coordinator_types::OptimizationSpec: Deserialize<'_>` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_core.rs:112:39
     |
112  |     let spec = serde_json::from_str::<OptimizationSpec>(json_content)
     |                                       ^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `coordinator_types::OptimizationSpec`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `coordinator_types::OptimizationSpec` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 1027 others
note: required by a bound in `serde_json::from_str`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-1.0.141/src/de.rs:2699:8
     |
2697 | pub fn from_str<'a, T>(s: &'a str) -> Result<T>
     |        -------- required by a bound in this function
2698 | where
2699 |     T: de::Deserialize<'a>,
     |        ^^^^^^^^^^^^^^^^^^^ required by this bound in `from_str`

error[E0609]: no field `objective` on type `coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_core.rs:143:13
    |
143 |     if spec.objective.trim().is_empty() {
    |             ^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `objective` on type `coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_core.rs:144:14
    |
144 |         spec.objective = "Optimize code performance".to_string();
    |              ^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `constraints` on type `coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_core.rs:156:18
    |
156 |         if !spec.constraints.iter().any(|c| c.contains(&constraint)) {
    |                  ^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `constraints` on type `coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_core.rs:157:18
    |
157 |             spec.constraints.push(constraint);
    |                  ^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `success_criteria` on type `coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_core.rs:162:13
    |
162 |     if spec.success_criteria.is_empty() {
    |             ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `success_criteria` on type `coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_core.rs:163:14
    |
163 |         spec.success_criteria = vec![
    |              ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `timeout_ms` on type `coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_core.rs:171:13
    |
171 |     if spec.timeout_ms.is_none() {
    |             ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `timeout_ms` on type `coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_core.rs:172:14
    |
172 |         spec.timeout_ms = Some(300_000); // 5 minutes
    |              ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `max_iterations` on type `coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_core.rs:175:13
    |
175 |     if spec.max_iterations.is_none() {
    |             ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `max_iterations` on type `coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_core.rs:176:14
    |
176 |         spec.max_iterations = Some(100);
    |              ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `target_quality` on type `coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_core.rs:179:13
    |
179 |     if spec.target_quality <= 0.0 || spec.target_quality > 1.0 {
    |             ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `target_quality` on type `coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_core.rs:179:43
    |
179 |     if spec.target_quality <= 0.0 || spec.target_quality > 1.0 {
    |                                           ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `target_quality` on type `coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_core.rs:180:14
    |
180 |         spec.target_quality = 0.8;
    |              ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `objective`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_core.rs:226:9
    |
226 |         objective: objective.to_string(),
    |         ^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `constraints`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_core.rs:227:9
    |
227 |         constraints: vec![
    |         ^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `success_criteria`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_core.rs:233:9
    |
233 |         success_criteria: vec![
    |         ^^^^^^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `optimization_type`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_core.rs:238:9
    |
238 |         optimization_type: OptimizationType::Performance,
    |         ^^^^^^^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `timeout_ms`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_core.rs:239:9
    |
239 |         timeout_ms: Some(300_000),
    |         ^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `max_iterations`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_core.rs:240:9
    |
240 |         max_iterations: Some(100),
    |         ^^^^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `target_quality`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_core.rs:241:9
    |
241 |         target_quality: 0.8,
    |         ^^^^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `timeout_ms` on type `coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_core.rs:255:13
    |
255 |     if spec.timeout_ms.is_none() && default_timeout.is_some() {
    |             ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `timeout_ms` on type `coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_core.rs:256:14
    |
256 |         spec.timeout_ms = default_timeout;
    |              ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `max_iterations` on type `coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_core.rs:259:13
    |
259 |     if spec.max_iterations.is_none() && default_iterations.is_some() {
    |             ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `max_iterations` on type `coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_core.rs:260:14
    |
260 |         spec.max_iterations = default_iterations;
    |              ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `target_quality` on type `coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_core.rs:263:13
    |
263 |     if spec.target_quality <= 0.0 || spec.target_quality > 1.0 {
    |             ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `target_quality` on type `coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_core.rs:263:43
    |
263 |     if spec.target_quality <= 0.0 || spec.target_quality > 1.0 {
    |                                           ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `target_quality` on type `coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_core.rs:264:14
    |
264 |         spec.target_quality = default_quality.clamp(0.1, 1.0);
    |              ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `objective` on type `&coordinator_types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_validation.rs:14:13
   |
14 |     if spec.objective.trim().is_empty() {
   |             ^^^^^^^^^ unknown field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `constraints` on type `&coordinator_types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_validation.rs:21:13
   |
21 |     if spec.constraints.is_empty() {
   |             ^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `success_criteria` on type `&coordinator_types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_validation.rs:28:13
   |
28 |     if spec.success_criteria.is_empty() {
   |             ^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `timeout_ms` on type `&coordinator_types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_validation.rs:35:33
   |
35 |     if let Some(timeout) = spec.timeout_ms {
   |                                 ^^^^^^^^^^ unknown field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `max_iterations` on type `&coordinator_types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_validation.rs:47:34
   |
47 |     if let Some(max_iter) = spec.max_iterations {
   |                                  ^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `target_quality` on type `&coordinator_types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_validation.rs:59:13
   |
59 |     if spec.target_quality <= 0.0 || spec.target_quality > 1.0 {
   |             ^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `target_quality` on type `&coordinator_types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_validation.rs:59:43
   |
59 |     if spec.target_quality <= 0.0 || spec.target_quality > 1.0 {
   |                                           ^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0599]: no variant or associated item named `Memory` found for enum `cognitive::types::OptimizationType` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_validation.rs:184:27
    |
184 |         OptimizationType::Memory
    |                           ^^^^^^ variant or associated item not found in `cognitive::types::OptimizationType`
    |
   ::: packages/sweetmcp-memory/src/cognitive/types.rs:352:1
    |
352 | pub enum OptimizationType {
    | ------------------------- variant or associated item `Memory` not found for this enum

error[E0599]: no variant or associated item named `Readability` found for enum `cognitive::types::OptimizationType` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_validation.rs:188:27
    |
188 |         OptimizationType::Readability
    |                           ^^^^^^^^^^^ variant or associated item not found in `cognitive::types::OptimizationType`
    |
   ::: packages/sweetmcp-memory/src/cognitive/types.rs:352:1
    |
352 | pub enum OptimizationType {
    | ------------------------- variant or associated item `Readability` not found for this enum

error[E0599]: no variant or associated item named `Security` found for enum `cognitive::types::OptimizationType` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_validation.rs:190:27
    |
190 |         OptimizationType::Security
    |                           ^^^^^^^^ variant or associated item not found in `cognitive::types::OptimizationType`
    |
   ::: packages/sweetmcp-memory/src/cognitive/types.rs:352:1
    |
352 | pub enum OptimizationType {
    | ------------------------- variant or associated item `Security` not found for this enum

error[E0609]: no field `objective` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_validation.rs:301:42
    |
301 |     analysis.has_clear_objective = !spec.objective.trim().is_empty() && spec.objective.len() > 10;
    |                                          ^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `objective` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_validation.rs:301:78
    |
301 |     analysis.has_clear_objective = !spec.objective.trim().is_empty() && spec.objective.len() > 10;
    |                                                                              ^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `objective` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_validation.rs:303:17
    |
303 |         if spec.objective.len() > 50 { 1.0 } else { 0.7 }
    |                 ^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `constraints` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_validation.rs:309:48
    |
309 |     analysis.has_sufficient_constraints = spec.constraints.len() >= 3;
    |                                                ^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `constraints` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_validation.rs:310:40
    |
310 |     analysis.constraints_score = (spec.constraints.len().min(5) as f64) / 5.0;
    |                                        ^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `success_criteria` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_validation.rs:313:45
    |
313 |     analysis.has_measurable_criteria = spec.success_criteria.len() >= 2;
    |                                             ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `success_criteria` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_validation.rs:314:37
    |
314 |     analysis.criteria_score = (spec.success_criteria.len().min(5) as f64) / 5.0;
    |                                     ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `timeout_ms` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_validation.rs:317:33
    |
317 |     analysis.has_timeout = spec.timeout_ms.is_some();
    |                                 ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `max_iterations` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_validation.rs:318:40
    |
318 |     analysis.has_max_iterations = spec.max_iterations.is_some();
    |                                        ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `target_quality` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_validation.rs:319:40
    |
319 |     analysis.has_target_quality = spec.target_quality > 0.0 && spec.target_quality <= 1.0;
    |                                        ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `target_quality` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_validation.rs:319:69
    |
319 |     analysis.has_target_quality = spec.target_quality > 0.0 && spec.target_quality <= 1.0;
    |                                                                     ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `objective`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:32:9
   |
32 |         objective: objective.to_string(),
   |         ^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `constraints`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:33:9
   |
33 |         constraints: vec![
   |         ^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `success_criteria`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:39:9
   |
39 |         success_criteria: vec![
   |         ^^^^^^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `optimization_type`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:44:9
   |
44 |         optimization_type: OptimizationType::Performance,
   |         ^^^^^^^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `timeout_ms`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:45:9
   |
45 |         timeout_ms: Some(300_000),
   |         ^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `max_iterations`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:46:9
   |
46 |         max_iterations: Some(100),
   |         ^^^^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `target_quality`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:47:9
   |
47 |         target_quality: 0.8,
   |         ^^^^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `constraints` on type `&coordinator_types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:67:33
   |
67 |         for constraint in &spec.constraints {
   |                                 ^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `constraints` on type `coordinator_types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:68:24
   |
68 |             if !merged.constraints.contains(constraint) {
   |                        ^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `constraints` on type `coordinator_types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:69:24
   |
69 |                 merged.constraints.push(constraint.clone());
   |                        ^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `success_criteria` on type `&coordinator_types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:74:32
   |
74 |         for criterion in &spec.success_criteria {
   |                                ^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `success_criteria` on type `coordinator_types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:75:24
   |
75 |             if !merged.success_criteria.contains(criterion) {
   |                        ^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `success_criteria` on type `coordinator_types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:76:24
   |
76 |                 merged.success_criteria.push(criterion.clone());
   |                        ^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `timeout_ms` on type `coordinator_types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:81:69
   |
81 |         if let (Some(merged_timeout), Some(spec_timeout)) = (merged.timeout_ms, spec.timeout_ms) {
   |                                                                     ^^^^^^^^^^ unknown field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `timeout_ms` on type `&coordinator_types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:81:86
   |
81 |         if let (Some(merged_timeout), Some(spec_timeout)) = (merged.timeout_ms, spec.timeout_ms) {
   |                                                                                      ^^^^^^^^^^ unknown field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `timeout_ms` on type `coordinator_types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:82:20
   |
82 |             merged.timeout_ms = Some(merged_timeout.min(spec_timeout));
   |                    ^^^^^^^^^^ unknown field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `timeout_ms` on type `&coordinator_types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:83:24
   |
83 |         } else if spec.timeout_ms.is_some() {
   |                        ^^^^^^^^^^ unknown field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `timeout_ms` on type `coordinator_types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:84:20
   |
84 |             merged.timeout_ms = spec.timeout_ms;
   |                    ^^^^^^^^^^ unknown field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `timeout_ms` on type `&coordinator_types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:84:38
   |
84 |             merged.timeout_ms = spec.timeout_ms;
   |                                      ^^^^^^^^^^ unknown field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `max_iterations` on type `coordinator_types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:88:61
   |
88 |         if let (Some(merged_max), Some(spec_max)) = (merged.max_iterations, spec.max_iterations) {
   |                                                             ^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `max_iterations` on type `&coordinator_types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:88:82
   |
88 |         if let (Some(merged_max), Some(spec_max)) = (merged.max_iterations, spec.max_iterations) {
   |                                                                                  ^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `max_iterations` on type `coordinator_types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:89:20
   |
89 |             merged.max_iterations = Some(merged_max.min(spec_max));
   |                    ^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `max_iterations` on type `&coordinator_types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:90:24
   |
90 |         } else if spec.max_iterations.is_some() {
   |                        ^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `max_iterations` on type `coordinator_types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:91:20
   |
91 |             merged.max_iterations = spec.max_iterations;
   |                    ^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `max_iterations` on type `&coordinator_types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:91:42
   |
91 |             merged.max_iterations = spec.max_iterations;
   |                                          ^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `target_quality` on type `coordinator_types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:95:16
   |
95 |         merged.target_quality = merged.target_quality.max(spec.target_quality);
   |                ^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `target_quality` on type `coordinator_types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:95:40
   |
95 |         merged.target_quality = merged.target_quality.max(spec.target_quality);
   |                                        ^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `target_quality` on type `&coordinator_types::OptimizationSpec`
  --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:95:64
   |
95 |         merged.target_quality = merged.target_quality.max(spec.target_quality);
   |                                                                ^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `objective`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:155:13
    |
155 |             objective: objective.to_string(),
    |             ^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `constraints`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:156:13
    |
156 |             constraints: vec![
    |             ^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `success_criteria`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:163:13
    |
163 |             success_criteria: vec![
    |             ^^^^^^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `optimization_type`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:169:13
    |
169 |             optimization_type: OptimizationType::Performance,
    |             ^^^^^^^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `timeout_ms`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:170:13
    |
170 |             timeout_ms: Some(300_000),
    |             ^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `max_iterations`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:171:13
    |
171 |             max_iterations: Some(150),
    |             ^^^^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `target_quality`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:172:13
    |
172 |             target_quality: 0.85,
    |             ^^^^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `objective`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:179:13
    |
179 |             objective: objective.to_string(),
    |             ^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `constraints`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:180:13
    |
180 |             constraints: vec![
    |             ^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `success_criteria`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:187:13
    |
187 |             success_criteria: vec![
    |             ^^^^^^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `optimization_type`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:193:13
    |
193 |             optimization_type: OptimizationType::Memory,
    |             ^^^^^^^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0599]: no variant or associated item named `Memory` found for enum `cognitive::types::OptimizationType` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:193:50
    |
193 |             optimization_type: OptimizationType::Memory,
    |                                                  ^^^^^^ variant or associated item not found in `cognitive::types::OptimizationType`
    |
   ::: packages/sweetmcp-memory/src/cognitive/types.rs:352:1
    |
352 | pub enum OptimizationType {
    | ------------------------- variant or associated item `Memory` not found for this enum

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `timeout_ms`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:194:13
    |
194 |             timeout_ms: Some(450_000),
    |             ^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `max_iterations`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:195:13
    |
195 |             max_iterations: Some(200),
    |             ^^^^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `target_quality`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:196:13
    |
196 |             target_quality: 0.8,
    |             ^^^^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `objective`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:203:13
    |
203 |             objective: objective.to_string(),
    |             ^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `constraints`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:204:13
    |
204 |             constraints: vec![
    |             ^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `success_criteria`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:210:13
    |
210 |             success_criteria: vec![
    |             ^^^^^^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `optimization_type`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:216:13
    |
216 |             optimization_type: OptimizationType::Quality,
    |             ^^^^^^^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `timeout_ms`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:217:13
    |
217 |             timeout_ms: Some(600_000),
    |             ^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `max_iterations`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:218:13
    |
218 |             max_iterations: Some(100),
    |             ^^^^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `target_quality`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:219:13
    |
219 |             target_quality: 0.9,
    |             ^^^^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `objective`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:226:13
    |
226 |             objective: objective.to_string(),
    |             ^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `constraints`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:227:13
    |
227 |             constraints: vec![
    |             ^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `success_criteria`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:234:13
    |
234 |             success_criteria: vec![
    |             ^^^^^^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `optimization_type`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:240:13
    |
240 |             optimization_type: OptimizationType::Security,
    |             ^^^^^^^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0599]: no variant or associated item named `Security` found for enum `cognitive::types::OptimizationType` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:240:50
    |
240 |             optimization_type: OptimizationType::Security,
    |                                                  ^^^^^^^^ variant or associated item not found in `cognitive::types::OptimizationType`
    |
   ::: packages/sweetmcp-memory/src/cognitive/types.rs:352:1
    |
352 | pub enum OptimizationType {
    | ------------------------- variant or associated item `Security` not found for this enum

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `timeout_ms`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:241:13
    |
241 |             timeout_ms: Some(900_000),
    |             ^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `max_iterations`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:242:13
    |
242 |             max_iterations: Some(75),
    |             ^^^^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `target_quality`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:243:13
    |
243 |             target_quality: 0.95,
    |             ^^^^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `objective`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:250:13
    |
250 |             objective: objective.to_string(),
    |             ^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `constraints`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:251:13
    |
251 |             constraints: vec![
    |             ^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `success_criteria`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:258:13
    |
258 |             success_criteria: vec![
    |             ^^^^^^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `optimization_type`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:264:13
    |
264 |             optimization_type: OptimizationType::Performance,
    |             ^^^^^^^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `timeout_ms`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:265:13
    |
265 |             timeout_ms: Some(450_000),
    |             ^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `max_iterations`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:266:13
    |
266 |             max_iterations: Some(125),
    |             ^^^^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0560]: struct `coordinator_types::OptimizationSpec` has no field named `target_quality`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:267:13
    |
267 |             target_quality: 0.82,
    |             ^^^^^^^^^^^^^^ `coordinator_types::OptimizationSpec` does not have this field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `objective` on type `coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:293:19
    |
293 |         self.spec.objective = objective.to_string();
    |                   ^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `constraints` on type `coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:299:19
    |
299 |         self.spec.constraints.push(constraint.to_string());
    |                   ^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `constraints` on type `coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:306:23
    |
306 |             self.spec.constraints.push(constraint.to_string());
    |                       ^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `success_criteria` on type `coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:313:19
    |
313 |         self.spec.success_criteria.push(criterion.to_string());
    |                   ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `success_criteria` on type `coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:320:23
    |
320 |             self.spec.success_criteria.push(criterion.to_string());
    |                       ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `optimization_type` on type `coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:327:19
    |
327 |         self.spec.optimization_type = opt_type;
    |                   ^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `timeout_ms` on type `coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:333:19
    |
333 |         self.spec.timeout_ms = Some(timeout);
    |                   ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `timeout_ms` on type `coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:339:19
    |
339 |         self.spec.timeout_ms = Some(seconds * 1000);
    |                   ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `timeout_ms` on type `coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:345:19
    |
345 |         self.spec.timeout_ms = Some(minutes * 60 * 1000);
    |                   ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `max_iterations` on type `coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:351:19
    |
351 |         self.spec.max_iterations = Some(max_iter);
    |                   ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `target_quality` on type `coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:357:19
    |
357 |         self.spec.target_quality = quality.clamp(0.1, 1.0);
    |                   ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `objective` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:380:38
    |
380 |             objective_differs: spec1.objective != spec2.objective,
    |                                      ^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `objective` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:380:57
    |
380 |             objective_differs: spec1.objective != spec2.objective,
    |                                                         ^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `constraints` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:381:39
    |
381 |             constraints_differ: spec1.constraints != spec2.constraints,
    |                                       ^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `constraints` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:381:60
    |
381 |             constraints_differ: spec1.constraints != spec2.constraints,
    |                                                            ^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `success_criteria` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:382:36
    |
382 |             criteria_differ: spec1.success_criteria != spec2.success_criteria,
    |                                    ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `success_criteria` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:382:62
    |
382 |             criteria_differ: spec1.success_criteria != spec2.success_criteria,
    |                                                              ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `optimization_type` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:383:33
    |
383 |             type_differs: spec1.optimization_type != spec2.optimization_type,
    |                                 ^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `optimization_type` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:383:60
    |
383 |             type_differs: spec1.optimization_type != spec2.optimization_type,
    |                                                            ^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `timeout_ms` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:384:36
    |
384 |             timeout_differs: spec1.timeout_ms != spec2.timeout_ms,
    |                                    ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `timeout_ms` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:384:56
    |
384 |             timeout_differs: spec1.timeout_ms != spec2.timeout_ms,
    |                                                        ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `max_iterations` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:385:38
    |
385 |             iterations_differ: spec1.max_iterations != spec2.max_iterations,
    |                                      ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `max_iterations` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:385:62
    |
385 |             iterations_differ: spec1.max_iterations != spec2.max_iterations,
    |                                                              ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `target_quality` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:386:37
    |
386 |             quality_differs: (spec1.target_quality - spec2.target_quality).abs() > 0.01,
    |                                     ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `target_quality` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:386:60
    |
386 |             quality_differs: (spec1.target_quality - spec2.target_quality).abs() > 0.01,
    |                                                            ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `objective` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:401:18
    |
401 |             spec.objective,
    |                  ^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `optimization_type` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:402:18
    |
402 |             spec.optimization_type,
    |                  ^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `constraints` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:403:18
    |
403 |             spec.constraints.len(),
    |                  ^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `success_criteria` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:404:18
    |
404 |             spec.success_criteria.len(),
    |                  ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `timeout_ms` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:405:18
    |
405 |             spec.timeout_ms.unwrap_or(0),
    |                  ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `max_iterations` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:406:18
    |
406 |             spec.max_iterations.unwrap_or(0),
    |                  ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `target_quality` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:407:18
    |
407 |             spec.target_quality * 100.0
    |                  ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0277]: the trait bound `coordinator_types::OptimizationSpec: Serialize` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:413:38
     |
413  |         serde_json::to_string_pretty(spec)
     |         ---------------------------- ^^^^ the trait `Serialize` is not implemented for `coordinator_types::OptimizationSpec`
     |         |
     |         required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `coordinator_types::OptimizationSpec` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1106 others
note: required by a bound in `to_string_pretty`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-1.0.141/src/ser.rs:2266:17
     |
2264 | pub fn to_string_pretty<T>(value: &T) -> Result<String>
     |        ---------------- required by a bound in this function
2265 | where
2266 |     T: ?Sized + Serialize,
     |                 ^^^^^^^^^ required by this bound in `to_string_pretty`

error[E0609]: no field `objective` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:429:15
    |
429 |         !spec.objective.trim().is_empty() &&
    |               ^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `constraints` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:430:15
    |
430 |         !spec.constraints.is_empty() &&
    |               ^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `success_criteria` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:431:15
    |
431 |         !spec.success_criteria.is_empty() &&
    |               ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `target_quality` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:432:14
    |
432 |         spec.target_quality > 0.0 &&
    |              ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `target_quality` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:433:14
    |
433 |         spec.target_quality <= 1.0
    |              ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `constraints` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:438:43
    |
438 |         let constraint_complexity = (spec.constraints.len().min(10) as f64) / 10.0;
    |                                           ^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `success_criteria` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:439:41
    |
439 |         let criteria_complexity = (spec.success_criteria.len().min(10) as f64) / 10.0;
    |                                         ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `objective` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:440:44
    |
440 |         let objective_complexity = if spec.objective.len() > 100 { 1.0 } else { spec.objective.len() as f64 / 100.0 };
    |                                            ^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `objective` on type `&coordinator_types::OptimizationSpec`
   --> packages/sweetmcp-memory/src/cognitive/orchestrator/parsing_mod.rs:440:86
    |
440 |         let objective_complexity = if spec.objective.len() > 100 { 1.0 } else { spec.objective.len() as f64 / 100.0 };
    |                                                                                      ^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `baseline_metrics` on type `&std::sync::Arc<coordinator_types::OptimizationSpec>`
   --> packages/sweetmcp-memory/src/cognitive/performance.rs:100:21
    |
100 |             <= spec.baseline_metrics.latency
    |                     ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `content_type` on type `&std::sync::Arc<coordinator_types::OptimizationSpec>`
   --> packages/sweetmcp-memory/src/cognitive/performance.rs:101:31
    |
101 |                 * (1.0 + spec.content_type.restrictions.max_latency_increase / 100.0);
    |                               ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `baseline_metrics` on type `&std::sync::Arc<coordinator_types::OptimizationSpec>`
   --> packages/sweetmcp-memory/src/cognitive/performance.rs:103:21
    |
103 |             <= spec.baseline_metrics.memory
    |                     ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `content_type` on type `&std::sync::Arc<coordinator_types::OptimizationSpec>`
   --> packages/sweetmcp-memory/src/cognitive/performance.rs:104:31
    |
104 |                 * (1.0 + spec.content_type.restrictions.max_memory_increase / 100.0);
    |                               ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `baseline_metrics` on type `&std::sync::Arc<coordinator_types::OptimizationSpec>`
   --> packages/sweetmcp-memory/src/cognitive/performance.rs:106:21
    |
106 |             >= spec.baseline_metrics.relevance
    |                     ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `content_type` on type `&std::sync::Arc<coordinator_types::OptimizationSpec>`
   --> packages/sweetmcp-memory/src/cognitive/performance.rs:107:31
    |
107 |                 * (1.0 + spec.content_type.restrictions.min_relevance_improvement / 100.0);
    |                               ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `baseline_metrics` on type `&std::sync::Arc<coordinator_types::OptimizationSpec>`
   --> packages/sweetmcp-memory/src/cognitive/performance.rs:115:19
    |
115 |             (spec.baseline_metrics.latency - state.latency) / spec.baseline_metrics.latency;
    |                   ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `baseline_metrics` on type `&std::sync::Arc<coordinator_types::OptimizationSpec>`
   --> packages/sweetmcp-memory/src/cognitive/performance.rs:115:68
    |
115 |             (spec.baseline_metrics.latency - state.latency) / spec.baseline_metrics.latency;
    |                                                                    ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `baseline_metrics` on type `&std::sync::Arc<coordinator_types::OptimizationSpec>`
   --> packages/sweetmcp-memory/src/cognitive/performance.rs:117:19
    |
117 |             (spec.baseline_metrics.memory - state.memory) / spec.baseline_metrics.memory;
    |                   ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `baseline_metrics` on type `&std::sync::Arc<coordinator_types::OptimizationSpec>`
   --> packages/sweetmcp-memory/src/cognitive/performance.rs:117:66
    |
117 |             (spec.baseline_metrics.memory - state.memory) / spec.baseline_metrics.memory;
    |                                                                  ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `baseline_metrics` on type `&std::sync::Arc<coordinator_types::OptimizationSpec>`
   --> packages/sweetmcp-memory/src/cognitive/performance.rs:119:37
    |
119 |             (state.relevance - spec.baseline_metrics.relevance) / spec.baseline_metrics.relevance;
    |                                     ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0609]: no field `baseline_metrics` on type `&std::sync::Arc<coordinator_types::OptimizationSpec>`
   --> packages/sweetmcp-memory/src/cognitive/performance.rs:119:72
    |
119 |             (state.relevance - spec.baseline_metrics.relevance) / spec.baseline_metrics.relevance;
    |                                                                        ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `algorithms`, `dimension_reduction_target`, `quantization_levels`, `cache_size`, `batch_size`

error[E0614]: type `f32` cannot be dereferenced
   --> packages/sweetmcp-memory/src/cognitive/attention/scoring.rs:263:45
    |
263 |             .map(|(id, score)| (id.clone(), **score))
    |                                             ^^^^^^^ can't be dereferenced

error[E0277]: the trait bound `ArrayVec<Association, 16>: Serialize` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/state.rs:12:24
     |
12   | #[derive(Debug, Clone, Serialize, Deserialize)]
     |                        ^^^^^^^^^ the trait `Serialize` is not implemented for `ArrayVec<Association, 16>`
...
19   |     pub associations: ArrayVec<Association, 16>, // Max 16 associations per state
     |     ------------------------------------------- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `ArrayVec<Association, 16>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1106 others
note: required by a bound in `llm::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `std::time::Instant: Serialize` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/state.rs:12:24
     |
12   | #[derive(Debug, Clone, Serialize, Deserialize)]
     |                        ^^^^^^^^^ the trait `Serialize` is not implemented for `std::time::Instant`
...
20   |     pub timestamp: Instant,
     |     ---------------------- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1106 others
note: required by a bound in `llm::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `ArrayVec<Association, 16>: Deserialize<'_>` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/state.rs:19:23
     |
19   |     pub associations: ArrayVec<Association, 16>, // Max 16 associations per state
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `ArrayVec<Association, 16>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ArrayVec<Association, 16>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 1033 others
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `std::time::Instant: Deserialize<'_>` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/state.rs:20:20
     |
20   |     pub timestamp: Instant,
     |                    ^^^^^^^ the trait `Deserialize<'_>` is not implemented for `std::time::Instant`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 1033 others
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ArrayVec<Association, 16>: Deserialize<'_>` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/state.rs:19:23
     |
19   |     pub associations: ArrayVec<Association, 16>, // Max 16 associations per state
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `ArrayVec<Association, 16>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ArrayVec<Association, 16>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 1033 others
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `std::time::Instant: Deserialize<'_>` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/state.rs:20:20
     |
20   |     pub timestamp: Instant,
     |                    ^^^^^^^ the trait `Deserialize<'_>` is not implemented for `std::time::Instant`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 1033 others
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ArrayVec<Association, 16>: Deserialize<'_>` is not satisfied
  --> packages/sweetmcp-memory/src/cognitive/state.rs:12:35
   |
12 | #[derive(Debug, Clone, Serialize, Deserialize)]
   |                                   ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `ArrayVec<Association, 16>`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ArrayVec<Association, 16>` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `Deserialize<'de>`:
             `&'a [u8]` implements `Deserialize<'de>`
             `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
             `&'a std::path::Path` implements `Deserialize<'de>`
             `&'a str` implements `Deserialize<'de>`
             `()` implements `Deserialize<'de>`
             `(T,)` implements `Deserialize<'de>`
             `(T0, T1)` implements `Deserialize<'de>`
             `(T0, T1, T2)` implements `Deserialize<'de>`
           and 1033 others
note: required by a bound in `llm::_::_serde::__private::de::missing_field`
  --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
   |
23 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
24 | where
25 |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `std::time::Instant: Deserialize<'_>` is not satisfied
  --> packages/sweetmcp-memory/src/cognitive/state.rs:12:35
   |
12 | #[derive(Debug, Clone, Serialize, Deserialize)]
   |                                   ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `std::time::Instant`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `std::time::Instant` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `Deserialize<'de>`:
             `&'a [u8]` implements `Deserialize<'de>`
             `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
             `&'a std::path::Path` implements `Deserialize<'de>`
             `&'a str` implements `Deserialize<'de>`
             `()` implements `Deserialize<'de>`
             `(T,)` implements `Deserialize<'de>`
             `(T0, T1)` implements `Deserialize<'de>`
             `(T0, T1, T2)` implements `Deserialize<'de>`
           and 1033 others
note: required by a bound in `llm::_::_serde::__private::de::missing_field`
  --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
   |
23 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
24 | where
25 |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `ArrayVec<ArrayString<32>, 8>: Serialize` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/state.rs:24:24
     |
24   | #[derive(Debug, Clone, Serialize, Deserialize)]
     |                        ^^^^^^^^^ the trait `Serialize` is not implemented for `ArrayVec<ArrayString<32>, 8>`
25   | pub struct SemanticContext {
26   |     pub primary_concepts: ArrayVec<ArrayString<32>, 8>, // Max 8 concepts, 32 chars each
     |     -------------------------------------------------- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `ArrayVec<ArrayString<32>, 8>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1106 others
note: required by a bound in `llm::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `ArrayVec<ArrayString<32>, 16>: Serialize` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/state.rs:24:24
     |
24   | #[derive(Debug, Clone, Serialize, Deserialize)]
     |                        ^^^^^^^^^ the trait `Serialize` is not implemented for `ArrayVec<ArrayString<32>, 16>`
...
27   |     pub secondary_concepts: ArrayVec<ArrayString<32>, 16>, // Max 16 concepts, 32 chars each
     |     ----------------------------------------------------- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `ArrayVec<ArrayString<32>, 16>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1106 others
note: required by a bound in `llm::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `ArrayVec<ArrayString<24>, 4>: Serialize` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/state.rs:24:24
     |
24   | #[derive(Debug, Clone, Serialize, Deserialize)]
     |                        ^^^^^^^^^ the trait `Serialize` is not implemented for `ArrayVec<ArrayString<24>, 4>`
...
28   |     pub domain_tags: ArrayVec<ArrayString<24>, 4>,      // Max 4 domains, 24 chars each
     |     --------------------------------------------- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `ArrayVec<ArrayString<24>, 4>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1106 others
note: required by a bound in `llm::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `ArrayVec<ArrayString<32>, 8>: Deserialize<'_>` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/state.rs:26:27
     |
26   |     pub primary_concepts: ArrayVec<ArrayString<32>, 8>, // Max 8 concepts, 32 chars each
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `ArrayVec<ArrayString<32>, 8>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ArrayVec<ArrayString<32>, 8>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 1033 others
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ArrayVec<ArrayString<32>, 16>: Deserialize<'_>` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/state.rs:27:29
     |
27   |     pub secondary_concepts: ArrayVec<ArrayString<32>, 16>, // Max 16 concepts, 32 chars each
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `ArrayVec<ArrayString<32>, 16>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ArrayVec<ArrayString<32>, 16>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 1033 others
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ArrayVec<ArrayString<24>, 4>: Deserialize<'_>` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/state.rs:28:22
     |
28   |     pub domain_tags: ArrayVec<ArrayString<24>, 4>,      // Max 4 domains, 24 chars each
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `ArrayVec<ArrayString<24>, 4>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ArrayVec<ArrayString<24>, 4>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 1033 others
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ArrayVec<ArrayString<32>, 8>: Deserialize<'_>` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/state.rs:26:27
     |
26   |     pub primary_concepts: ArrayVec<ArrayString<32>, 8>, // Max 8 concepts, 32 chars each
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `ArrayVec<ArrayString<32>, 8>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ArrayVec<ArrayString<32>, 8>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 1033 others
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ArrayVec<ArrayString<32>, 16>: Deserialize<'_>` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/state.rs:27:29
     |
27   |     pub secondary_concepts: ArrayVec<ArrayString<32>, 16>, // Max 16 concepts, 32 chars each
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `ArrayVec<ArrayString<32>, 16>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ArrayVec<ArrayString<32>, 16>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 1033 others
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ArrayVec<ArrayString<24>, 4>: Deserialize<'_>` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/state.rs:28:22
     |
28   |     pub domain_tags: ArrayVec<ArrayString<24>, 4>,      // Max 4 domains, 24 chars each
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `ArrayVec<ArrayString<24>, 4>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ArrayVec<ArrayString<24>, 4>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 1033 others
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ArrayVec<ArrayString<32>, 8>: Deserialize<'_>` is not satisfied
  --> packages/sweetmcp-memory/src/cognitive/state.rs:24:35
   |
24 | #[derive(Debug, Clone, Serialize, Deserialize)]
   |                                   ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `ArrayVec<ArrayString<32>, 8>`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ArrayVec<ArrayString<32>, 8>` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `Deserialize<'de>`:
             `&'a [u8]` implements `Deserialize<'de>`
             `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
             `&'a std::path::Path` implements `Deserialize<'de>`
             `&'a str` implements `Deserialize<'de>`
             `()` implements `Deserialize<'de>`
             `(T,)` implements `Deserialize<'de>`
             `(T0, T1)` implements `Deserialize<'de>`
             `(T0, T1, T2)` implements `Deserialize<'de>`
           and 1033 others
note: required by a bound in `llm::_::_serde::__private::de::missing_field`
  --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
   |
23 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
24 | where
25 |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `ArrayVec<ArrayString<32>, 16>: Deserialize<'_>` is not satisfied
  --> packages/sweetmcp-memory/src/cognitive/state.rs:24:35
   |
24 | #[derive(Debug, Clone, Serialize, Deserialize)]
   |                                   ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `ArrayVec<ArrayString<32>, 16>`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ArrayVec<ArrayString<32>, 16>` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `Deserialize<'de>`:
             `&'a [u8]` implements `Deserialize<'de>`
             `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
             `&'a std::path::Path` implements `Deserialize<'de>`
             `&'a str` implements `Deserialize<'de>`
             `()` implements `Deserialize<'de>`
             `(T,)` implements `Deserialize<'de>`
             `(T0, T1)` implements `Deserialize<'de>`
             `(T0, T1, T2)` implements `Deserialize<'de>`
           and 1033 others
note: required by a bound in `llm::_::_serde::__private::de::missing_field`
  --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
   |
23 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
24 | where
25 |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `ArrayVec<ArrayString<24>, 4>: Deserialize<'_>` is not satisfied
  --> packages/sweetmcp-memory/src/cognitive/state.rs:24:35
   |
24 | #[derive(Debug, Clone, Serialize, Deserialize)]
   |                                   ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `ArrayVec<ArrayString<24>, 4>`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ArrayVec<ArrayString<24>, 4>` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `Deserialize<'de>`:
             `&'a [u8]` implements `Deserialize<'de>`
             `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
             `&'a std::path::Path` implements `Deserialize<'de>`
             `&'a str` implements `Deserialize<'de>`
             `()` implements `Deserialize<'de>`
             `(T,)` implements `Deserialize<'de>`
             `(T0, T1)` implements `Deserialize<'de>`
             `(T0, T1, T2)` implements `Deserialize<'de>`
           and 1033 others
note: required by a bound in `llm::_::_serde::__private::de::missing_field`
  --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
   |
23 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
24 | where
25 |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/circuit_builder.rs:24:31
   |
24 |         self.circuit.add_gate(QuantumGate::PauliX { target });
   |                      -------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `quantum_circuits::QuantumGate`, found `gate_impl::QuantumGate`
   |                      |
   |                      arguments to this method are incorrect
   |
   = note: `gate_impl::QuantumGate` and `quantum_circuits::QuantumGate` have similar names, but are actually distinct types
note: `gate_impl::QuantumGate` is defined in module `crate::cognitive::quantum::error_correction::gate_impl` of the current crate
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/gate_impl.rs:8:1
   |
8  | pub enum QuantumGate {
   | ^^^^^^^^^^^^^^^^^^^^
note: `quantum_circuits::QuantumGate` is defined in module `crate::cognitive::quantum::error_correction::quantum_circuits` of the current crate
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/quantum_circuits.rs:51:1
   |
51 | pub enum QuantumGate {
   | ^^^^^^^^^^^^^^^^^^^^
note: method defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/quantum_circuits.rs:23:12
   |
23 |     pub fn add_gate(&mut self, gate: QuantumGate) {
   |            ^^^^^^^^            -----------------

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/circuit_builder.rs:30:31
   |
30 |         self.circuit.add_gate(QuantumGate::PauliY { target });
   |                      -------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `quantum_circuits::QuantumGate`, found `gate_impl::QuantumGate`
   |                      |
   |                      arguments to this method are incorrect
   |
   = note: `gate_impl::QuantumGate` and `quantum_circuits::QuantumGate` have similar names, but are actually distinct types
note: `gate_impl::QuantumGate` is defined in module `crate::cognitive::quantum::error_correction::gate_impl` of the current crate
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/gate_impl.rs:8:1
   |
8  | pub enum QuantumGate {
   | ^^^^^^^^^^^^^^^^^^^^
note: `quantum_circuits::QuantumGate` is defined in module `crate::cognitive::quantum::error_correction::quantum_circuits` of the current crate
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/quantum_circuits.rs:51:1
   |
51 | pub enum QuantumGate {
   | ^^^^^^^^^^^^^^^^^^^^
note: method defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/quantum_circuits.rs:23:12
   |
23 |     pub fn add_gate(&mut self, gate: QuantumGate) {
   |            ^^^^^^^^            -----------------

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/circuit_builder.rs:36:31
   |
36 |         self.circuit.add_gate(QuantumGate::PauliZ { target });
   |                      -------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `quantum_circuits::QuantumGate`, found `gate_impl::QuantumGate`
   |                      |
   |                      arguments to this method are incorrect
   |
   = note: `gate_impl::QuantumGate` and `quantum_circuits::QuantumGate` have similar names, but are actually distinct types
note: `gate_impl::QuantumGate` is defined in module `crate::cognitive::quantum::error_correction::gate_impl` of the current crate
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/gate_impl.rs:8:1
   |
8  | pub enum QuantumGate {
   | ^^^^^^^^^^^^^^^^^^^^
note: `quantum_circuits::QuantumGate` is defined in module `crate::cognitive::quantum::error_correction::quantum_circuits` of the current crate
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/quantum_circuits.rs:51:1
   |
51 | pub enum QuantumGate {
   | ^^^^^^^^^^^^^^^^^^^^
note: method defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/quantum_circuits.rs:23:12
   |
23 |     pub fn add_gate(&mut self, gate: QuantumGate) {
   |            ^^^^^^^^            -----------------

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/circuit_builder.rs:42:31
   |
42 |         self.circuit.add_gate(QuantumGate::Hadamard { target });
   |                      -------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `quantum_circuits::QuantumGate`, found `gate_impl::QuantumGate`
   |                      |
   |                      arguments to this method are incorrect
   |
   = note: `gate_impl::QuantumGate` and `quantum_circuits::QuantumGate` have similar names, but are actually distinct types
note: `gate_impl::QuantumGate` is defined in module `crate::cognitive::quantum::error_correction::gate_impl` of the current crate
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/gate_impl.rs:8:1
   |
8  | pub enum QuantumGate {
   | ^^^^^^^^^^^^^^^^^^^^
note: `quantum_circuits::QuantumGate` is defined in module `crate::cognitive::quantum::error_correction::quantum_circuits` of the current crate
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/quantum_circuits.rs:51:1
   |
51 | pub enum QuantumGate {
   | ^^^^^^^^^^^^^^^^^^^^
note: method defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/quantum_circuits.rs:23:12
   |
23 |     pub fn add_gate(&mut self, gate: QuantumGate) {
   |            ^^^^^^^^            -----------------

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/circuit_builder.rs:48:31
   |
48 |         self.circuit.add_gate(QuantumGate::CNOT { control, target });
   |                      -------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `quantum_circuits::QuantumGate`, found `gate_impl::QuantumGate`
   |                      |
   |                      arguments to this method are incorrect
   |
   = note: `gate_impl::QuantumGate` and `quantum_circuits::QuantumGate` have similar names, but are actually distinct types
note: `gate_impl::QuantumGate` is defined in module `crate::cognitive::quantum::error_correction::gate_impl` of the current crate
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/gate_impl.rs:8:1
   |
8  | pub enum QuantumGate {
   | ^^^^^^^^^^^^^^^^^^^^
note: `quantum_circuits::QuantumGate` is defined in module `crate::cognitive::quantum::error_correction::quantum_circuits` of the current crate
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/quantum_circuits.rs:51:1
   |
51 | pub enum QuantumGate {
   | ^^^^^^^^^^^^^^^^^^^^
note: method defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/quantum_circuits.rs:23:12
   |
23 |     pub fn add_gate(&mut self, gate: QuantumGate) {
   |            ^^^^^^^^            -----------------

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/circuit_builder.rs:54:31
   |
54 |         self.circuit.add_gate(QuantumGate::CZ { control, target });
   |                      -------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `quantum_circuits::QuantumGate`, found `gate_impl::QuantumGate`
   |                      |
   |                      arguments to this method are incorrect
   |
   = note: `gate_impl::QuantumGate` and `quantum_circuits::QuantumGate` have similar names, but are actually distinct types
note: `gate_impl::QuantumGate` is defined in module `crate::cognitive::quantum::error_correction::gate_impl` of the current crate
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/gate_impl.rs:8:1
   |
8  | pub enum QuantumGate {
   | ^^^^^^^^^^^^^^^^^^^^
note: `quantum_circuits::QuantumGate` is defined in module `crate::cognitive::quantum::error_correction::quantum_circuits` of the current crate
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/quantum_circuits.rs:51:1
   |
51 | pub enum QuantumGate {
   | ^^^^^^^^^^^^^^^^^^^^
note: method defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/quantum_circuits.rs:23:12
   |
23 |     pub fn add_gate(&mut self, gate: QuantumGate) {
   |            ^^^^^^^^            -----------------

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/circuit_builder.rs:60:31
   |
60 |         self.circuit.add_gate(QuantumGate::Measure { target, classical_bit });
   |                      -------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `quantum_circuits::QuantumGate`, found `gate_impl::QuantumGate`
   |                      |
   |                      arguments to this method are incorrect
   |
   = note: `gate_impl::QuantumGate` and `quantum_circuits::QuantumGate` have similar names, but are actually distinct types
note: `gate_impl::QuantumGate` is defined in module `crate::cognitive::quantum::error_correction::gate_impl` of the current crate
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/gate_impl.rs:8:1
   |
8  | pub enum QuantumGate {
   | ^^^^^^^^^^^^^^^^^^^^
note: `quantum_circuits::QuantumGate` is defined in module `crate::cognitive::quantum::error_correction::quantum_circuits` of the current crate
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/quantum_circuits.rs:51:1
   |
51 | pub enum QuantumGate {
   | ^^^^^^^^^^^^^^^^^^^^
note: method defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/quantum_circuits.rs:23:12
   |
23 |     pub fn add_gate(&mut self, gate: QuantumGate) {
   |            ^^^^^^^^            -----------------

error[E0277]: the trait bound `std::time::Instant: Serialize` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/quantum_error_correction.rs:227:24
     |
227  |   #[derive(Debug, Clone, Serialize, Deserialize)]
     |                          ^^^^^^^^^ the trait `Serialize` is not implemented for `std::time::Instant`
...
241  | /     /// Last update timestamp
242  | |     pub last_updated: Instant,
     | |_____________________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1106 others
note: required by a bound in `llm::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `std::time::Instant: Deserialize<'_>` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/quantum_error_correction.rs:242:23
     |
242  |     pub last_updated: Instant,
     |                       ^^^^^^^ the trait `Deserialize<'_>` is not implemented for `std::time::Instant`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 1035 others
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `std::time::Instant: Deserialize<'_>` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/quantum_error_correction.rs:242:23
     |
242  |     pub last_updated: Instant,
     |                       ^^^^^^^ the trait `Deserialize<'_>` is not implemented for `std::time::Instant`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 1035 others
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `std::time::Instant: Deserialize<'_>` is not satisfied
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/quantum_error_correction.rs:227:35
    |
227 | #[derive(Debug, Clone, Serialize, Deserialize)]
    |                                   ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `std::time::Instant`
    |
    = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `std::time::Instant` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `Deserialize<'de>`:
              `&'a [u8]` implements `Deserialize<'de>`
              `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
              `&'a std::path::Path` implements `Deserialize<'de>`
              `&'a str` implements `Deserialize<'de>`
              `()` implements `Deserialize<'de>`
              `(T,)` implements `Deserialize<'de>`
              `(T0, T1)` implements `Deserialize<'de>`
              `(T0, T1, T2)` implements `Deserialize<'de>`
            and 1035 others
note: required by a bound in `llm::_::_serde::__private::de::missing_field`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
    |
23  | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
    |        ------------- required by a bound in this function
24  | where
25  |     V: Deserialize<'de>,
    |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no variant or associated item named `NotImplemented` found for enum `quantum::types::CognitiveError` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/stabilizer_css_types.rs:230:29
    |
230 |         Err(CognitiveError::NotImplemented("Direct construction not yet implemented".to_string()))
    |                             ^^^^^^^^^^^^^^ variant or associated item not found in `quantum::types::CognitiveError`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/types.rs:11:1
    |
11  | pub enum CognitiveError {
    | ----------------------- variant or associated item `NotImplemented` not found for this enum

error[E0599]: no variant or associated item named `NotImplemented` found for enum `quantum::types::CognitiveError` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/stabilizer_css_types.rs:236:29
    |
236 |         Err(CognitiveError::NotImplemented("Hypergraph product construction not yet implemented".to_string()))
    |                             ^^^^^^^^^^^^^^ variant or associated item not found in `quantum::types::CognitiveError`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/types.rs:11:1
    |
11  | pub enum CognitiveError {
    | ----------------------- variant or associated item `NotImplemented` not found for this enum

error[E0599]: no variant or associated item named `NotImplemented` found for enum `quantum::types::CognitiveError` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/stabilizer_css_types.rs:242:29
    |
242 |         Err(CognitiveError::NotImplemented("Quantum BCH construction not yet implemented".to_string()))
    |                             ^^^^^^^^^^^^^^ variant or associated item not found in `quantum::types::CognitiveError`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/types.rs:11:1
    |
11  | pub enum CognitiveError {
    | ----------------------- variant or associated item `NotImplemented` not found for this enum

error[E0599]: no variant or associated item named `NotImplemented` found for enum `quantum::types::CognitiveError` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/stabilizer_css_types.rs:248:29
    |
248 |         Err(CognitiveError::NotImplemented("Surface code construction not yet implemented".to_string()))
    |                             ^^^^^^^^^^^^^^ variant or associated item not found in `quantum::types::CognitiveError`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/types.rs:11:1
    |
11  | pub enum CognitiveError {
    | ----------------------- variant or associated item `NotImplemented` not found for this enum

error[E0277]: the trait bound `stabilizer_core_types::PauliMatrix: std::cmp::Eq` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/stabilizer_decoders.rs:393:22
     |
393  |         error_priors.insert(PauliMatrix::X, 0.01);
     |                      ^^^^^^ the trait `std::cmp::Eq` is not implemented for `stabilizer_core_types::PauliMatrix`
     |
note: required by a bound in `std::collections::HashMap::<K, V, S>::insert`
    --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:763:8
     |
763  |     K: Eq + Hash,
     |        ^^ required by this bound in `HashMap::<K, V, S>::insert`
...
1203 |     pub fn insert(&mut self, k: K, v: V) -> Option<V> {
     |            ------ required by a bound in this associated function
help: consider annotating `stabilizer_core_types::PauliMatrix` with `#[derive(Eq)]`
    -->  packages/sweetmcp-memory/src/cognitive/quantum/error_correction/stabilizer_core_types.rs:104:1
     |
104  + #[derive(Eq)]
105  | pub enum PauliMatrix {
     |

error[E0277]: the trait bound `stabilizer_core_types::PauliMatrix: Hash` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/stabilizer_decoders.rs:393:22
     |
393  |         error_priors.insert(PauliMatrix::X, 0.01);
     |                      ^^^^^^ the trait `Hash` is not implemented for `stabilizer_core_types::PauliMatrix`
     |
note: required by a bound in `std::collections::HashMap::<K, V, S>::insert`
    --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:763:13
     |
763  |     K: Eq + Hash,
     |             ^^^^ required by this bound in `HashMap::<K, V, S>::insert`
...
1203 |     pub fn insert(&mut self, k: K, v: V) -> Option<V> {
     |            ------ required by a bound in this associated function
help: consider annotating `stabilizer_core_types::PauliMatrix` with `#[derive(Hash)]`
    -->  packages/sweetmcp-memory/src/cognitive/quantum/error_correction/stabilizer_core_types.rs:104:1
     |
104  + #[derive(Hash)]
105  | pub enum PauliMatrix {
     |

error[E0599]: the method `insert` exists for struct `std::collections::HashMap<stabilizer_core_types::PauliMatrix, {float}>`, but its trait bounds were not satisfied
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/stabilizer_decoders.rs:394:22
    |
394 |         error_priors.insert(PauliMatrix::Y, 0.005);
    |                      ^^^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/error_correction/stabilizer_core_types.rs:104:1
    |
104 | pub enum PauliMatrix {
    | -------------------- doesn't satisfy `stabilizer_core_types::PauliMatrix: Hash` or `stabilizer_core_types::PauliMatrix: std::cmp::Eq`
    |
    = note: the following trait bounds were not satisfied:
            `stabilizer_core_types::PauliMatrix: std::cmp::Eq`
            `stabilizer_core_types::PauliMatrix: Hash`
help: consider annotating `stabilizer_core_types::PauliMatrix` with `#[derive(Eq, Hash, PartialEq)]`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/stabilizer_core_types.rs:104:1
    |
104 + #[derive(Eq, Hash, PartialEq)]
105 | pub enum PauliMatrix {
    |

error[E0599]: the method `insert` exists for struct `std::collections::HashMap<stabilizer_core_types::PauliMatrix, {float}>`, but its trait bounds were not satisfied
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/stabilizer_decoders.rs:395:22
    |
395 |         error_priors.insert(PauliMatrix::Z, 0.01);
    |                      ^^^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/error_correction/stabilizer_core_types.rs:104:1
    |
104 | pub enum PauliMatrix {
    | -------------------- doesn't satisfy `stabilizer_core_types::PauliMatrix: Hash` or `stabilizer_core_types::PauliMatrix: std::cmp::Eq`
    |
    = note: the following trait bounds were not satisfied:
            `stabilizer_core_types::PauliMatrix: std::cmp::Eq`
            `stabilizer_core_types::PauliMatrix: Hash`
help: consider annotating `stabilizer_core_types::PauliMatrix` with `#[derive(Eq, Hash, PartialEq)]`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/stabilizer_core_types.rs:104:1
    |
104 + #[derive(Eq, Hash, PartialEq)]
105 | pub enum PauliMatrix {
    |

error[E0282]: type annotations needed for `&_`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/stabilizer_operations.rs:345:36
    |
345 |         result_paulis.sort_by_key(|op| op.qubit);
    |                                    ^^  -------- type must be known at this point
    |
help: consider giving this closure parameter an explicit type, where the type for type parameter `T` is specified
    |
345 |         result_paulis.sort_by_key(|op: &T| op.qubit);
    |                                      ++++

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/surface_code/syndrome_detection.rs:143:69
    |
143 |         matches!(self.pauli_type, PauliType::I) || self.coefficient.norm() < 1e-10
    |                                                                     ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0283]: type annotations needed for `SmallVec<_>`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/surface_code/layout_management.rs:281:17
    |
281 |             let mut pauli_ops = SmallVec::new();
    |                 ^^^^^^^^^^^^^   -------- type must be known at this point
    |
    = note: cannot satisfy `_: smallvec::Array`
    = help: the trait `smallvec::Array` is implemented for `[T; N]`
note: required by a bound in `SmallVec`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/smallvec-1.15.1/src/lib.rs:772:24
    |
772 | pub struct SmallVec<A: Array> {
    |                        ^^^^^ required by this bound in `SmallVec`
help: consider giving `pauli_ops` an explicit type, where the type for type parameter `A` is specified
    |
281 |             let mut pauli_ops: SmallVec<A> = SmallVec::new();
    |                              +++++++++++++

error[E0599]: no variant or associated item named `InvalidInput` found for enum `quantum::types::CognitiveError` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/surface_code/layout_management.rs:641:29
    |
641 |             CognitiveError::InvalidInput("Layout dimensions must be specified".to_string())
    |                             ^^^^^^^^^^^^ variant or associated item not found in `quantum::types::CognitiveError`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/types.rs:11:1
    |
11  | pub enum CognitiveError {
    | ----------------------- variant or associated item `InvalidInput` not found for this enum

error[E0599]: no variant or associated item named `InvalidInput` found for enum `quantum::types::CognitiveError` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/surface_code/layout_management.rs:647:40
    |
647 |             return Err(CognitiveError::InvalidInput(
    |                                        ^^^^^^^^^^^^ variant or associated item not found in `quantum::types::CognitiveError`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/types.rs:11:1
    |
11  | pub enum CognitiveError {
    | ----------------------- variant or associated item `InvalidInput` not found for this enum

error[E0599]: no variant or associated item named `InvalidInput` found for enum `quantum::types::CognitiveError` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/surface_code/layout_management.rs:656:40
    |
656 |             return Err(CognitiveError::InvalidInput("Layout does not meet specified constraints".to_string()));
    |                                        ^^^^^^^^^^^^ variant or associated item not found in `quantum::types::CognitiveError`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/types.rs:11:1
    |
11  | pub enum CognitiveError {
    | ----------------------- variant or associated item `InvalidInput` not found for this enum

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/surface_code/logical_operations.rs:118:38
    |
118 |             .map(|op| op.coefficient.norm())
    |                                      ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no variant or associated item named `InvalidInput` found for enum `quantum::types::CognitiveError` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/surface_code/logical_operations.rs:604:33
    |
604 |             Err(CognitiveError::InvalidInput(
    |                                 ^^^^^^^^^^^^ variant or associated item not found in `quantum::types::CognitiveError`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/types.rs:11:1
    |
11  | pub enum CognitiveError {
    | ----------------------- variant or associated item `InvalidInput` not found for this enum

error[E0599]: no method named `conj` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/surface_code/logical_operations.rs:627:76
    |
627 |                     expectation_value += (amplitude * pauli_op.coefficient.conj()).re;
    |                                                                            ^^^^ method not found in `Complex64`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `conj` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `conj`, perhaps you need to implement it:
            candidate #1: `num_complex::complex_float::ComplexFloat`

error[E0609]: no field `re` on type `Complex64`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/surface_code/logical_operations.rs:627:84
    |
627 |                     expectation_value += (amplitude * pauli_op.coefficient.conj()).re;
    |                                                                                    ^^ unknown field
    |
    = note: available fields are: `real`, `imaginary`

error[E0599]: no variant or associated item named `InvalidInput` found for enum `quantum::types::CognitiveError` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/surface_code/logical_operations.rs:639:33
    |
639 |             Err(CognitiveError::InvalidInput(
    |                                 ^^^^^^^^^^^^ variant or associated item not found in `quantum::types::CognitiveError`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/types.rs:11:1
    |
11  | pub enum CognitiveError {
    | ----------------------- variant or associated item `InvalidInput` not found for this enum

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/surface_code/mod.rs:241:41
    |
241 |         let surface_code = SurfaceCode::new(distance, boundary_type)?;
    |                                         ^^^ multiple `new` found
    |
note: candidate #1 is defined in an impl for the type `SurfaceCode`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/surface_code/mod.rs:57:5
    |
57  |     pub fn new(distance: usize, boundary_type: BoundaryType) -> CognitiveResult<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `SurfaceCode`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/mod.rs:148:5
    |
148 | /     pub fn new(
149 | |         code_type: TopologicalCodeType,
150 | |         dimensions: (usize, usize),
151 | |         boundary: BoundaryConditions,
152 | |     ) -> CognitiveResult<Self> {
    | |______________________________^

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/surface_code/mod.rs:369:27
    |
369 |         self.surface_code.validate()
    |                           ^^^^^^^^ multiple `validate` found
    |
note: candidate #1 is defined in an impl for the type `SurfaceCode`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/surface_code/mod.rs:181:5
    |
181 |     pub fn validate(&self) -> CognitiveResult<bool> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `SurfaceCode`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/mod.rs:210:5
    |
210 |     pub fn validate(&self) -> Result<(), String> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `apply_to_state` found for struct `topological_pauli_strings::PauliString` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_logical_operators.rs:100:27
    |
100 |         self.pauli_string.apply_to_state(state)
    |                           ^^^^^^^^^^^^^^ method not found in `topological_pauli_strings::PauliString`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_pauli_strings.rs:12:1
    |
12  | pub struct PauliString {
    | ---------------------- method `apply_to_state` not found for this struct

error[E0599]: no function or associated item named `generate_toric_code_operators` found for struct `LogicalOperatorSet` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_logical_operators.rs:132:23
    |
34  | pub struct LogicalOperatorSet {
    | ----------------------------- function or associated item `generate_toric_code_operators` not found for this struct
...
132 |                 Self::generate_toric_code_operators(lattice)
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function or associated item not found in `LogicalOperatorSet`
    |
note: if you're trying to build a new `LogicalOperatorSet` consider using one of the following associated functions:
      LogicalOperatorSet::new
      LogicalOperatorSet::generate_for_lattice
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_logical_operators.rs:116:5
    |
116 |       pub fn new(code_type: TopologicalCodeType, num_logical_qubits: usize) -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
126 | /     pub fn generate_for_lattice(
127 | |         code_type: TopologicalCodeType,
128 | |         lattice: &TopologicalLattice,
129 | |     ) -> CognitiveResult<Self> {
    | |______________________________^

error[E0599]: no function or associated item named `generate_planar_code_operators` found for struct `LogicalOperatorSet` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_logical_operators.rs:135:23
    |
34  | pub struct LogicalOperatorSet {
    | ----------------------------- function or associated item `generate_planar_code_operators` not found for this struct
...
135 |                 Self::generate_planar_code_operators(lattice)
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function or associated item not found in `LogicalOperatorSet`
    |
note: if you're trying to build a new `LogicalOperatorSet` consider using one of the following associated functions:
      LogicalOperatorSet::new
      LogicalOperatorSet::generate_for_lattice
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_logical_operators.rs:116:5
    |
116 |       pub fn new(code_type: TopologicalCodeType, num_logical_qubits: usize) -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
126 | /     pub fn generate_for_lattice(
127 | |         code_type: TopologicalCodeType,
128 | |         lattice: &TopologicalLattice,
129 | |     ) -> CognitiveResult<Self> {
    | |______________________________^

error[E0599]: no function or associated item named `generate_color_code_operators` found for struct `LogicalOperatorSet` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_logical_operators.rs:138:23
    |
34  | pub struct LogicalOperatorSet {
    | ----------------------------- function or associated item `generate_color_code_operators` not found for this struct
...
138 |                 Self::generate_color_code_operators(lattice)
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function or associated item not found in `LogicalOperatorSet`
    |
note: if you're trying to build a new `LogicalOperatorSet` consider using one of the following associated functions:
      LogicalOperatorSet::new
      LogicalOperatorSet::generate_for_lattice
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_logical_operators.rs:116:5
    |
116 |       pub fn new(code_type: TopologicalCodeType, num_logical_qubits: usize) -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
126 | /     pub fn generate_for_lattice(
127 | |         code_type: TopologicalCodeType,
128 | |         lattice: &TopologicalLattice,
129 | |     ) -> CognitiveResult<Self> {
    | |______________________________^

error[E0599]: no function or associated item named `generate_hyperbolic_operators` found for struct `LogicalOperatorSet` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_logical_operators.rs:141:23
    |
34  | pub struct LogicalOperatorSet {
    | ----------------------------- function or associated item `generate_hyperbolic_operators` not found for this struct
...
141 |                 Self::generate_hyperbolic_operators(lattice)
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function or associated item not found in `LogicalOperatorSet`
    |
note: if you're trying to build a new `LogicalOperatorSet` consider using one of the following associated functions:
      LogicalOperatorSet::new
      LogicalOperatorSet::generate_for_lattice
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_logical_operators.rs:116:5
    |
116 |       pub fn new(code_type: TopologicalCodeType, num_logical_qubits: usize) -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
126 | /     pub fn generate_for_lattice(
127 | |         code_type: TopologicalCodeType,
128 | |         lattice: &TopologicalLattice,
129 | |     ) -> CognitiveResult<Self> {
    | |______________________________^

error[E0599]: no method named `conj` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_pauli.rs:168:30
    |
168 |             self.coefficient.conj(),
    |                              ^^^^ method not found in `Complex64`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `conj` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `conj`, perhaps you need to implement it:
            candidate #1: `num_complex::complex_float::ComplexFloat`

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_pauli.rs:174:26
    |
174 |         self.coefficient.norm() < 1e-10 || self.pauli_type.is_identity()
    |                          ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0368]: binary assignment operation `*=` cannot be applied to type `Complex64`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_pauli_strings.rs:108:9
    |
108 |         result.phase *= other.phase;
    |         ------------^^^^^^^^^^^^^^^
    |         |
    |         cannot use `*=` on type `Complex64`
    |
note: an implementation of `MulAssign` might be missing for `Complex64`
   --> packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | ^^^^^^^^^^^^^^^^^^^^ must implement `MulAssign`
note: the trait `MulAssign` must be implemented
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/ops/arith.rs:880:1
    |
880 | pub trait MulAssign<Rhs = Self> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_pauli_strings.rs:120:75
    |
120 |         self.paulis.is_empty() && (self.phase - Complex64::new(1.0, 0.0)).norm() < 1e-10
    |                                                                           ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `conj` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_pauli_strings.rs:126:35
    |
126 |         result.phase = self.phase.conj();
    |                                   ^^^^ method not found in `Complex64`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `conj` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `conj`, perhaps you need to implement it:
            candidate #1: `num_complex::complex_float::ComplexFloat`

error[E0282]: type annotations needed for `std::option::Option<_>`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_pauli_strings.rs:164:13
    |
164 |         let mut current_pauli = None;
    |             ^^^^^^^^^^^^^^^^^
...
171 |                     let (phase, result_pauli) = current.multiply(&pauli.pauli_type);
    |                                                         -------- type must be known at this point
    |
help: consider giving `current_pauli` an explicit type, where the type for type parameter `T` is specified
    |
164 |         let mut current_pauli: std::option::Option<T> = None;
    |                              ++++++++++++++++++++++++

error[E0368]: binary assignment operation `*=` cannot be applied to type `Complex64`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_pauli_strings.rs:172:21
    |
172 |                     current_coefficient *= pauli.coefficient * phase;
    |                     -------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |                     |
    |                     cannot use `*=` on type `Complex64`
    |
note: an implementation of `MulAssign<_>` might be missing for `Complex64`
   --> packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | ^^^^^^^^^^^^^^^^^^^^ must implement `MulAssign<_>`
note: the trait `MulAssign` must be implemented
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/ops/arith.rs:880:1
    |
880 | pub trait MulAssign<Rhs = Self> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_pauli_strings.rs:178:73
    |
178 |                     if !pauli_type.is_identity() && current_coefficient.norm() > 1e-10 {
    |                                                                         ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_pauli_strings.rs:196:65
    |
196 |             if !pauli_type.is_identity() && current_coefficient.norm() > 1e-10 {
    |                                                                 ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_pauli_strings.rs:217:52
    |
217 |         if (self.phase - Complex64::new(1.0, 0.0)).norm() > 1e-10 {
    |                                                    ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0277]: `Complex64` doesn't implement `std::fmt::Display`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_pauli_strings.rs:218:49
    |
218 |             result.push_str(&format!("({:.3})", self.phase));
    |                                        -----    ^^^^^^^^^^ `Complex64` cannot be formatted with the default formatter
    |                                        |
    |                                        required by this formatting parameter
    |
    = help: the trait `std::fmt::Display` is not implemented for `Complex64`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_pauli_strings.rs:234:63
    |
234 |             if (pauli.coefficient - Complex64::new(1.0, 0.0)).norm() > 1e-10 {
    |                                                               ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0277]: `Complex64` doesn't implement `std::fmt::Display`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_pauli_strings.rs:235:57
    |
235 |                 result.push_str(&format!("({:.3}){}{}", pauli.coefficient, pauli_char, pauli.edge_id));
    |                                            -----        ^^^^^^^^^^^^^^^^^ `Complex64` cannot be formatted with the default formatter
    |                                            |
    |                                            required by this formatting parameter
    |
    = help: the trait `std::fmt::Display` is not implemented for `Complex64`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no method named `apply_to_state` found for struct `topological_pauli_strings::PauliString` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_stabilizers.rs:113:27
    |
113 |         self.pauli_string.apply_to_state(state)
    |                           ^^^^^^^^^^^^^^ method not found in `topological_pauli_strings::PauliString`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_pauli_strings.rs:12:1
    |
12  | pub struct PauliString {
    | ---------------------- method `apply_to_state` not found for this struct

error[E0599]: no function or associated item named `generate_surface_code_stabilizers` found for struct `StabilizerGroup` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_stabilizers.rs:144:23
    |
35  | pub struct StabilizerGroup {
    | -------------------------- function or associated item `generate_surface_code_stabilizers` not found for this struct
...
144 |                 Self::generate_surface_code_stabilizers(lattice)
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function or associated item not found in `StabilizerGroup`
    |
note: if you're trying to build a new `StabilizerGroup` consider using one of the following associated functions:
      StabilizerGroup::new
      StabilizerGroup::generate_for_lattice
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_stabilizers.rs:129:5
    |
129 |       pub fn new(code_type: TopologicalCodeType) -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
138 | /     pub fn generate_for_lattice(
139 | |         code_type: TopologicalCodeType,
140 | |         lattice: &TopologicalLattice,
141 | |     ) -> CognitiveResult<Self> {
    | |______________________________^

error[E0599]: no function or associated item named `generate_color_code_stabilizers` found for struct `StabilizerGroup` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_stabilizers.rs:147:23
    |
35  | pub struct StabilizerGroup {
    | -------------------------- function or associated item `generate_color_code_stabilizers` not found for this struct
...
147 |                 Self::generate_color_code_stabilizers(lattice)
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function or associated item not found in `StabilizerGroup`
    |
note: if you're trying to build a new `StabilizerGroup` consider using one of the following associated functions:
      StabilizerGroup::new
      StabilizerGroup::generate_for_lattice
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_stabilizers.rs:129:5
    |
129 |       pub fn new(code_type: TopologicalCodeType) -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
138 | /     pub fn generate_for_lattice(
139 | |         code_type: TopologicalCodeType,
140 | |         lattice: &TopologicalLattice,
141 | |     ) -> CognitiveResult<Self> {
    | |______________________________^

error[E0599]: no function or associated item named `generate_hyperbolic_stabilizers` found for struct `StabilizerGroup` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_stabilizers.rs:150:23
    |
35  | pub struct StabilizerGroup {
    | -------------------------- function or associated item `generate_hyperbolic_stabilizers` not found for this struct
...
150 |                 Self::generate_hyperbolic_stabilizers(lattice)
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function or associated item not found in `StabilizerGroup`
    |
note: if you're trying to build a new `StabilizerGroup` consider using one of the following associated functions:
      StabilizerGroup::new
      StabilizerGroup::generate_for_lattice
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_stabilizers.rs:129:5
    |
129 |       pub fn new(code_type: TopologicalCodeType) -> Self {
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
138 | /     pub fn generate_for_lattice(
139 | |         code_type: TopologicalCodeType,
140 | |         lattice: &TopologicalLattice,
141 | |     ) -> CognitiveResult<Self> {
    | |______________________________^

error[E0599]: no function or associated item named `generate` found for struct `topological_lattice_types::TopologicalLattice` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/mod.rs:153:43
    |
153 |         let lattice = TopologicalLattice::generate(code_type, dimensions, boundary)?;
    |                                           ^^^^^^^^ function or associated item not found in `topological_lattice_types::TopologicalLattice`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/error_correction/topological_lattice_types.rs:11:1
    |
11  | pub struct TopologicalLattice {
    | ----------------------------- function or associated item `generate` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `generate`, perhaps you need to implement one of them:
            candidate #1: `BlockRngCore`
            candidate #2: `GenericSequence`
            candidate #3: `Invalidator`
            candidate #4: `itertools::intersperse::IntersperseElement`
            candidate #5: `itertools::intersperse::IntersperseElement`
            candidate #6: `itertools::intersperse::IntersperseElement`
            candidate #7: `rand_core::block::BlockRngCore`
            candidate #8: `rstar::point::Point`

error[E0560]: struct `SurfaceCode` has no field named `code_type`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/mod.rs:169:13
    |
169 |             code_type,
    |             ^^^^^^^^^ `SurfaceCode` does not have this field
    |
    = note: available fields are: `distance`, `qubit_layout`, `x_stabilizers`, `z_stabilizers`, `error_threshold`

error[E0560]: struct `SurfaceCode` has no field named `lattice`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/mod.rs:170:13
    |
170 |             lattice,
    |             ^^^^^^^ `SurfaceCode` does not have this field
    |
    = note: available fields are: `distance`, `qubit_layout`, `x_stabilizers`, `z_stabilizers`, `error_threshold`

error[E0560]: struct `SurfaceCode` has no field named `stabilizers`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/mod.rs:171:13
    |
171 |             stabilizers,
    |             ^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
171 |             x_stabilizers,
    |             ++

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/mod.rs:172:13
    |
172 |             logical_operators,
    |             ^^^^^^^^^^^^^^^^^ expected `LogicalOperators`, found `LogicalOperatorSet`

error[E0560]: struct `SurfaceCode` has no field named `parameters`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/mod.rs:173:13
    |
173 |             parameters,
    |             ^^^^^^^^^^ `SurfaceCode` does not have this field
    |
    = note: available fields are: `distance`, `qubit_layout`, `x_stabilizers`, `z_stabilizers`, `error_threshold`

error[E0599]: no method named `all_operators` found for struct `LogicalOperators` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/mod.rs:182:42
    |
182 |         for op in self.logical_operators.all_operators() {
    |                                          ^^^^^^^^^^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/error_correction/surface_code/logical_operations.rs:172:1
    |
172 | pub struct LogicalOperators {
    | --------------------------- method `all_operators` not found for this struct
    |
help: there is a method `get_all_operators` with a similar name
    |
182 |         for op in self.logical_operators.get_all_operators() {
    |                                          ++++

error[E0609]: no field `lattice` on type `&SurfaceCode`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/mod.rs:194:14
    |
194 |         self.lattice.edges.iter()
    |              ^^^^^^^ unknown field
    |
    = note: available fields are: `distance`, `qubit_layout`, `x_stabilizers`, `z_stabilizers`, `logical_operators`, `error_threshold`

error[E0609]: no field `num_logical_qubits` on type `LogicalOperators`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/mod.rs:201:32
    |
201 |         self.logical_operators.num_logical_qubits
    |                                ^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `logical_x`, `logical_z`, `logical_qubit_count`, `metrics`

error[E0609]: no field `stabilizers` on type `&SurfaceCode`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/mod.rs:206:14
    |
206 |         self.stabilizers.calculate_syndrome(error_pattern)
    |              ^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
206 |         self.x_stabilizers.calculate_syndrome(error_pattern)
    |              ++

error[E0609]: no field `lattice` on type `&SurfaceCode`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/mod.rs:212:14
    |
212 |         self.lattice.validate()?;
    |              ^^^^^^^ unknown field
    |
    = note: available fields are: `distance`, `qubit_layout`, `x_stabilizers`, `z_stabilizers`, `logical_operators`, `error_threshold`

error[E0609]: no field `stabilizers` on type `&SurfaceCode`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/mod.rs:215:14
    |
215 |         self.stabilizers.validate_commutation()?;
    |              ^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
215 |         self.x_stabilizers.validate_commutation()?;
    |              ++

error[E0277]: `?` couldn't convert the error to `std::string::String`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/mod.rs:218:42
    |
218 |         self.logical_operators.validate()?;
    |                                ----------^ the trait `std::convert::From<quantum::types::CognitiveError>` is not implemented for `std::string::String`
    |                                |
    |                                this can't be annotated with `?` because it has type `Result<_, quantum::types::CognitiveError>`
    |
note: `quantum::types::CognitiveError` needs to implement `Into<std::string::String>`
   --> packages/sweetmcp-memory/src/cognitive/quantum/types.rs:11:1
    |
11  | pub enum CognitiveError {
    | ^^^^^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              `std::string::String` implements `std::convert::From<&mut str>`
              `std::string::String` implements `std::convert::From<&std::string::String>`
              `std::string::String` implements `std::convert::From<&str>`
              `std::string::String` implements `std::convert::From<&tendril::tendril::Tendril<tendril::fmt::UTF8, A>>`
              `std::string::String` implements `std::convert::From<Box<str>>`
              `std::string::String` implements `std::convert::From<Cow<'_, str>>`
              `std::string::String` implements `std::convert::From<ammonia::Document>`
              `std::string::String` implements `std::convert::From<async_graphql::types::id::ID>`
            and 18 others

error[E0609]: no field `code_type` on type `&SurfaceCode`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/mod.rs:226:29
    |
226 |             code_type: self.code_type,
    |                             ^^^^^^^^^ unknown field
    |
    = note: available fields are: `distance`, `qubit_layout`, `x_stabilizers`, `z_stabilizers`, `logical_operators`, `error_threshold`

error[E0609]: no field `lattice` on type `&SurfaceCode`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/mod.rs:227:33
    |
227 |             lattice_stats: self.lattice.statistics(),
    |                                 ^^^^^^^ unknown field
    |
    = note: available fields are: `distance`, `qubit_layout`, `x_stabilizers`, `z_stabilizers`, `logical_operators`, `error_threshold`

error[E0609]: no field `stabilizers` on type `&SurfaceCode`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/mod.rs:228:36
    |
228 |             stabilizer_stats: self.stabilizers.statistics(),
    |                                    ^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
228 |             stabilizer_stats: self.x_stabilizers.statistics(),
    |                                    ++

error[E0599]: no method named `statistics` found for struct `LogicalOperators` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/mod.rs:229:60
    |
229 |             logical_operator_stats: self.logical_operators.statistics(),
    |                                                            ^^^^^^^^^^ method not found in `LogicalOperators`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/error_correction/surface_code/logical_operations.rs:172:1
    |
172 | pub struct LogicalOperators {
    | --------------------------- method `statistics` not found for this struct

error[E0609]: no field `parameters` on type `&SurfaceCode`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/mod.rs:233:35
    |
233 |             error_threshold: self.parameters.error_threshold,
    |                                   ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `distance`, `qubit_layout`, `x_stabilizers`, `z_stabilizers`, `logical_operators`, `error_threshold`

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/mod.rs:254:42
    |
254 |         let base_code = TopologicalCode::new(
    |                                          ^^^ multiple `new` found
    |
note: candidate #1 is defined in an impl for the type `SurfaceCode`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/surface_code/mod.rs:57:5
    |
57  |     pub fn new(distance: usize, boundary_type: BoundaryType) -> CognitiveResult<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `SurfaceCode`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/mod.rs:148:5
    |
148 | /     pub fn new(
149 | |         code_type: TopologicalCodeType,
150 | |         dimensions: (usize, usize),
151 | |         boundary: BoundaryConditions,
152 | |     ) -> CognitiveResult<Self> {
    | |______________________________^

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/mod.rs:279:42
    |
279 |         let base_code = TopologicalCode::new(
    |                                          ^^^ multiple `new` found
    |
note: candidate #1 is defined in an impl for the type `SurfaceCode`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/surface_code/mod.rs:57:5
    |
57  |     pub fn new(distance: usize, boundary_type: BoundaryType) -> CognitiveResult<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `SurfaceCode`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/mod.rs:148:5
    |
148 | /     pub fn new(
149 | |         code_type: TopologicalCodeType,
150 | |         dimensions: (usize, usize),
151 | |         boundary: BoundaryConditions,
152 | |     ) -> CognitiveResult<Self> {
    | |______________________________^

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/mod.rs:305:15
    |
305 |         Self::new(
    |               ^^^ multiple `new` found
    |
note: candidate #1 is defined in an impl for the type `SurfaceCode`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/surface_code/mod.rs:57:5
    |
57  |     pub fn new(distance: usize, boundary_type: BoundaryType) -> CognitiveResult<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `SurfaceCode`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/mod.rs:148:5
    |
148 | /     pub fn new(
149 | |         code_type: TopologicalCodeType,
150 | |         dimensions: (usize, usize),
151 | |         boundary: BoundaryConditions,
152 | |     ) -> CognitiveResult<Self> {
    | |______________________________^

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/mod.rs:314:15
    |
314 |         Self::new(
    |               ^^^ multiple `new` found
    |
note: candidate #1 is defined in an impl for the type `SurfaceCode`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/surface_code/mod.rs:57:5
    |
57  |     pub fn new(distance: usize, boundary_type: BoundaryType) -> CognitiveResult<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `SurfaceCode`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/mod.rs:148:5
    |
148 | /     pub fn new(
149 | |         code_type: TopologicalCodeType,
150 | |         dimensions: (usize, usize),
151 | |         boundary: BoundaryConditions,
152 | |     ) -> CognitiveResult<Self> {
    | |______________________________^

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/mod.rs:323:15
    |
323 |         Self::new(
    |               ^^^ multiple `new` found
    |
note: candidate #1 is defined in an impl for the type `SurfaceCode`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/surface_code/mod.rs:57:5
    |
57  |     pub fn new(distance: usize, boundary_type: BoundaryType) -> CognitiveResult<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `SurfaceCode`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/mod.rs:148:5
    |
148 | /     pub fn new(
149 | |         code_type: TopologicalCodeType,
150 | |         dimensions: (usize, usize),
151 | |         boundary: BoundaryConditions,
152 | |     ) -> CognitiveResult<Self> {
    | |______________________________^

error[E0277]: the trait bound `std::time::Instant: Serialize` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/quantum/metrics.rs:69:24
     |
69   | #[derive(Debug, Clone, Serialize)]
     |                        ^^^^^^^^^ the trait `Serialize` is not implemented for `std::time::Instant`
70   | pub struct RoutingMetric {
71   |     pub timestamp: Instant,
     |     ---------------------- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1107 others
note: required by a bound in `llm::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `std::time::Instant: Serialize` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/quantum/metrics.rs:79:24
     |
79   | #[derive(Debug, Clone, Serialize)]
     |                        ^^^^^^^^^ the trait `Serialize` is not implemented for `std::time::Instant`
80   | pub struct FidelityMetric {
81   |     pub timestamp: Instant,
     |     ---------------------- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1107 others
note: required by a bound in `llm::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `std::time::Instant: Serialize` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/quantum/metrics.rs:88:24
     |
88   | #[derive(Debug, Clone, Serialize)]
     |                        ^^^^^^^^^ the trait `Serialize` is not implemented for `std::time::Instant`
89   | pub struct ResourceMetric {
90   |     pub timestamp: Instant,
     |     ---------------------- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1107 others
note: required by a bound in `llm::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0034]: multiple applicable items in scope
  --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/training.rs:41:33
   |
41 |                 let loss = self.evaluate(val_data);
   |                                 ^^^^^^^^ multiple `evaluate` found
   |
note: candidate #1 is defined in an impl for the type `MLDecoder`
  --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/inference.rs:33:5
   |
33 |     pub fn evaluate(&self, test_data: &[(Vec<bool>, Vec<bool>)]) -> ModelMetrics {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `MLDecoder`
  --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/training.rs:77:5
   |
77 |     pub fn evaluate(&self, test_data: &[(Vec<bool>, Vec<bool>)]) -> f64 {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/inference.rs:134:38
    |
134 |         let mut quantum_state = self.initialize_quantum_state(syndrome);
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^ multiple `initialize_quantum_state` found
    |
note: candidate #1 is defined in an impl for the type `MLDecoder`
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/core.rs:137:5
    |
137 |     pub fn initialize_quantum_state(&self, syndrome: &[bool]) -> Vec<f64> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `MLDecoder`
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/quantum_ops.rs:11:5
    |
11  |     pub(super) fn initialize_quantum_state(&self, syndrome: &[bool]) -> Vec<f64> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/inference.rs:138:34
    |
138 |             quantum_state = self.apply_quantum_layer(quantum_state, layer, qubit_count);
    |                                  ^^^^^^^^^^^^^^^^^^^ multiple `apply_quantum_layer` found
    |
note: candidate #1 is defined in an impl for the type `MLDecoder`
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/core.rs:168:5
    |
168 | /     pub fn apply_quantum_layer(
169 | |         &self,
170 | |         mut state: Vec<f64>,
171 | |         layer: &QuantumLayer,
172 | |         qubit_count: usize,
173 | |     ) -> Vec<f64> {
    | |_________________^
note: candidate #2 is defined in an impl for the type `MLDecoder`
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/quantum_ops.rs:31:5
    |
31  | /     pub(super) fn apply_quantum_layer(
32  | |         &self,
33  | |         mut quantum_state: Vec<f64>,
34  | |         layer: &QuantumLayer,
35  | |         qubit_count: usize,
36  | |     ) -> Vec<f64> {
    | |_________________^

error[E0689]: can't call method `clamp` on ambiguous numeric type `{float}`
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/inference.rs:154:45
    |
154 |             probabilities[qubit] = prob_one.clamp(0.0, 1.0);
    |                                             ^^^^^
    |
help: you must specify a type for this binding, like `f32`
    |
145 |             let mut prob_one: f32 = 0.0;
    |                             +++++

error[E0624]: associated function `calculate_parameter_count` is private
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/inference.rs:284:45
    |
284 |                 let expected_params = Self::calculate_parameter_count(&self.model_type);
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^ private associated function
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/core.rs:112:5
    |
112 |     fn calculate_parameter_count(model_type: &MLModelType) -> usize {
    |     --------------------------------------------------------------- private associated function defined here

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/inference.rs:382:31
    |
382 |         let mut layer = Self::new(qubit_count);
    |                               ^^^ multiple `new` found
    |
note: candidate #1 is defined in an impl for the type `QuantumLayer`
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/core.rs:423:5
    |
423 |     pub fn new(qubit_count: usize) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `QuantumLayer`
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/inference.rs:367:5
    |
367 |     pub fn new(qubit_count: usize) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/decoding.rs:37:38
    |
37  |         let mut quantum_state = self.initialize_quantum_state(syndrome);
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^ multiple `initialize_quantum_state` found
    |
note: candidate #1 is defined in an impl for the type `MLDecoder`
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/core.rs:137:5
    |
137 |     pub fn initialize_quantum_state(&self, syndrome: &[bool]) -> Vec<f64> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `MLDecoder`
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/quantum_ops.rs:11:5
    |
11  |     pub(super) fn initialize_quantum_state(&self, syndrome: &[bool]) -> Vec<f64> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/decoding.rs:41:34
    |
41  |             quantum_state = self.apply_quantum_layer(quantum_state, layer, qubit_count);
    |                                  ^^^^^^^^^^^^^^^^^^^ multiple `apply_quantum_layer` found
    |
note: candidate #1 is defined in an impl for the type `MLDecoder`
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/core.rs:168:5
    |
168 | /     pub fn apply_quantum_layer(
169 | |         &self,
170 | |         mut state: Vec<f64>,
171 | |         layer: &QuantumLayer,
172 | |         qubit_count: usize,
173 | |     ) -> Vec<f64> {
    | |_________________^
note: candidate #2 is defined in an impl for the type `MLDecoder`
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/quantum_ops.rs:31:5
    |
31  | /     pub(super) fn apply_quantum_layer(
32  | |         &self,
33  | |         mut quantum_state: Vec<f64>,
34  | |         layer: &QuantumLayer,
35  | |         qubit_count: usize,
36  | |     ) -> Vec<f64> {
    | |_________________^

error[E0026]: variant `OptimizationBackend::RMSprop` does not have a field named `decay_rate`
  --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/optimizers.rs:22:59
   |
22 |             OptimizationBackend::RMSprop { learning_rate, decay_rate } => {
   |                                                           ^^^^^^^^^^
   |                                                           |
   |                                                           variant `OptimizationBackend::RMSprop` does not have this field
   |                                                           help: `OptimizationBackend::RMSprop` has a field named `decay`

error[E0027]: pattern does not mention field `decay`
  --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/optimizers.rs:22:13
   |
22 |             OptimizationBackend::RMSprop { learning_rate, decay_rate } => {
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing field `decay`
   |
help: include the missing field in the pattern
   |
22 |             OptimizationBackend::RMSprop { learning_rate, decay_rate, decay } => {
   |                                                                     +++++++
help: if you don't care about this missing field, you can explicitly ignore it
   |
22 |             OptimizationBackend::RMSprop { learning_rate, decay_rate, decay: _ } => {
   |                                                                     ++++++++++
help: or always ignore missing fields here
   |
22 |             OptimizationBackend::RMSprop { learning_rate, decay_rate, .. } => {
   |                                                                     ++++

error[E0609]: no field `gradient_method` on type `InferenceEngine`
  --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/gradients.rs:17:38
   |
17 |         match &self.inference_engine.gradient_method {
   |                                      ^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `optimization_backend`, `gradient_computation`, `hardware_acceleration`

error[E0599]: no variant or associated item named `Backpropagation` found for enum `GradientMethod` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/gradients.rs:18:29
   |
18 |             GradientMethod::Backpropagation => {
   |                             ^^^^^^^^^^^^^^^ variant or associated item not found in `GradientMethod`
   |
  ::: packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/core.rs:82:1
   |
82 | pub enum GradientMethod {
   | ----------------------- variant or associated item `Backpropagation` not found for this enum
   |
help: there is a variant with a similar name
   |
18 -             GradientMethod::Backpropagation => {
18 +             GradientMethod::BackPropagation => {
   |

error[E0614]: type `f64` cannot be dereferenced
  --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/gradients.rs:25:76
   |
25 |                 self.compute_finite_difference_gradients(syndrome, target, *epsilon)
   |                                                                            ^^^^^^^^ can't be dereferenced

error[E0609]: no field `gates` on type `&QuantumLayer`
  --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/quantum_ops.rs:38:28
   |
38 |         for gate in &layer.gates {
   |                            ^^^^^ unknown field
   |
   = note: available fields are: `qubit_count`, `parameterized_gates`, `entangling_structure`

error[E0223]: ambiguous associated type
  --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/quantum_ops.rs:53:13
   |
53 |             ParameterizedGate::RX { qubit, angle } => {
   |             ^^^^^^^^^^^^^^^^^^^^^
   |
help: if there were a trait named `Example` with associated type `RX` implemented for `ParameterizedGate`, you could use the fully-qualified path
   |
53 -             ParameterizedGate::RX { qubit, angle } => {
53 +             <ParameterizedGate as Example>::RX { qubit, angle } => {
   |

error[E0223]: ambiguous associated type
  --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/quantum_ops.rs:56:13
   |
56 |             ParameterizedGate::RY { qubit, angle } => {
   |             ^^^^^^^^^^^^^^^^^^^^^
   |
help: if there were a trait named `Example` with associated type `RY` implemented for `ParameterizedGate`, you could use the fully-qualified path
   |
56 -             ParameterizedGate::RY { qubit, angle } => {
56 +             <ParameterizedGate as Example>::RY { qubit, angle } => {
   |

error[E0223]: ambiguous associated type
  --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/quantum_ops.rs:59:13
   |
59 |             ParameterizedGate::RZ { qubit, angle } => {
   |             ^^^^^^^^^^^^^^^^^^^^^
   |
help: if there were a trait named `Example` with associated type `RZ` implemented for `ParameterizedGate`, you could use the fully-qualified path
   |
59 -             ParameterizedGate::RZ { qubit, angle } => {
59 +             <ParameterizedGate as Example>::RZ { qubit, angle } => {
   |

error[E0223]: ambiguous associated type
  --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/quantum_ops.rs:62:13
   |
62 |             ParameterizedGate::CNOT { control, target } => {
   |             ^^^^^^^^^^^^^^^^^^^^^^^
   |
help: if there were a trait named `Example` with associated type `CNOT` implemented for `ParameterizedGate`, you could use the fully-qualified path
   |
62 -             ParameterizedGate::CNOT { control, target } => {
62 +             <ParameterizedGate as Example>::CNOT { control, target } => {
   |

error[E0223]: ambiguous associated type
  --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/quantum_ops.rs:65:13
   |
65 |             ParameterizedGate::CRX { control, target, angle } => {
   |             ^^^^^^^^^^^^^^^^^^^^^^
   |
help: if there were a trait named `Example` with associated type `CRX` implemented for `ParameterizedGate`, you could use the fully-qualified path
   |
65 -             ParameterizedGate::CRX { control, target, angle } => {
65 +             <ParameterizedGate as Example>::CRX { control, target, angle } => {
   |

error[E0223]: ambiguous associated type
  --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/quantum_ops.rs:68:13
   |
68 |             ParameterizedGate::CRY { control, target, angle } => {
   |             ^^^^^^^^^^^^^^^^^^^^^^
   |
help: if there were a trait named `Example` with associated type `CRY` implemented for `ParameterizedGate`, you could use the fully-qualified path
   |
68 -             ParameterizedGate::CRY { control, target, angle } => {
68 +             <ParameterizedGate as Example>::CRY { control, target, angle } => {
   |

error[E0223]: ambiguous associated type
  --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/quantum_ops.rs:71:13
   |
71 |             ParameterizedGate::CRZ { control, target, angle } => {
   |             ^^^^^^^^^^^^^^^^^^^^^^
   |
help: if there were a trait named `Example` with associated type `CRZ` implemented for `ParameterizedGate`, you could use the fully-qualified path
   |
71 -             ParameterizedGate::CRZ { control, target, angle } => {
71 +             <ParameterizedGate as Example>::CRZ { control, target, angle } => {
   |

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/quantum/router.rs:450:46
    |
450 |             Some(QuantumErrorCorrection::new(config.decoherence_threshold))
    |                  --------------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `ErrorCorrectionConfig`, found `f64`
    |                  |
    |                  arguments to this function are incorrect
    |
note: associated function defined here
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/quantum_error_correction.rs:25:12
    |
25  |     pub fn new(config: ErrorCorrectionConfig) -> Self {
    |            ^^^ -----------------------------

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/adaptive.rs:142:40
    |
142 |         let amplitude_norm = amplitude.norm().clamp(0.01, 1.0);
    |                                        ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/adaptive.rs:154:56
    |
154 |         let avg_reward_magnitude = node.quantum_reward.norm() / node.visits as f64;
    |                                                        ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `fastrand`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/adaptive.rs:431:27
    |
431 |         let noise_phase = fastrand::f64() * 2.0 * std::f64::consts::PI;
    |                           ^^^^^^^^ use of unresolved module or unlinked crate `fastrand`
    |
    = help: if you wanted to use a crate named `fastrand`, use `cargo add fastrand` to add it to your `Cargo.toml`

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/metrics.rs:187:37
    |
187 |             self.reward_distributed.norm() / self.nodes_updated as f64
    |                                     ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/metrics.rs:310:43
    |
310 |             .map(|r| r.reward_distributed.norm())
    |                                           ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/engine.rs:356:54
    |
356 |         let reward_score = result.reward_distributed.norm().min(10.0) / 10.0; // Normalize to 0-1
    |                                                      ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/engine.rs:380:75
    |
380 |             metrics.total_reward_distributed += result.reward_distributed.norm();
    |                                                                           ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0277]: `QuantumBackpropagationEngine` doesn't implement `std::fmt::Debug`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/mod.rs:40:5
   |
37 | #[derive(Debug)]
   |          ----- in this derive macro expansion
...
40 |     pub engine: QuantumBackpropagationEngine,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::fmt::Debug` is not implemented for `QuantumBackpropagationEngine`
   |
   = note: add `#[derive(Debug)]` to `QuantumBackpropagationEngine` or manually `impl std::fmt::Debug for QuantumBackpropagationEngine`

error[E0599]: no function or associated item named `get` found for struct `SystemAnalyzer` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/config/system.rs:30:21
   |
30 |     SystemAnalyzer::get().estimate_memory_usage(config)
   |                     ^^^ function or associated item not found in `SystemAnalyzer`
...
49 | pub struct SystemAnalyzer {
   | ------------------------- function or associated item `get` not found for this struct
   |
note: if you're trying to build a new `SystemAnalyzer`, consider using `SystemAnalyzer::new` which returns `SystemAnalyzer`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/config/system.rs:57:5
   |
57 |     pub fn new() -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^
   = help: items from traits can only be used if the trait is implemented and in scope
   = note: the following traits define an item `get`, perhaps you need to implement one of them:
           candidate #1: `Atomic`
           candidate #2: `BKeys`
           candidate #3: `MatrixIndex`
           candidate #4: `SliceIndex`
           candidate #5: `icu_properties::names::PropertyEnumToValueNameLookup`
           candidate #6: `icu_provider::baked::DataStore`
           candidate #7: `itertools::Itertools`
           candidate #8: `kvs::api::Transaction`
           candidate #9: `ndarray::IndexLonger`
           candidate #10: `ndarray::impl_views::indexing::IndexLonger`
           candidate #11: `object_store::ObjectStore`
           candidate #12: `rustls::server::server_conn::StoresServerSessions`
           candidate #13: `string_cache::static_sets::StaticAtomSet`
           candidate #14: `tracing_log::log::kv::Source`

error[E0599]: no function or associated item named `get` found for struct `SystemAnalyzer` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/config/system.rs:35:21
   |
35 |     SystemAnalyzer::get().is_compatible(config)
   |                     ^^^ function or associated item not found in `SystemAnalyzer`
...
49 | pub struct SystemAnalyzer {
   | ------------------------- function or associated item `get` not found for this struct
   |
note: if you're trying to build a new `SystemAnalyzer`, consider using `SystemAnalyzer::new` which returns `SystemAnalyzer`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/config/system.rs:57:5
   |
57 |     pub fn new() -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^
   = help: items from traits can only be used if the trait is implemented and in scope
   = note: the following traits define an item `get`, perhaps you need to implement one of them:
           candidate #1: `Atomic`
           candidate #2: `BKeys`
           candidate #3: `MatrixIndex`
           candidate #4: `SliceIndex`
           candidate #5: `icu_properties::names::PropertyEnumToValueNameLookup`
           candidate #6: `icu_provider::baked::DataStore`
           candidate #7: `itertools::Itertools`
           candidate #8: `kvs::api::Transaction`
           candidate #9: `ndarray::IndexLonger`
           candidate #10: `ndarray::impl_views::indexing::IndexLonger`
           candidate #11: `object_store::ObjectStore`
           candidate #12: `rustls::server::server_conn::StoresServerSessions`
           candidate #13: `string_cache::static_sets::StaticAtomSet`
           candidate #14: `tracing_log::log::kv::Source`

error[E0599]: no function or associated item named `get` found for struct `SystemAnalyzer` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/config/system.rs:40:21
   |
40 |     SystemAnalyzer::get().recommended_config()
   |                     ^^^ function or associated item not found in `SystemAnalyzer`
...
49 | pub struct SystemAnalyzer {
   | ------------------------- function or associated item `get` not found for this struct
   |
note: if you're trying to build a new `SystemAnalyzer`, consider using `SystemAnalyzer::new` which returns `SystemAnalyzer`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/config/system.rs:57:5
   |
57 |     pub fn new() -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^
   = help: items from traits can only be used if the trait is implemented and in scope
   = note: the following traits define an item `get`, perhaps you need to implement one of them:
           candidate #1: `Atomic`
           candidate #2: `BKeys`
           candidate #3: `MatrixIndex`
           candidate #4: `SliceIndex`
           candidate #5: `icu_properties::names::PropertyEnumToValueNameLookup`
           candidate #6: `icu_provider::baked::DataStore`
           candidate #7: `itertools::Itertools`
           candidate #8: `kvs::api::Transaction`
           candidate #9: `ndarray::IndexLonger`
           candidate #10: `ndarray::impl_views::indexing::IndexLonger`
           candidate #11: `object_store::ObjectStore`
           candidate #12: `rustls::server::server_conn::StoresServerSessions`
           candidate #13: `string_cache::static_sets::StaticAtomSet`
           candidate #14: `tracing_log::log::kv::Source`

error[E0599]: no function or associated item named `get` found for struct `SystemAnalyzer` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/config/system.rs:45:21
   |
45 |     SystemAnalyzer::get().system_optimized_config()
   |                     ^^^ function or associated item not found in `SystemAnalyzer`
...
49 | pub struct SystemAnalyzer {
   | ------------------------- function or associated item `get` not found for this struct
   |
note: if you're trying to build a new `SystemAnalyzer`, consider using `SystemAnalyzer::new` which returns `SystemAnalyzer`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/config/system.rs:57:5
   |
57 |     pub fn new() -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^
   = help: items from traits can only be used if the trait is implemented and in scope
   = note: the following traits define an item `get`, perhaps you need to implement one of them:
           candidate #1: `Atomic`
           candidate #2: `BKeys`
           candidate #3: `MatrixIndex`
           candidate #4: `SliceIndex`
           candidate #5: `icu_properties::names::PropertyEnumToValueNameLookup`
           candidate #6: `icu_provider::baked::DataStore`
           candidate #7: `itertools::Itertools`
           candidate #8: `kvs::api::Transaction`
           candidate #9: `ndarray::IndexLonger`
           candidate #10: `ndarray::impl_views::indexing::IndexLonger`
           candidate #11: `object_store::ObjectStore`
           candidate #12: `rustls::server::server_conn::StoresServerSessions`
           candidate #13: `string_cache::static_sets::StaticAtomSet`
           candidate #14: `tracing_log::log::kv::Source`

error[E0063]: missing fields `batch_size`, `debug_mode`, `max_entanglements_per_node` and 1 other field in initializer of `quantum_mcts::config::core::QuantumMCTSConfig`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/config/builder.rs:55:38
   |
55 |             ConfigPreset::Minimal => QuantumMCTSConfig {
   |                                      ^^^^^^^^^^^^^^^^^ missing `batch_size`, `debug_mode`, `max_entanglements_per_node` and 1 other field

error[E0599]: no method named `load_from_environment` found for struct `EnvironmentLoader` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/config/mod.rs:55:56
   |
55 |         if let Ok(env_config) = coordinator.env_loader.load_from_environment() {
   |                                                        ^^^^^^^^^^^^^^^^^^^^^ method not found in `EnvironmentLoader`
   |
  ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/config/environment.rs:27:1
   |
27 | pub struct EnvironmentLoader {
   | ---------------------------- method `load_from_environment` not found for this struct

error[E0599]: no method named `parallelism` found for mutable reference `&mut QuantumMCTSConfigBuilder` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/config/mod.rs:175:22
    |
173 |                   FluentConfigBuilder::preset(ConfigPreset::Performance)
    |                   ------------------------------------------------------
    |                   |
    |  _________________method `parallelism` is available on `FluentConfigBuilder`
    | |
174 | |                     .performance().speed()
175 | |                     .parallelism().conservative()
    | |                     -^^^^^^^^^^^ method not found in `&mut QuantumMCTSConfigBuilder`
    | |_____________________|
    |

error[E0599]: no method named `parallelism` found for mutable reference `&mut QuantumMCTSConfigBuilder` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/config/mod.rs:181:22
    |
179 |                   FluentConfigBuilder::preset(ConfigPreset::Accuracy)
    |                   ---------------------------------------------------
    |                   |
    |  _________________method `parallelism` is available on `FluentConfigBuilder`
    | |
180 | |                     .accuracy().maximum()
181 | |                     .parallelism().aggressive()
    | |                     -^^^^^^^^^^^ method not found in `&mut QuantumMCTSConfigBuilder`
    | |_____________________|
    |

error[E0599]: no method named `parallelism` found for mutable reference `&mut QuantumMCTSConfigBuilder` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/config/mod.rs:187:22
    |
185 |                   FluentConfigBuilder::preset(ConfigPreset::Minimal)
    |                   --------------------------------------------------
    |                   |
    |  _________________method `parallelism` is available on `FluentConfigBuilder`
    | |
186 | |                     .performance().speed()
187 | |                     .parallelism().custom(1)
    | |                     -^^^^^^^^^^^ method not found in `&mut QuantumMCTSConfigBuilder`
    | |_____________________|
    |

error[E0599]: no method named `parallelism` found for mutable reference `&mut QuantumMCTSConfigBuilder` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/config/mod.rs:193:22
    |
191 |                   FluentConfigBuilder::preset(ConfigPreset::Accuracy)
    |                   ---------------------------------------------------
    |                   |
    |  _________________method `parallelism` is available on `FluentConfigBuilder`
    | |
192 | |                     .accuracy().maximum()
193 | |                     .parallelism().aggressive()
    | |                     -^^^^^^^^^^^ method not found in `&mut QuantumMCTSConfigBuilder`
    | |_____________________|
    |

error[E0599]: no method named `parallelism` found for mutable reference `&mut QuantumMCTSConfigBuilder` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/config/mod.rs:199:22
    |
197 |                   FluentConfigBuilder::preset(ConfigPreset::Default)
    |                   --------------------------------------------------
    |                   |
    |  _________________method `parallelism` is available on `FluentConfigBuilder`
    | |
198 | |                     .performance().balanced()
199 | |                     .parallelism().cpu_count()
    | |                     -^^^^^^^^^^^ method not found in `&mut QuantumMCTSConfigBuilder`
    | |_____________________|
    |

error[E0599]: no method named `parallelism` found for mutable reference `&mut QuantumMCTSConfigBuilder` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/config/mod.rs:205:22
    |
203 |                   FluentConfigBuilder::preset(ConfigPreset::Minimal)
    |                   --------------------------------------------------
    |                   |
    |  _________________method `parallelism` is available on `FluentConfigBuilder`
    | |
204 | |                     .performance().speed()
205 | |                     .parallelism().custom(1)
    | |                     -^^^^^^^^^^^ method not found in `&mut QuantumMCTSConfigBuilder`
    | |_____________________|
    |

error[E0599]: no method named `summary` found for reference `&quantum_mcts::entanglement::metrics::EntanglementMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_coordinator.rs:155:31
    |
155 |         self.engine.metrics().summary()
    |                               ^^^^^^^
    |
help: there is a method `status_summary` with a similar name
    |
155 |         self.engine.metrics().status_summary()
    |                                +++++++

error[E0599]: no method named `operations_attempted` found for reference `&quantum_mcts::entanglement::metrics::EntanglementMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_coordinator.rs:198:39
    |
198 |         let success_rate = if metrics.operations_attempted() > 0 {
    |                                       ^^^^^^^^^^^^^^^^^^^^ method not found in `&quantum_mcts::entanglement::metrics::EntanglementMetrics`

error[E0599]: no method named `operations_successful` found for reference `&quantum_mcts::entanglement::metrics::EntanglementMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_coordinator.rs:199:21
    |
199 |             metrics.operations_successful() as f64 / metrics.operations_attempted() as f64
    |                     ^^^^^^^^^^^^^^^^^^^^^ method not found in `&quantum_mcts::entanglement::metrics::EntanglementMetrics`

error[E0599]: no method named `operations_attempted` found for reference `&quantum_mcts::entanglement::metrics::EntanglementMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_coordinator.rs:199:62
    |
199 |             metrics.operations_successful() as f64 / metrics.operations_attempted() as f64
    |                                                              ^^^^^^^^^^^^^^^^^^^^ method not found in `&quantum_mcts::entanglement::metrics::EntanglementMetrics`

error[E0599]: no method named `average_operation_latency` found for reference `&quantum_mcts::entanglement::metrics::EntanglementMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_coordinator.rs:204:35
    |
204 |         let avg_latency = metrics.average_operation_latency();
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: there is a method `time_operation_async` with a similar name, but with different arguments
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/mod.rs:471:5
    |
471 | /     pub async fn time_operation_async<F, Fut, R>(&self, f: F) -> (R, Duration)
472 | |     where
473 | |         F: FnOnce() -> Fut,
474 | |         Fut: std::future::Future<Output = R>,
    | |_____________________________________________^

error[E0599]: no method named `entanglements_created` found for reference `&quantum_mcts::entanglement::metrics::EntanglementMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_coordinator.rs:246:21
    |
246 |             metrics.entanglements_created(),
    |                     ^^^^^^^^^^^^^^^^^^^^^ method not found in `&quantum_mcts::entanglement::metrics::EntanglementMetrics`

error[E0599]: no method named `operations_attempted` found for reference `&quantum_mcts::entanglement::metrics::EntanglementMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_coordinator.rs:247:21
    |
247 |             metrics.operations_attempted(),
    |                     ^^^^^^^^^^^^^^^^^^^^ method not found in `&quantum_mcts::entanglement::metrics::EntanglementMetrics`

error[E0599]: no method named `operations_attempted` found for reference `&quantum_mcts::entanglement::metrics::EntanglementMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_coordinator.rs:248:24
    |
248 |             if metrics.operations_attempted() > 0 {
    |                        ^^^^^^^^^^^^^^^^^^^^ method not found in `&quantum_mcts::entanglement::metrics::EntanglementMetrics`

error[E0599]: no method named `operations_successful` found for reference `&quantum_mcts::entanglement::metrics::EntanglementMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_coordinator.rs:249:26
    |
249 |                 (metrics.operations_successful() as f64 / metrics.operations_attempted() as f64) * 100.0
    |                          ^^^^^^^^^^^^^^^^^^^^^ method not found in `&quantum_mcts::entanglement::metrics::EntanglementMetrics`

error[E0599]: no method named `operations_attempted` found for reference `&quantum_mcts::entanglement::metrics::EntanglementMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_coordinator.rs:249:67
    |
249 |                 (metrics.operations_successful() as f64 / metrics.operations_attempted() as f64) * 100.0
    |                                                                   ^^^^^^^^^^^^^^^^^^^^ method not found in `&quantum_mcts::entanglement::metrics::EntanglementMetrics`

error[E0599]: no method named `average_operation_latency` found for reference `&quantum_mcts::entanglement::metrics::EntanglementMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_coordinator.rs:253:21
    |
253 |             metrics.average_operation_latency().as_secs_f64() * 1000.0,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: there is a method `time_operation_async` with a similar name, but with different arguments
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/mod.rs:471:5
    |
471 | /     pub async fn time_operation_async<F, Fut, R>(&self, f: F) -> (R, Duration)
472 | |     where
473 | |         F: FnOnce() -> Fut,
474 | |         Fut: std::future::Future<Output = R>,
    | |_____________________________________________^

error[E0599]: no method named `active_entanglements` found for reference `&quantum_mcts::entanglement::metrics::EntanglementMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_coordinator.rs:254:21
    |
254 |             metrics.active_entanglements()
    |                     ^^^^^^^^^^^^^^^^^^^^ method not found in `&quantum_mcts::entanglement::metrics::EntanglementMetrics`

error[E0599]: no method named `needs_maintenance` found for struct `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_coordinator.rs:269:62
    |
269 |         self.metrics_collector.needs_report() || self.engine.needs_maintenance()
    |                                                              ^^^^^^^^^^^^^^^^^ method not found in `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:23:1
    |
23  | pub struct QuantumEntanglementEngine {
    | ------------------------------------ method `needs_maintenance` not found for this struct

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_analysis.rs:105:23
    |
105 |         self.topology.has_good_connectivity() &&
    |                       ^^^^^^^^^^^^^^^^^^^^^ multiple `has_good_connectivity` found
    |
note: candidate #1 is defined in an impl for the type `network_topology::NetworkTopology`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:267:5
    |
267 |     pub fn has_good_connectivity(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `network_topology::NetworkTopology`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:39:5
    |
39  |     pub fn has_good_connectivity(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_analysis.rs:151:30
    |
151 |             if self.topology.has_good_connectivity() { "Good" } else { "Poor" },
    |                              ^^^^^^^^^^^^^^^^^^^^^ multiple `has_good_connectivity` found
    |
note: candidate #1 is defined in an impl for the type `network_topology::NetworkTopology`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:267:5
    |
267 |     pub fn has_good_connectivity(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `network_topology::NetworkTopology`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:39:5
    |
39  |     pub fn has_good_connectivity(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `average_path_length` found for struct `network_topology::NetworkTopology` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_analysis.rs:152:27
    |
152 |             self.topology.average_path_length(),
    |                           ^^^^^^^^^^^^^^^^^^^ method not found in `network_topology::NetworkTopology`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:19:1
    |
19  | pub struct NetworkTopology {
    | -------------------------- method `average_path_length` not found for this struct

error[E0599]: no method named `clustering_coefficient` found for struct `network_topology::NetworkTopology` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_analysis.rs:153:27
    |
153 |             self.topology.clustering_coefficient(),
    |                           ^^^^^^^^^^^^^^^^^^^^^^-- help: remove the arguments
    |                           |
    |                           field, not a method
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:19:1
    |
19  | pub struct NetworkTopology {
    | -------------------------- method `clustering_coefficient` not found for this struct

error[E0609]: no field `average_strength` on type `EntanglementQuality`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_analysis.rs:155:26
    |
155 |             self.quality.average_strength,
    |                          ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `strength_mean`, `strength_std`, `strength_min`, `strength_max`, `strong_count` ... and 4 others

error[E0609]: no field `strong_connections` on type `EntanglementQuality`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_analysis.rs:156:26
    |
156 |             self.quality.strong_connections,
    |                          ^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `strength_mean`, `strength_std`, `strength_min`, `strength_max`, `strong_count` ... and 4 others

error[E0609]: no field `weak_connections` on type `EntanglementQuality`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_analysis.rs:157:26
    |
157 |             self.quality.weak_connections,
    |                          ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `strength_mean`, `strength_std`, `strength_min`, `strength_max`, `strong_count` ... and 4 others

error[E0609]: no field `active_issues` on type `NetworkHealthReport`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_analysis.rs:160:32
    |
160 |             self.health_report.active_issues.len(),
    |                                ^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `topology`, `metrics_summary`, `health_score`, `issues`, `recommendations`, `timestamp`

error[E0599]: no method named `is_critical` found for reference `&&NetworkBottleneck` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_analysis.rs:162:50
    |
162 |             self.bottlenecks.iter().filter(|b| b.is_critical()).count(),
    |                                                  ^^^^^^^^^^^ method not found in `&&NetworkBottleneck`

error[E0599]: no method named `entanglements_created` found for struct `AggregatedMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_analysis.rs:163:34
    |
163 |             self.metrics_summary.entanglements_created(),
    |                                  ^^^^^^^^^^^^^^^^^^^^^ method not found in `AggregatedMetrics`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/types.rs:107:1
    |
107 | pub struct AggregatedMetrics {
    | ---------------------------- method `entanglements_created` not found for this struct

error[E0599]: no method named `operations_attempted` found for struct `AggregatedMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_analysis.rs:164:34
    |
164 |             self.metrics_summary.operations_attempted(),
    |                                  ^^^^^^^^^^^^^^^^^^^^ method not found in `AggregatedMetrics`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/types.rs:107:1
    |
107 | pub struct AggregatedMetrics {
    | ---------------------------- method `operations_attempted` not found for this struct

error[E0599]: no method named `operations_attempted` found for struct `AggregatedMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_analysis.rs:165:37
    |
165 |             if self.metrics_summary.operations_attempted() > 0 {
    |                                     ^^^^^^^^^^^^^^^^^^^^ method not found in `AggregatedMetrics`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/types.rs:107:1
    |
107 | pub struct AggregatedMetrics {
    | ---------------------------- method `operations_attempted` not found for this struct

error[E0599]: no method named `operations_successful` found for struct `AggregatedMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_analysis.rs:166:39
    |
166 |                 (self.metrics_summary.operations_successful() as f64 / 
    |                                       ^^^^^^^^^^^^^^^^^^^^^ method not found in `AggregatedMetrics`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/types.rs:107:1
    |
107 | pub struct AggregatedMetrics {
    | ---------------------------- method `operations_successful` not found for this struct

error[E0599]: no method named `operations_attempted` found for struct `AggregatedMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_analysis.rs:167:39
    |
167 |                  self.metrics_summary.operations_attempted() as f64) * 100.0
    |                                       ^^^^^^^^^^^^^^^^^^^^ method not found in `AggregatedMetrics`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/types.rs:107:1
    |
107 | pub struct AggregatedMetrics {
    | ---------------------------- method `operations_attempted` not found for this struct

error[E0599]: no method named `average_operation_latency` found for struct `AggregatedMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_analysis.rs:171:34
    |
171 |             self.metrics_summary.average_operation_latency().as_secs_f64() * 1000.0
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `AggregatedMetrics`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/types.rs:107:1
    |
107 | pub struct AggregatedMetrics {
    | ---------------------------- method `average_operation_latency` not found for this struct

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_analysis.rs:183:27
    |
183 |         if !self.topology.has_good_connectivity() {
    |                           ^^^^^^^^^^^^^^^^^^^^^ multiple `has_good_connectivity` found
    |
note: candidate #1 is defined in an impl for the type `network_topology::NetworkTopology`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:267:5
    |
267 |     pub fn has_good_connectivity(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `network_topology::NetworkTopology`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:39:5
    |
39  |     pub fn has_good_connectivity(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `is_critical` found for reference `&&NetworkBottleneck` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_analysis.rs:191:73
    |
191 |         let critical_bottlenecks = self.bottlenecks.iter().filter(|b| b.is_critical()).count();
    |                                                                         ^^^^^^^^^^^ method not found in `&&NetworkBottleneck`

error[E0599]: no method named `operations_attempted` found for struct `AggregatedMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_analysis.rs:200:52
    |
200 |         let success_rate = if self.metrics_summary.operations_attempted() > 0 {
    |                                                    ^^^^^^^^^^^^^^^^^^^^ method not found in `AggregatedMetrics`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/types.rs:107:1
    |
107 | pub struct AggregatedMetrics {
    | ---------------------------- method `operations_attempted` not found for this struct

error[E0599]: no method named `operations_successful` found for struct `AggregatedMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_analysis.rs:201:34
    |
201 |             self.metrics_summary.operations_successful() as f64 / 
    |                                  ^^^^^^^^^^^^^^^^^^^^^ method not found in `AggregatedMetrics`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/types.rs:107:1
    |
107 | pub struct AggregatedMetrics {
    | ---------------------------- method `operations_successful` not found for this struct

error[E0599]: no method named `operations_attempted` found for struct `AggregatedMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_analysis.rs:202:34
    |
202 |             self.metrics_summary.operations_attempted() as f64
    |                                  ^^^^^^^^^^^^^^^^^^^^ method not found in `AggregatedMetrics`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/types.rs:107:1
    |
107 | pub struct AggregatedMetrics {
    | ---------------------------- method `operations_attempted` not found for this struct

error[E0609]: no field `weak_connections` on type `EntanglementQuality`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_analysis.rs:222:25
    |
222 |         if self.quality.weak_connections > self.quality.strong_connections {
    |                         ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `strength_mean`, `strength_std`, `strength_min`, `strength_max`, `strong_count` ... and 4 others

error[E0609]: no field `strong_connections` on type `EntanglementQuality`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_analysis.rs:222:57
    |
222 |         if self.quality.weak_connections > self.quality.strong_connections {
    |                                                         ^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `strength_mean`, `strength_std`, `strength_min`, `strength_max`, `strong_count` ... and 4 others

error[E0599]: no method named `average_operation_latency` found for struct `AggregatedMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_analysis.rs:234:51
    |
234 |         let avg_latency_ms = self.metrics_summary.average_operation_latency().as_secs_f64() * 1000.0;
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `AggregatedMetrics`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/types.rs:107:1
    |
107 | pub struct AggregatedMetrics {
    | ---------------------------- method `average_operation_latency` not found for this struct

error[E0599]: no method named `clustering_coefficient` found for struct `network_topology::NetworkTopology` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_analysis.rs:239:52
    |
239 |         if self.node_count > 1000 && self.topology.clustering_coefficient() < 0.3 {
    |                                                    ^^^^^^^^^^^^^^^^^^^^^^-- help: remove the arguments
    |                                                    |
    |                                                    field, not a method
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:19:1
    |
19  | pub struct NetworkTopology {
    | -------------------------- method `clustering_coefficient` not found for this struct

error[E0599]: no method named `is_critical` found for reference `&&NetworkBottleneck` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_analysis.rs:277:72
    |
277 |             critical_bottlenecks: self.bottlenecks.iter().filter(|b| b.is_critical()).count(),
    |                                                                        ^^^^^^^^^^^ method not found in `&&NetworkBottleneck`

error[E0599]: no method named `entanglements_created` found for struct `AggregatedMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_analysis.rs:280:57
    |
280 |             entanglements_created: self.metrics_summary.entanglements_created(),
    |                                                         ^^^^^^^^^^^^^^^^^^^^^ method not found in `AggregatedMetrics`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/types.rs:107:1
    |
107 | pub struct AggregatedMetrics {
    | ---------------------------- method `entanglements_created` not found for this struct

error[E0599]: no method named `operations_attempted` found for struct `AggregatedMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_analysis.rs:281:56
    |
281 |             operations_attempted: self.metrics_summary.operations_attempted(),
    |                                                        ^^^^^^^^^^^^^^^^^^^^ method not found in `AggregatedMetrics`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/types.rs:107:1
    |
107 | pub struct AggregatedMetrics {
    | ---------------------------- method `operations_attempted` not found for this struct

error[E0599]: no method named `operations_successful` found for struct `AggregatedMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_analysis.rs:282:57
    |
282 |             operations_successful: self.metrics_summary.operations_successful(),
    |                                                         ^^^^^^^^^^^^^^^^^^^^^ method not found in `AggregatedMetrics`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/types.rs:107:1
    |
107 | pub struct AggregatedMetrics {
    | ---------------------------- method `operations_successful` not found for this struct

error[E0599]: no method named `average_operation_latency` found for struct `AggregatedMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement_analysis.rs:283:54
    |
283 |             average_latency_ms: self.metrics_summary.average_operation_latency().as_secs_f64() * 1000.0,
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `AggregatedMetrics`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/types.rs:107:1
    |
107 | pub struct AggregatedMetrics {
    | ---------------------------- method `average_operation_latency` not found for this struct

error[E0061]: this function takes 1 argument but 0 arguments were supplied
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_core.rs:42:32
   |
42 |         let metrics = Arc::new(EntanglementMetrics::new());
   |                                ^^^^^^^^^^^^^^^^^^^^^^^^-- argument #1 of type `std::string::String` is missing
   |
note: associated function defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/mod.rs:76:12
   |
76 |     pub fn new(system_name: String) -> Self {
   |            ^^^ -------------------
help: provide the argument
   |
42 |         let metrics = Arc::new(EntanglementMetrics::new(/* std::string::String */));
   |                                                         +++++++++++++++++++++++++

error[E0061]: this function takes 2 arguments but 3 arguments were supplied
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_core.rs:43:23
   |
43 |         let manager = QuantumEntanglementManager::new(
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
46 |             metrics.clone(),
   |             --------------- unexpected argument #3 of type `std::sync::Arc<quantum_mcts::entanglement::metrics::EntanglementMetrics>`
   |
note: associated function defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:38:12
   |
38 |     pub fn new(
   |            ^^^
help: remove the extra argument
   |
45 -             entanglement_graph.clone(),
46 -             metrics.clone(),
45 +             entanglement_graph.clone(),
   |

error[E0061]: this function takes 2 arguments but 3 arguments were supplied
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_core.rs:63:23
   |
63 |         let manager = QuantumEntanglementManager::new(
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
66 |             metrics.clone(),
   |             --------------- unexpected argument #3 of type `std::sync::Arc<quantum_mcts::entanglement::metrics::EntanglementMetrics>`
   |
note: associated function defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:38:12
   |
38 |     pub fn new(
   |            ^^^
help: remove the extra argument
   |
65 -             entanglement_graph.clone(),
66 -             metrics.clone(),
65 +             entanglement_graph.clone(),
   |

error[E0609]: no field `entanglement_strength_threshold` on type `quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_core.rs:100:42
    |
100 |         let base_threshold = self.config.entanglement_strength_threshold;
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
100 -         let base_threshold = self.config.entanglement_strength_threshold;
100 +         let base_threshold = self.config.entanglement_strength;
    |

error[E0599]: no method named `quantum_state` found for reference `&quantum_mcts::node_state::node::QuantumMCTSNode` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:133:40
    |
133 |         let coherence_factor = (node_a.quantum_state().coherence_level() + node_b.quantum_state().coherence_level()) / 2.0;
    |                                        ^^^^^^^^^^^^^-- help: remove the arguments
    |                                        |
    |                                        field, not a method

error[E0599]: no method named `quantum_state` found for reference `&quantum_mcts::node_state::node::QuantumMCTSNode` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:133:83
    |
133 |         let coherence_factor = (node_a.quantum_state().coherence_level() + node_b.quantum_state().coherence_level()) / 2.0;
    |                                                                                   ^^^^^^^^^^^^^-- help: remove the arguments
    |                                                                                   |
    |                                                                                   field, not a method

error[E0599]: no method named `visit_count` found for reference `&quantum_mcts::node_state::node::QuantumMCTSNode` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:134:37
    |
134 |         let visit_factor = ((node_a.visit_count() + node_b.visit_count()) as f64).log2().max(1.0) / 10.0;
    |                                     ^^^^^^^^^^^ method not found in `&quantum_mcts::node_state::node::QuantumMCTSNode`

error[E0599]: no method named `visit_count` found for reference `&quantum_mcts::node_state::node::QuantumMCTSNode` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:134:60
    |
134 |         let visit_factor = ((node_a.visit_count() + node_b.visit_count()) as f64).log2().max(1.0) / 10.0;
    |                                                            ^^^^^^^^^^^ method not found in `&quantum_mcts::node_state::node::QuantumMCTSNode`

error[E0609]: no field `entanglement_strength_threshold` on type `quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:135:41
    |
135 |         let base_strength = self.config.entanglement_strength_threshold;
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
135 -         let base_strength = self.config.entanglement_strength_threshold;
135 +         let base_strength = self.config.entanglement_strength;
    |

error[E0599]: no method named `quantum_state` found for reference `&quantum_mcts::node_state::node::QuantumMCTSNode` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:146:53
    |
146 |         let coherence_compatibility = 1.0 - (node_a.quantum_state().coherence_level() - node_b.quantum_state().coherence_level()).abs();
    |                                                     ^^^^^^^^^^^^^-- help: remove the arguments
    |                                                     |
    |                                                     field, not a method

error[E0599]: no method named `quantum_state` found for reference `&quantum_mcts::node_state::node::QuantumMCTSNode` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:146:96
    |
146 |         let coherence_compatibility = 1.0 - (node_a.quantum_state().coherence_level() - node_b.quantum_state().coherence_level()).abs();
    |                                                                                                ^^^^^^^^^^^^^-- help: remove the arguments
    |                                                                                                |
    |                                                                                                field, not a method

error[E0599]: no method named `visit_count` found for reference `&quantum_mcts::node_state::node::QuantumMCTSNode` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:148:39
    |
148 |             let visit_ratio = (node_a.visit_count() as f64 / (node_b.visit_count() as f64).max(1.0)).min(10.0);
    |                                       ^^^^^^^^^^^ method not found in `&quantum_mcts::node_state::node::QuantumMCTSNode`

error[E0599]: no method named `visit_count` found for reference `&quantum_mcts::node_state::node::QuantumMCTSNode` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:148:70
    |
148 |             let visit_ratio = (node_a.visit_count() as f64 / (node_b.visit_count() as f64).max(1.0)).min(10.0);
    |                                                                      ^^^^^^^^^^^ method not found in `&quantum_mcts::node_state::node::QuantumMCTSNode`

error[E0689]: can't call method `max` on ambiguous numeric type `{float}`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:152:69
    |
152 |         (coherence_compatibility * 0.6 + visit_compatibility * 0.4).max(0.0).min(1.0)
    |                                                                     ^^^

error[E0560]: struct `network_topology::NetworkTopology` has no field named `total_edges`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:244:13
    |
244 |             total_edges: 0,
    |             ^^^^^^^^^^^ `network_topology::NetworkTopology` does not have this field
    |
    = note: available fields are: `total_entanglements`

error[E0560]: struct `network_topology::NetworkTopology` has no field named `average_path_length`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:247:13
    |
247 |             average_path_length: 0.0,
    |             ^^^^^^^^^^^^^^^^^^^ `network_topology::NetworkTopology` does not have this field
    |
    = note: available fields are: `total_entanglements`

error[E0560]: struct `network_topology::NetworkTopology` has no field named `diameter`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:248:13
    |
248 |             diameter: 0,
    |             ^^^^^^^^ `network_topology::NetworkTopology` does not have this field
    |
    = note: available fields are: `total_entanglements`

error[E0560]: struct `network_topology::NetworkTopology` has no field named `connected_components`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:250:13
    |
250 |             connected_components: 0,
    |             ^^^^^^^^^^^^^^^^^^^^ `network_topology::NetworkTopology` does not have this field
    |
    = note: available fields are: `total_entanglements`

error[E0609]: no field `average_path_length` on type `&network_topology::NetworkTopology`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:268:35
    |
268 |         self.is_connected && self.average_path_length < 5.0
    |                                   ^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `total_nodes`, `total_entanglements`, `average_degree`, `max_degree`, `network_density` ... and 2 others

error[E0599]: no method named `quantum_state` found for reference `&quantum_mcts::node_state::node::QuantumMCTSNode` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_optimization.rs:66:35
   |
66 |         let quality_bonus = (node.quantum_state().coherence_level() * 2.0) as usize;
   |                                   ^^^^^^^^^^^^^-- help: remove the arguments
   |                                   |
   |                                   field, not a method

error[E0599]: no method named `visit_count` found for reference `&quantum_mcts::node_state::node::QuantumMCTSNode` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_optimization.rs:67:33
   |
67 |         let visit_bonus = (node.visit_count() as f64).log2().max(0.0) as usize;
   |                                 ^^^^^^^^^^^ method not found in `&quantum_mcts::node_state::node::QuantumMCTSNode`

error[E0609]: no field `entanglement_strength_threshold` on type `quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_optimization.rs:113:42
    |
113 |         let base_threshold = self.config.entanglement_strength_threshold;
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
113 -         let base_threshold = self.config.entanglement_strength_threshold;
113 +         let base_threshold = self.config.entanglement_strength;
    |

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_optimization.rs:200:50
    |
200 |         let pruning_impact = if current_topology.is_overly_dense() {
    |                                                  ^^^^^^^^^^^^^^^ multiple `is_overly_dense` found
    |
note: candidate #1 is defined in an impl for the type `network_topology::NetworkTopology`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:257:5
    |
257 |     pub fn is_overly_dense(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `network_topology::NetworkTopology`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:51:5
    |
51  |     pub fn is_overly_dense(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_optimization.rs:206:51
    |
206 |         let creation_impact = if current_topology.is_sparse() || !current_topology.has_good_connectivity() {
    |                                                   ^^^^^^^^^ multiple `is_sparse` found
    |
note: candidate #1 is defined in an impl for the type `network_topology::NetworkTopology`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:262:5
    |
262 |     pub fn is_sparse(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `network_topology::NetworkTopology`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:45:5
    |
45  |     pub fn is_sparse(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_optimization.rs:206:84
    |
206 |         let creation_impact = if current_topology.is_sparse() || !current_topology.has_good_connectivity() {
    |                                                                                    ^^^^^^^^^^^^^^^^^^^^^ multiple `has_good_connectivity` found
    |
note: candidate #1 is defined in an impl for the type `network_topology::NetworkTopology`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:267:5
    |
267 |     pub fn has_good_connectivity(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `network_topology::NetworkTopology`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:39:5
    |
39  |     pub fn has_good_connectivity(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_optimization.rs:244:21
    |
244 |         if topology.is_overly_dense() {
    |                     ^^^^^^^^^^^^^^^ multiple `is_overly_dense` found
    |
note: candidate #1 is defined in an impl for the type `network_topology::NetworkTopology`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:257:5
    |
257 |     pub fn is_overly_dense(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `network_topology::NetworkTopology`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:51:5
    |
51  |     pub fn is_overly_dense(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_optimization.rs:248:21
    |
248 |         if topology.is_sparse() {
    |                     ^^^^^^^^^ multiple `is_sparse` found
    |
note: candidate #1 is defined in an impl for the type `network_topology::NetworkTopology`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:262:5
    |
262 |     pub fn is_sparse(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `network_topology::NetworkTopology`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:45:5
    |
45  |     pub fn is_sparse(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0689]: can't call method `min` on ambiguous numeric type `{float}`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_optimization.rs:300:20
    |
300 |         confidence.min(1.0).max(0.1)
    |                    ^^^
    |
help: you must specify a type for this binding, like `f32`
    |
281 |         let mut confidence: f32 = 0.8; // Base confidence
    |                           +++++

error[E0609]: no field `average_path_length` on type `&network_topology::NetworkTopology`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_health.rs:129:43
    |
129 |         let path_efficiency = if topology.average_path_length > 0.0 {
    |                                           ^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `total_nodes`, `total_entanglements`, `average_degree`, `max_degree`, `network_density` ... and 2 others

error[E0609]: no field `average_path_length` on type `&network_topology::NetworkTopology`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_health.rs:130:28
    |
130 |             1.0 / topology.average_path_length
    |                            ^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `total_nodes`, `total_entanglements`, `average_degree`, `max_degree`, `network_density` ... and 2 others

error[E0277]: the trait bound `quantum_mcts::entanglement::metrics::EntanglementMetrics: Clone` is not satisfied
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_health.rs:151:5
    |
142 | #[derive(Debug, Clone)]
    |                 ----- in this derive macro expansion
...
151 |     pub metrics: crate::cognitive::quantum_mcts::entanglement::metrics::EntanglementMetrics,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `quantum_mcts::entanglement::metrics::EntanglementMetrics`

error[E0277]: the trait bound `quantum_mcts::entanglement::metrics::EntanglementMetrics: Clone` is not satisfied
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_health.rs:198:5
    |
193 | #[derive(Debug, Clone)]
    |                 ----- in this derive macro expansion
...
198 |     pub metrics: crate::cognitive::quantum_mcts::entanglement::metrics::EntanglementMetrics,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `quantum_mcts::entanglement::metrics::EntanglementMetrics`

error[E0609]: no field `total_entanglements` on type `quantum_mcts::entanglement::metrics::EntanglementMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_health.rs:210:26
    |
210 |             self.metrics.total_entanglements,
    |                          ^^^^^^^^^^^^^^^^^^^ unknown field

error[E0277]: the trait bound `engine_issue_types::IssueCategory: std::cmp::Eq` is not satisfied
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_issue_collection.rs:164:27
    |
164 |             *distribution.entry(issue.category.clone()).or_insert(0) += 1;
    |                           ^^^^^ the trait `std::cmp::Eq` is not implemented for `engine_issue_types::IssueCategory`
    |
note: required by a bound in `std::collections::HashMap::<K, V, S>::entry`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:763:8
    |
763 |     K: Eq + Hash,
    |        ^^ required by this bound in `HashMap::<K, V, S>::entry`
...
883 |     pub fn entry(&mut self, key: K) -> Entry<'_, K, V> {
    |            ----- required by a bound in this associated function
help: consider annotating `engine_issue_types::IssueCategory` with `#[derive(Eq)]`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_issue_types.rs:218:1
    |
218 + #[derive(Eq)]
219 | pub enum IssueCategory {
    |

error[E0277]: the trait bound `engine_issue_types::IssueCategory: Hash` is not satisfied
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_issue_collection.rs:164:27
    |
164 |             *distribution.entry(issue.category.clone()).or_insert(0) += 1;
    |                           ^^^^^ the trait `Hash` is not implemented for `engine_issue_types::IssueCategory`
    |
note: required by a bound in `std::collections::HashMap::<K, V, S>::entry`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:763:13
    |
763 |     K: Eq + Hash,
    |             ^^^^ required by this bound in `HashMap::<K, V, S>::entry`
...
883 |     pub fn entry(&mut self, key: K) -> Entry<'_, K, V> {
    |            ----- required by a bound in this associated function
help: consider annotating `engine_issue_types::IssueCategory` with `#[derive(Hash)]`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_issue_types.rs:218:1
    |
218 + #[derive(Hash)]
219 | pub enum IssueCategory {
    |

error[E0277]: the trait bound `engine_issue_types::IssueSeverity: Hash` is not satisfied
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_issue_collection.rs:173:27
    |
173 |             *distribution.entry(issue.severity.clone()).or_insert(0) += 1;
    |                           ^^^^^ the trait `Hash` is not implemented for `engine_issue_types::IssueSeverity`
    |
note: required by a bound in `std::collections::HashMap::<K, V, S>::entry`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:763:13
    |
763 |     K: Eq + Hash,
    |             ^^^^ required by this bound in `HashMap::<K, V, S>::entry`
...
883 |     pub fn entry(&mut self, key: K) -> Entry<'_, K, V> {
    |            ----- required by a bound in this associated function
help: consider annotating `engine_issue_types::IssueSeverity` with `#[derive(Hash)]`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_issue_types.rs:8:1
    |
8   + #[derive(Hash)]
9   | pub enum IssueSeverity {
    |

error[E0609]: no field `average_path_length` on type `&network_topology::NetworkTopology`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_optimization_utils.rs:43:34
   |
43 |     let path_score = if topology.average_path_length > 0.0 {
   |                                  ^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `total_nodes`, `total_entanglements`, `average_degree`, `max_degree`, `network_density` ... and 2 others

error[E0609]: no field `average_path_length` on type `&network_topology::NetworkTopology`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_optimization_utils.rs:45:25
   |
45 |         1.0 - (topology.average_path_length - optimal_path).abs() / optimal_path
   |                         ^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `total_nodes`, `total_entanglements`, `average_degree`, `max_degree`, `network_density` ... and 2 others

error[E0689]: can't call method `max` on ambiguous numeric type `{float}`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_optimization_utils.rs:49:25
   |
49 |     score += path_score.max(0.0) * 0.25;
   |                         ^^^
   |
help: you must specify a type for this binding, like `f32`
   |
43 |     let path_score: f32 = if topology.average_path_length > 0.0 {
   |                   +++++

error[E0609]: no field `total_entanglements` on type `&quantum_mcts::entanglement::metrics::EntanglementMetrics`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_optimization_utils.rs:59:16
   |
59 |     if metrics.total_entanglements == 0 {
   |                ^^^^^^^^^^^^^^^^^^^ unknown field

error[E0609]: no field `average_strength` on type `&quantum_mcts::entanglement::metrics::EntanglementMetrics`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_optimization_utils.rs:64:16
   |
64 |     if metrics.average_strength > 0.0 {
   |                ^^^^^^^^^^^^^^^^ unknown field

error[E0609]: no field `max_strength` on type `&quantum_mcts::entanglement::metrics::EntanglementMetrics`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_optimization_utils.rs:65:47
   |
65 |         let strength_balance = 1.0 - (metrics.max_strength - metrics.average_strength) / metrics.max_strength;
   |                                               ^^^^^^^^^^^^ unknown field

error[E0609]: no field `average_strength` on type `&quantum_mcts::entanglement::metrics::EntanglementMetrics`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_optimization_utils.rs:65:70
   |
65 |         let strength_balance = 1.0 - (metrics.max_strength - metrics.average_strength) / metrics.max_strength;
   |                                                                      ^^^^^^^^^^^^^^^^ unknown field

error[E0609]: no field `max_strength` on type `&quantum_mcts::entanglement::metrics::EntanglementMetrics`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_optimization_utils.rs:65:98
   |
65 |         let strength_balance = 1.0 - (metrics.max_strength - metrics.average_strength) / metrics.max_strength;
   |                                                                                                  ^^^^^^^^^^^^ unknown field

error[E0689]: can't call method `max` on ambiguous numeric type `{float}`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_optimization_utils.rs:66:35
   |
66 |         score *= strength_balance.max(0.5); // Don't penalize too heavily
   |                                   ^^^
   |
help: you must specify a type for this binding, like `f32`
   |
65 |         let strength_balance: f32 = 1.0 - (metrics.max_strength - metrics.average_strength) / metrics.max_strength;
   |                             +++++

error[E0609]: no field `total_entanglements` on type `&quantum_mcts::entanglement::metrics::EntanglementMetrics`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_optimization_utils.rs:70:37
   |
70 |     let density_factor = if metrics.total_entanglements > 1000 {
   |                                     ^^^^^^^^^^^^^^^^^^^ unknown field

error[E0609]: no field `total_entanglements` on type `&quantum_mcts::entanglement::metrics::EntanglementMetrics`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_optimization_utils.rs:72:23
   |
72 |     } else if metrics.total_entanglements < 10 {
   |                       ^^^^^^^^^^^^^^^^^^^ unknown field

error[E0689]: can't call method `min` on ambiguous numeric type `{float}`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_optimization_utils.rs:79:11
   |
79 |     score.min(1.0).max(0.0)
   |           ^^^
   |
help: you must specify a type for this binding, like `f32`
   |
56 |     let mut score: f32 = 1.0;
   |                  +++++

error[E0609]: no field `total_edges` on type `&network_topology::NetworkTopology`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_optimization_utils.rs:177:18
    |
177 |         topology.total_edges as f64 / theoretical_max_edges as f64
    |                  ^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
177 -         topology.total_edges as f64 / theoretical_max_edges as f64
177 +         topology.total_nodes as f64 / theoretical_max_edges as f64
    |

error[E0609]: no field `average_path_length` on type `&network_topology::NetworkTopology`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_optimization_utils.rs:182:39
    |
182 |     let path_efficiency = if topology.average_path_length > 0.0 {
    |                                       ^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `total_nodes`, `total_entanglements`, `average_degree`, `max_degree`, `network_density` ... and 2 others

error[E0609]: no field `average_path_length` on type `&network_topology::NetworkTopology`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_optimization_utils.rs:183:24
    |
183 |         1.0 / topology.average_path_length
    |                        ^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `total_nodes`, `total_entanglements`, `average_degree`, `max_degree`, `network_density` ... and 2 others

error[E0609]: no field `total_entanglements` on type `&quantum_mcts::entanglement::metrics::EntanglementMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_optimization_utils.rs:194:16
    |
194 |     if metrics.total_entanglements == 0 || metrics.max_strength == 0.0 {
    |                ^^^^^^^^^^^^^^^^^^^ unknown field

error[E0609]: no field `max_strength` on type `&quantum_mcts::entanglement::metrics::EntanglementMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_optimization_utils.rs:194:52
    |
194 |     if metrics.total_entanglements == 0 || metrics.max_strength == 0.0 {
    |                                                    ^^^^^^^^^^^^ unknown field

error[E0609]: no field `average_strength` on type `&quantum_mcts::entanglement::metrics::EntanglementMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_optimization_utils.rs:199:25
    |
199 |     let cv = if metrics.average_strength > 0.0 {
    |                         ^^^^^^^^^^^^^^^^ unknown field

error[E0609]: no field `max_strength` on type `&quantum_mcts::entanglement::metrics::EntanglementMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_optimization_utils.rs:200:18
    |
200 |         (metrics.max_strength - metrics.average_strength) / metrics.average_strength
    |                  ^^^^^^^^^^^^ unknown field

error[E0609]: no field `average_strength` on type `&quantum_mcts::entanglement::metrics::EntanglementMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_optimization_utils.rs:200:41
    |
200 |         (metrics.max_strength - metrics.average_strength) / metrics.average_strength
    |                                         ^^^^^^^^^^^^^^^^ unknown field

error[E0609]: no field `average_strength` on type `&quantum_mcts::entanglement::metrics::EntanglementMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_optimization_utils.rs:200:69
    |
200 |         (metrics.max_strength - metrics.average_strength) / metrics.average_strength
    |                                                                     ^^^^^^^^^^^^^^^^ unknown field

error[E0689]: can't call method `max` on ambiguous numeric type `{float}`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_health_utils.rs:137:62
    |
137 |     let range = health_scores.iter().fold(0.0, |acc, &x| acc.max(x)) - 
    |                                                 ---          ^^^
    |                                                 |
    |                                                 you must specify a type for this binding, like `f32`

error[E0689]: can't call method `min` on ambiguous numeric type `{float}`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_health_utils.rs:138:63
    |
138 |                health_scores.iter().fold(100.0, |acc, &x| acc.min(x));
    |                                                  ---          ^^^
    |                                                  |
    |                                                  you must specify a type for this binding, like `f32`

error[E0609]: no field `average_path_length` on type `&network_topology::NetworkTopology`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_integration.rs:66:38
   |
66 |         let path_score = if topology.average_path_length > 0.0 {
   |                                      ^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `total_nodes`, `total_entanglements`, `average_degree`, `max_degree`, `network_density` ... and 2 others

error[E0609]: no field `average_path_length` on type `&network_topology::NetworkTopology`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_integration.rs:68:29
   |
68 |             1.0 - (topology.average_path_length - optimal_path).abs() / optimal_path
   |                             ^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `total_nodes`, `total_entanglements`, `average_degree`, `max_degree`, `network_density` ... and 2 others

error[E0689]: can't call method `max` on ambiguous numeric type `{float}`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_integration.rs:72:29
   |
72 |         score += path_score.max(0.0) * 0.25;
   |                             ^^^
   |
help: you must specify a type for this binding, like `f32`
   |
66 |         let path_score: f32 = if topology.average_path_length > 0.0 {
   |                       +++++

error[E0609]: no field `total_entanglements` on type `&quantum_mcts::entanglement::metrics::EntanglementMetrics`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_integration.rs:82:20
   |
82 |         if metrics.total_entanglements == 0 {
   |                    ^^^^^^^^^^^^^^^^^^^ unknown field

error[E0609]: no field `average_strength` on type `&quantum_mcts::entanglement::metrics::EntanglementMetrics`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_integration.rs:87:20
   |
87 |         if metrics.average_strength > 0.0 {
   |                    ^^^^^^^^^^^^^^^^ unknown field

error[E0609]: no field `max_strength` on type `&quantum_mcts::entanglement::metrics::EntanglementMetrics`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_integration.rs:88:51
   |
88 |             let strength_balance = 1.0 - (metrics.max_strength - metrics.average_strength) / metrics.max_strength;
   |                                                   ^^^^^^^^^^^^ unknown field

error[E0609]: no field `average_strength` on type `&quantum_mcts::entanglement::metrics::EntanglementMetrics`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_integration.rs:88:74
   |
88 |             let strength_balance = 1.0 - (metrics.max_strength - metrics.average_strength) / metrics.max_strength;
   |                                                                          ^^^^^^^^^^^^^^^^ unknown field

error[E0609]: no field `max_strength` on type `&quantum_mcts::entanglement::metrics::EntanglementMetrics`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_integration.rs:88:102
   |
88 |             let strength_balance = 1.0 - (metrics.max_strength - metrics.average_strength) / metrics.max_strength;
   |                                                                                                      ^^^^^^^^^^^^ unknown field

error[E0689]: can't call method `max` on ambiguous numeric type `{float}`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_integration.rs:89:39
   |
89 |             score *= strength_balance.max(0.5); // Don't penalize too heavily
   |                                       ^^^
   |
help: you must specify a type for this binding, like `f32`
   |
88 |             let strength_balance: f32 = 1.0 - (metrics.max_strength - metrics.average_strength) / metrics.max_strength;
   |                                 +++++

error[E0609]: no field `total_entanglements` on type `&quantum_mcts::entanglement::metrics::EntanglementMetrics`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_integration.rs:93:41
   |
93 |         let density_factor = if metrics.total_entanglements > 1000 {
   |                                         ^^^^^^^^^^^^^^^^^^^ unknown field

error[E0609]: no field `total_entanglements` on type `&quantum_mcts::entanglement::metrics::EntanglementMetrics`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_integration.rs:95:27
   |
95 |         } else if metrics.total_entanglements < 10 {
   |                           ^^^^^^^^^^^^^^^^^^^ unknown field

error[E0689]: can't call method `min` on ambiguous numeric type `{float}`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_integration.rs:102:15
    |
102 |         score.min(1.0).max(0.0)
    |               ^^^
    |
help: you must specify a type for this binding, like `f32`
    |
79  |         let mut score: f32 = 1.0;
    |                      +++++

error[E0689]: can't call method `max` on ambiguous numeric type `{float}`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_integration.rs:324:66
    |
324 |         let range = health_scores.iter().fold(0.0, |acc, &x| acc.max(x)) - 
    |                                                     ---          ^^^
    |                                                     |
    |                                                     you must specify a type for this binding, like `f32`

error[E0689]: can't call method `min` on ambiguous numeric type `{float}`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/entanglement_integration.rs:325:67
    |
325 |                    health_scores.iter().fold(100.0, |acc, &x| acc.min(x));
    |                                                      ---          ^^^
    |                                                      |
    |                                                      you must specify a type for this binding, like `f32`

error[E0061]: this function takes 1 argument but 0 arguments were supplied
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:42:32
   |
42 |         let metrics = Arc::new(EntanglementMetrics::new());
   |                                ^^^^^^^^^^^^^^^^^^^^^^^^-- argument #1 of type `std::string::String` is missing
   |
note: associated function defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/mod.rs:76:12
   |
76 |     pub fn new(system_name: String) -> Self {
   |            ^^^ -------------------
help: provide the argument
   |
42 |         let metrics = Arc::new(EntanglementMetrics::new(/* std::string::String */));
   |                                                         +++++++++++++++++++++++++

error[E0061]: this function takes 2 arguments but 3 arguments were supplied
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:43:23
   |
43 |         let manager = QuantumEntanglementManager::new(
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
46 |             metrics.clone(),
   |             --------------- unexpected argument #3 of type `std::sync::Arc<quantum_mcts::entanglement::metrics::EntanglementMetrics>`
   |
note: associated function defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:38:12
   |
38 |     pub fn new(
   |            ^^^
help: remove the extra argument
   |
45 -             entanglement_graph.clone(),
46 -             metrics.clone(),
45 +             entanglement_graph.clone(),
   |

error[E0061]: this function takes 2 arguments but 3 arguments were supplied
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:65:23
   |
65 |         let manager = QuantumEntanglementManager::new(
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
68 |             metrics.clone(),
   |             --------------- unexpected argument #3 of type `std::sync::Arc<quantum_mcts::entanglement::metrics::EntanglementMetrics>`
   |
note: associated function defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:38:12
   |
38 |     pub fn new(
   |            ^^^
help: remove the extra argument
   |
67 -             entanglement_graph.clone(),
68 -             metrics.clone(),
67 +             entanglement_graph.clone(),
   |

error[E0599]: no method named `summary` found for struct `std::sync::Arc<quantum_mcts::entanglement::metrics::EntanglementMetrics>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:139:44
    |
139 |         let metrics_summary = self.metrics.summary();
    |                                            ^^^^^^^
    |
help: there is a method `status_summary` with a similar name
    |
139 |         let metrics_summary = self.metrics.status_summary();
    |                                             +++++++

error[E0609]: no field `cache_size` on type `&mut quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:233:14
    |
233 |         self.cache_size = self.cache_size.max(10000);
    |              ^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
233 -         self.cache_size = self.cache_size.max(10000);
233 +         self.batch_size = self.cache_size.max(10000);
    |

error[E0609]: no field `cache_size` on type `&mut quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:233:32
    |
233 |         self.cache_size = self.cache_size.max(10000);
    |                                ^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
233 -         self.cache_size = self.cache_size.max(10000);
233 +         self.cache_size = self.batch_size.max(10000);
    |

error[E0609]: no field `enable_parallel_processing` on type `&mut quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:235:14
    |
235 |         self.enable_parallel_processing = true;
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `enable_adaptive_thresholds` on type `&mut quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:236:14
    |
236 |         self.enable_adaptive_thresholds = true;
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `max_concurrent_operations` on type `&mut quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:242:14
    |
242 |         self.max_concurrent_operations = self.max_concurrent_operations.max(50);
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `max_concurrent_operations` on type `&mut quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:242:47
    |
242 |         self.max_concurrent_operations = self.max_concurrent_operations.max(50);
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `operation_timeout_ms` on type `&mut quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:243:14
    |
243 |         self.operation_timeout_ms = self.operation_timeout_ms.min(1000);
    |              ^^^^^^^^^^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
243 -         self.operation_timeout_ms = self.operation_timeout_ms.min(1000);
243 +         self.simulation_timeout_ms = self.operation_timeout_ms.min(1000);
    |

error[E0609]: no field `operation_timeout_ms` on type `&mut quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:243:42
    |
243 |         self.operation_timeout_ms = self.operation_timeout_ms.min(1000);
    |                                          ^^^^^^^^^^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
243 -         self.operation_timeout_ms = self.operation_timeout_ms.min(1000);
243 +         self.operation_timeout_ms = self.simulation_timeout_ms.min(1000);
    |

error[E0609]: no field `operation_timeout_ms` on type `&mut quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:249:14
    |
249 |         self.operation_timeout_ms = self.operation_timeout_ms.min(100);
    |              ^^^^^^^^^^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
249 -         self.operation_timeout_ms = self.operation_timeout_ms.min(100);
249 +         self.simulation_timeout_ms = self.operation_timeout_ms.min(100);
    |

error[E0609]: no field `operation_timeout_ms` on type `&mut quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:249:42
    |
249 |         self.operation_timeout_ms = self.operation_timeout_ms.min(100);
    |                                          ^^^^^^^^^^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
249 -         self.operation_timeout_ms = self.operation_timeout_ms.min(100);
249 +         self.operation_timeout_ms = self.simulation_timeout_ms.min(100);
    |

error[E0609]: no field `enable_predictive_caching` on type `&mut quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:250:14
    |
250 |         self.enable_predictive_caching = true;
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:258:27
    |
258 |         let mut metrics = Self::new();
    |                           ^^^^^^^^^-- argument #1 of type `std::string::String` is missing
    |
note: associated function defined here
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/mod.rs:76:12
    |
76  |     pub fn new(system_name: String) -> Self {
    |            ^^^ -------------------
help: provide the argument
    |
258 |         let mut metrics = Self::new(/* std::string::String */);
    |                                     +++++++++++++++++++++++++

error[E0599]: no method named `enable_high_precision_timing` found for struct `quantum_mcts::entanglement::metrics::EntanglementMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:259:17
    |
259 |         metrics.enable_high_precision_timing();
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `quantum_mcts::entanglement::metrics::EntanglementMetrics`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/mod.rs:57:1
    |
57  | pub struct EntanglementMetrics {
    | ------------------------------ method `enable_high_precision_timing` not found for this struct

error[E0599]: no method named `enable_detailed_statistics` found for struct `quantum_mcts::entanglement::metrics::EntanglementMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:260:17
    |
260 |         metrics.enable_detailed_statistics();
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `quantum_mcts::entanglement::metrics::EntanglementMetrics`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/mod.rs:57:1
    |
57  | pub struct EntanglementMetrics {
    | ------------------------------ method `enable_detailed_statistics` not found for this struct

error[E0599]: no method named `record_engine_startup` found for reference `&quantum_mcts::entanglement::metrics::EntanglementMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:266:14
    |
266 |         self.record_engine_startup();
    |              ^^^^^^^^^^^^^^^^^^^^^
    |
help: there is a method `record_engine_operation` with a similar name, but with different arguments
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/mod.rs:328:5
    |
328 | /     pub fn record_engine_operation(
329 | |         &self,
330 | |         op_type: &crate::cognitive::quantum_mcts::entanglement::engine::operation_types::EngineOperationType,
331 | |         duration_ms: u64,
332 | |         success: bool,
333 | |         performance_improvement: Option<f64>,
334 | |     ) {
    | |_____^

error[E0599]: no method named `record_engine_shutdown` found for reference `&quantum_mcts::entanglement::metrics::EntanglementMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:271:14
    |
271 |         self.record_engine_shutdown();
    |              ^^^^^^^^^^^^^^^^^^^^^^
    |
help: there is a method `record_engine_operation` with a similar name, but with different arguments
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/mod.rs:328:5
    |
328 | /     pub fn record_engine_operation(
329 | |         &self,
330 | |         op_type: &crate::cognitive::quantum_mcts::entanglement::engine::operation_types::EngineOperationType,
331 | |         duration_ms: u64,
332 | |         success: bool,
333 | |         performance_improvement: Option<f64>,
334 | |     ) {
    | |_____^

error[E0599]: no method named `reset_counters` found for reference `&quantum_mcts::entanglement::metrics::EntanglementMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:276:14
    |
276 |         self.reset_counters();
    |              ^^^^^^^^^^^^^^
    |
help: there is a method `counters` with a similar name
    |
276 -         self.reset_counters();
276 +         self.counters();
    |

error[E0599]: no method named `reset_timers` found for reference `&quantum_mcts::entanglement::metrics::EntanglementMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:277:14
    |
277 |         self.reset_timers();
    |              ^^^^^^^^^^^^ method not found in `&quantum_mcts::entanglement::metrics::EntanglementMetrics`

error[E0061]: this function takes 2 arguments but 3 arguments were supplied
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:289:27
    |
289 |         let mut manager = Self::new(config, entanglement_graph, metrics);
    |                           ^^^^^^^^^                             ------- unexpected argument #3 of type `std::sync::Arc<quantum_mcts::entanglement::metrics::EntanglementMetrics>`
    |
note: associated function defined here
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:38:12
    |
38  |     pub fn new(
    |            ^^^
help: remove the extra argument
    |
289 -         let mut manager = Self::new(config, entanglement_graph, metrics);
289 +         let mut manager = Self::new(config, entanglement_graph);
    |

error[E0599]: no method named `enable_optimizations` found for struct `QuantumEntanglementManager` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:290:17
    |
290 |         manager.enable_optimizations();
    |                 ^^^^^^^^^^^^^^^^^^^^ method not found in `QuantumEntanglementManager`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:25:1
    |
25  | pub struct QuantumEntanglementManager {
    | ------------------------------------- method `enable_optimizations` not found for this struct

error[E0599]: no method named `has_valid_configuration` found for reference `&QuantumEntanglementManager` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:296:14
    |
296 |         self.has_valid_configuration() && self.has_active_metrics()
    |              ^^^^^^^^^^^^^^^^^^^^^^^ method not found in `&QuantumEntanglementManager`

error[E0599]: no method named `has_active_metrics` found for reference `&QuantumEntanglementManager` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:296:48
    |
296 |         self.has_valid_configuration() && self.has_active_metrics()
    |                                                ^^^^^^^^^^^^^^^^^^
    |
help: there is a method `reset_metrics` with a similar name
    |
296 -         self.has_valid_configuration() && self.has_active_metrics()
296 +         self.has_valid_configuration() && self.reset_metrics()
    |

error[E0599]: no method named `impact_score` found for reference `&CreationResult` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core_types.rs:203:68
    |
203 |             EngineOperationDetails::Creation(creation) => creation.impact_score(),
    |                                                                    ^^^^^^^^^^^^ method not found in `&CreationResult`

error[E0609]: no field `efficiency_improvement` on type `&quantum_mcts::entanglement::engine::pruning::PruningResult`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core_types.rs:204:65
    |
204 |             EngineOperationDetails::Pruning(pruning) => pruning.efficiency_improvement,
    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `entanglements_pruned`, `pruning_time_ms`, `network_improvement`, `reason`

error[E0599]: no method named `overall_score` found for reference `&NetworkHealthReport` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core_types.rs:206:67
    |
206 |             EngineOperationDetails::HealthCheck(health) => health.overall_score(),
    |                                                                   ^^^^^^^^^^^^^ method not found in `&NetworkHealthReport`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `EvaluationScoring` defines an item `overall_score`, perhaps you need to implement it
   --> packages/sweetmcp-memory/src/cognitive/committee/evaluation/consensus_calculation.rs:244:1
    |
244 | trait EvaluationScoring {
    | ^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `impact_score` found for reference `&CreationResult` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core_types.rs:216:43
    |
216 |                     total_score += create.impact_score();
    |                                           ^^^^^^^^^^^^ method not found in `&CreationResult`

error[E0609]: no field `efficiency_improvement` on type `&quantum_mcts::entanglement::engine::pruning::PruningResult`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core_types.rs:220:42
    |
220 |                     total_score += prune.efficiency_improvement;
    |                                          ^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `entanglements_pruned`, `pruning_time_ms`, `network_improvement`, `reason`

error[E0599]: no method named `overall_score` found for reference `&NetworkHealthReport` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core_types.rs:228:49
    |
228 |                     total_score += health_check.overall_score();
    |                                                 ^^^^^^^^^^^^^ method not found in `&NetworkHealthReport`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `EvaluationScoring` defines an item `overall_score`, perhaps you need to implement it
   --> packages/sweetmcp-memory/src/cognitive/committee/evaluation/consensus_calculation.rs:244:1
    |
244 | trait EvaluationScoring {
    | ^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no function or associated item named `with_custom_metrics` found for struct `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/factory.rs:61:36
   |
61 |         QuantumEntanglementEngine::with_custom_metrics(config, entanglement_graph, metrics)
   |                                    ^^^^^^^^^^^^^^^^^^^ function or associated item not found in `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   |
  ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:23:1
   |
23 | pub struct QuantumEntanglementEngine {
   | ------------------------------------ function or associated item `with_custom_metrics` not found for this struct
   |
note: if you're trying to build a new `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine` consider using one of the following associated functions:
      quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine::new
      quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine::with_metrics
      quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine::optimized
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:36:5
   |
36 | /     pub fn new(
37 | |         config: QuantumMCTSConfig,
38 | |         entanglement_graph: Arc<RwLock<EntanglementGraph>>,
39 | |     ) -> Self {
   | |_____________^
...
58 | /     pub fn with_metrics(
59 | |         config: QuantumMCTSConfig,
60 | |         entanglement_graph: Arc<RwLock<EntanglementGraph>>,
61 | |         metrics: Arc<EntanglementMetrics>,
62 | |     ) -> Self {
   | |_____________^
...
80 | /     pub fn optimized(
81 | |         config: QuantumMCTSConfig,
82 | |         entanglement_graph: Arc<RwLock<EntanglementGraph>>,
83 | |     ) -> Self {
   | |_____________^
help: there is an associated function `with_metrics` with a similar name
   |
61 -         QuantumEntanglementEngine::with_custom_metrics(config, entanglement_graph, metrics)
61 +         QuantumEntanglementEngine::with_metrics(config, entanglement_graph, metrics)
   |

error[E0609]: no field `average_operation_time_us` on type `&AggregatedMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/health.rs:140:44
    |
140 |         let performance_score = if metrics.average_operation_time_us <= config.max_response_time_us {
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `total_operations`, `total_errors`, `combined_error_rate`, `peak_throughput`, `average_response_time`, `consistency_score`

error[E0609]: no field `average_operation_time_us` on type `&AggregatedMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/health.rs:143:52
    |
143 |             (config.max_response_time_us / metrics.average_operation_time_us).min(1.0)
    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `total_operations`, `total_errors`, `combined_error_rate`, `peak_throughput`, `average_response_time`, `consistency_score`

error[E0609]: no field `success_rate` on type `&AggregatedMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/health.rs:148:40
    |
148 |         let success_score = if metrics.success_rate >= config.min_success_rate {
    |                                        ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `total_operations`, `total_errors`, `combined_error_rate`, `peak_throughput`, `average_response_time`, `consistency_score`

error[E0609]: no field `success_rate` on type `&AggregatedMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/health.rs:151:22
    |
151 |             (metrics.success_rate / config.min_success_rate).min(1.0)
    |                      ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `total_operations`, `total_errors`, `combined_error_rate`, `peak_throughput`, `average_response_time`, `consistency_score`

error[E0689]: can't call method `max` on ambiguous numeric type `{float}`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/health.rs:184:25
    |
184 |         structure_score.max(0.0).min(1.0)
    |                         ^^^
    |
help: you must specify a type for this binding, like `f32`
    |
164 |         let mut structure_score: f32 = 1.0;
    |                                +++++

error[E0609]: no field `average_operation_time_us` on type `&AggregatedMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/health.rs:282:20
    |
282 |         if metrics.average_operation_time_us > config.max_response_time_us {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `total_operations`, `total_errors`, `combined_error_rate`, `peak_throughput`, `average_response_time`, `consistency_score`

error[E0609]: no field `success_rate` on type `&AggregatedMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/health.rs:287:20
    |
287 |         if metrics.success_rate < config.min_success_rate {
    |                    ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `total_operations`, `total_errors`, `combined_error_rate`, `peak_throughput`, `average_response_time`, `consistency_score`

error[E0609]: no field `cache_hit_rate` on type `&AggregatedMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/health.rs:309:20
    |
309 |         if metrics.cache_hit_rate < 0.8 {
    |                    ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `total_operations`, `total_errors`, `combined_error_rate`, `peak_throughput`, `average_response_time`, `consistency_score`

error[E0609]: no field `operations_per_second` on type `&AggregatedMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/health.rs:322:20
    |
322 |         if metrics.operations_per_second < 10.0 {
    |                    ^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `total_operations`, `total_errors`, `combined_error_rate`, `peak_throughput`, `average_response_time`, `consistency_score`

error[E0609]: no field `success_rate` on type `AggregatedMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/health.rs:474:81
    |
474 |         report.push_str(&format!("Success Rate: {:.1}%\n", self.metrics_summary.success_rate * 100.0));
    |                                                                                 ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `total_operations`, `total_errors`, `combined_error_rate`, `peak_throughput`, `average_response_time`, `consistency_score`

error[E0609]: no field `average_operation_time_us` on type `AggregatedMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/health.rs:475:88
    |
475 |         report.push_str(&format!("Avg Operation Time: {:.1}μs\n", self.metrics_summary.average_operation_time_us));
    |                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `total_operations`, `total_errors`, `combined_error_rate`, `peak_throughput`, `average_response_time`, `consistency_score`

error[E0609]: no field `operations_per_second` on type `AggregatedMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/health.rs:476:82
    |
476 |         report.push_str(&format!("Operations/sec: {:.1}\n", self.metrics_summary.operations_per_second));
    |                                                                                  ^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `total_operations`, `total_errors`, `combined_error_rate`, `peak_throughput`, `average_response_time`, `consistency_score`

error[E0609]: no field `cache_hit_rate` on type `AggregatedMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/health.rs:477:83
    |
477 |         report.push_str(&format!("Cache Hit Rate: {:.1}%\n", self.metrics_summary.cache_hit_rate * 100.0));
    |                                                                                   ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `total_operations`, `total_errors`, `combined_error_rate`, `peak_throughput`, `average_response_time`, `consistency_score`

error[E0609]: no field `uptime_seconds` on type `AggregatedMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/health.rs:478:72
    |
478 |         report.push_str(&format!("Uptime: {}s\n", self.metrics_summary.uptime_seconds));
    |                                                                        ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `total_operations`, `total_errors`, `combined_error_rate`, `peak_throughput`, `average_response_time`, `consistency_score`

error[E0609]: no field `optimization` on type `&quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:374:39
    |
374 |         let optimization_stats = self.optimization.get_statistics()?;
    |                                       ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `manager`, `metrics`, `config`, `entanglement_graph`

error[E0609]: no field `pruning` on type `&quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:375:34
    |
375 |         let pruning_stats = self.pruning.get_statistics()?;
    |                                  ^^^^^^^ unknown field
    |
    = note: available fields are: `manager`, `metrics`, `config`, `entanglement_graph`

error[E0609]: no field `balancing` on type `&quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:376:36
    |
376 |         let balancing_stats = self.balancing.get_statistics()?;
    |                                    ^^^^^^^^^ unknown field
    |
    = note: available fields are: `manager`, `metrics`, `config`, `entanglement_graph`

error[E0609]: no field `health` on type `&quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:377:33
    |
377 |         let health_stats = self.health.get_statistics()?;
    |                                 ^^^^^^ unknown field
    |
    = note: available fields are: `manager`, `metrics`, `config`, `entanglement_graph`

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:427:31
    |
427 |         let statistics = self.get_comprehensive_statistics()?;
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ multiple `get_comprehensive_statistics` found
    |
note: candidate #1 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:229:5
    |
229 |     pub async fn get_comprehensive_statistics(&self) -> Result<EngineStatistics, CognitiveError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:370:5
    |
370 |     pub fn get_comprehensive_statistics(&self) -> Result<EngineStatistics, CognitiveError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0609]: no field `health` on type `&quantum_mcts::entanglement::engine::core::QuantumEntanglementEngine`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operations.rs:428:34
    |
428 |         let health_report = self.health.get_latest_health_report()?;
    |                                  ^^^^^^ unknown field
    |
    = note: available fields are: `manager`, `metrics`, `config`, `entanglement_graph`

error[E0609]: no field `entanglement_strength_threshold` on type `quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/pruning.rs:151:42
    |
151 |         let base_threshold = self.config.entanglement_strength_threshold;
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
151 -         let base_threshold = self.config.entanglement_strength_threshold;
151 +         let base_threshold = self.config.entanglement_strength;
    |

error[E0609]: no field `max_concurrent_operations` on type `quantum_mcts::config::core::QuantumMCTSConfig`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:40:26
   |
40 |         optimized_config.max_concurrent_operations = 200;
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `batch_operation_size` on type `quantum_mcts::config::core::QuantumMCTSConfig`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:41:26
   |
41 |         optimized_config.batch_operation_size = 100;
   |                          ^^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `enable_vectorized_operations` on type `quantum_mcts::config::core::QuantumMCTSConfig`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:42:26
   |
42 |         optimized_config.enable_vectorized_operations = true;
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `cache_size_multiplier` on type `quantum_mcts::config::core::QuantumMCTSConfig`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:43:26
   |
43 |         optimized_config.cache_size_multiplier = 4.0;
   |                          ^^^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `prefetch_depth` on type `quantum_mcts::config::core::QuantumMCTSConfig`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:44:26
   |
44 |         optimized_config.prefetch_depth = 3;
   |                          ^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `parallel_execution_threshold` on type `quantum_mcts::config::core::QuantumMCTSConfig`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:45:26
   |
45 |         optimized_config.parallel_execution_threshold = 10;
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `max_concurrent_operations` on type `quantum_mcts::config::core::QuantumMCTSConfig`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:61:26
   |
61 |         optimized_config.max_concurrent_operations = 50;
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `batch_operation_size` on type `quantum_mcts::config::core::QuantumMCTSConfig`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:62:26
   |
62 |         optimized_config.batch_operation_size = 10;
   |                          ^^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `operation_timeout_ms` on type `quantum_mcts::config::core::QuantumMCTSConfig`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:63:26
   |
63 |         optimized_config.operation_timeout_ms = 100;
   |                          ^^^^^^^^^^^^^^^^^^^^ unknown field
   |
help: a field with a similar name exists
   |
63 -         optimized_config.operation_timeout_ms = 100;
63 +         optimized_config.simulation_timeout_ms = 100;
   |

error[E0609]: no field `enable_preemptive_optimization` on type `quantum_mcts::config::core::QuantumMCTSConfig`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:64:26
   |
64 |         optimized_config.enable_preemptive_optimization = true;
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `cache_warmup_enabled` on type `quantum_mcts::config::core::QuantumMCTSConfig`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:65:26
   |
65 |         optimized_config.cache_warmup_enabled = true;
   |                          ^^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `priority_scheduling` on type `quantum_mcts::config::core::QuantumMCTSConfig`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:66:26
   |
66 |         optimized_config.priority_scheduling = true;
   |                          ^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `max_concurrent_operations` on type `quantum_mcts::config::core::QuantumMCTSConfig`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:81:26
   |
81 |         optimized_config.max_concurrent_operations = 20;
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `batch_operation_size` on type `quantum_mcts::config::core::QuantumMCTSConfig`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:82:26
   |
82 |         optimized_config.batch_operation_size = 5;
   |                          ^^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `cache_size_multiplier` on type `quantum_mcts::config::core::QuantumMCTSConfig`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:83:26
   |
83 |         optimized_config.cache_size_multiplier = 0.5;
   |                          ^^^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `enable_memory_pooling` on type `quantum_mcts::config::core::QuantumMCTSConfig`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:84:26
   |
84 |         optimized_config.enable_memory_pooling = true;
   |                          ^^^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `garbage_collection_frequency` on type `quantum_mcts::config::core::QuantumMCTSConfig`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:85:26
   |
85 |         optimized_config.garbage_collection_frequency = 1000;
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `enable_compression` on type `quantum_mcts::config::core::QuantumMCTSConfig`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:86:26
   |
86 |         optimized_config.enable_compression = true;
   |                          ^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `lazy_initialization` on type `quantum_mcts::config::core::QuantumMCTSConfig`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/engine_factory.rs:87:26
   |
87 |         optimized_config.lazy_initialization = true;
   |                          ^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operation_executor.rs:254:13
    |
250 |         self.metrics.record_engine_operation(
    |                      ----------------------- arguments to this method are incorrect
...
254 |             result.performance_improvement,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Option<f64>`, found `f64`
    |
    = note: expected enum `std::option::Option<f64>`
               found type `f64`
note: method defined here
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/mod.rs:328:12
    |
328 |     pub fn record_engine_operation(
    |            ^^^^^^^^^^^^^^^^^^^^^^^
...
333 |         performance_improvement: Option<f64>,
    |         ------------------------------------
help: try wrapping the expression in `Some`
    |
254 |             Some(result.performance_improvement),
    |             +++++                              +

error[E0599]: no method named `record_optimization_metrics` found for struct `std::sync::Arc<quantum_mcts::entanglement::metrics::EntanglementMetrics>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operation_executor.rs:259:30
    |
259 |                 self.metrics.record_optimization_metrics(
    |                 -------------^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: there is a method `record_operations` with a similar name, but with different arguments
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/mod.rs:167:5
    |
167 |     pub fn record_operations(&self, count: u64, total_duration: Duration) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0609]: no field `optimizations_applied` on type `&optimization::OptimizationResult`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operation_executor.rs:261:25
    |
261 |                     opt.optimizations_applied.len(),
    |                         ^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `initial_topology`, `final_topology`, `actions_taken`, `optimization_time_ms`, `entanglements_created` ... and 4 others

error[E0599]: no method named `record_creation_metrics` found for struct `std::sync::Arc<quantum_mcts::entanglement::metrics::EntanglementMetrics>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operation_executor.rs:266:30
    |
266 |                 self.metrics.record_creation_metrics(
    |                 -------------^^^^^^^^^^^^^^^^^^^^^^^
    |
help: there is a method `record_operations` with a similar name, but with different arguments
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/mod.rs:167:5
    |
167 |     pub fn record_operations(&self, count: u64, total_duration: Duration) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `record_pruning_metrics` found for struct `std::sync::Arc<quantum_mcts::entanglement::metrics::EntanglementMetrics>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operation_executor.rs:273:30
    |
273 |                 self.metrics.record_pruning_metrics(
    |                 -------------^^^^^^^^^^^^^^^^^^^^^^ method not found in `std::sync::Arc<quantum_mcts::entanglement::metrics::EntanglementMetrics>`

error[E0609]: no field `entanglements_removed` on type `&quantum_mcts::entanglement::engine::pruning::PruningResult`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operation_executor.rs:274:29
    |
274 |                     pruning.entanglements_removed,
    |                             ^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
274 -                     pruning.entanglements_removed,
274 +                     pruning.entanglements_pruned,
    |

error[E0599]: no method named `record_balancing_metrics` found for struct `std::sync::Arc<quantum_mcts::entanglement::metrics::EntanglementMetrics>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operation_executor.rs:280:30
    |
280 |                 self.metrics.record_balancing_metrics(
    |                 -------------^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `std::sync::Arc<quantum_mcts::entanglement::metrics::EntanglementMetrics>`

error[E0599]: no method named `record_health_metrics` found for struct `std::sync::Arc<quantum_mcts::entanglement::metrics::EntanglementMetrics>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operation_executor.rs:287:30
    |
287 |                 self.metrics.record_health_metrics(
    |                 -------------^^^^^^^^^^^^^^^^^^^^^ method not found in `std::sync::Arc<quantum_mcts::entanglement::metrics::EntanglementMetrics>`

error[E0599]: no method named `record_combined_operation_metrics` found for struct `std::sync::Arc<quantum_mcts::entanglement::metrics::EntanglementMetrics>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/operation_executor.rs:294:30
    |
294 |                 self.metrics.record_combined_operation_metrics(
    |                 -------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: there is a method `record_operations` with a similar name
    |
294 -                 self.metrics.record_combined_operation_metrics(
294 +                 self.metrics.record_operations(
    |

error[E0599]: no associated item named `Critical` found for struct `EngineStatus` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:135:27
    |
135 |             EngineStatus::Critical => {
    |                           ^^^^^^^^ associated item not found in `EngineStatus`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:185:1
    |
185 | pub struct EngineStatus {
    | ----------------------- associated item `Critical` not found for this struct

error[E0599]: no associated item named `Degraded` found for struct `EngineStatus` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:140:27
    |
140 |             EngineStatus::Degraded => {
    |                           ^^^^^^^^ associated item not found in `EngineStatus`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:185:1
    |
185 | pub struct EngineStatus {
    | ----------------------- associated item `Degraded` not found for this struct
    |
help: there is a method `grade` with a similar name
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:205:5
    |
205 |     pub fn grade(&self) -> char {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no associated item named `Good` found for struct `EngineStatus` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:144:27
    |
144 |             EngineStatus::Good => {
    |                           ^^^^ associated item not found in `EngineStatus`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:185:1
    |
185 | pub struct EngineStatus {
    | ----------------------- associated item `Good` not found for this struct

error[E0599]: no associated item named `Optimal` found for struct `EngineStatus` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:147:27
    |
147 |             EngineStatus::Optimal => {
    |                           ^^^^^^^ associated item not found in `EngineStatus`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:185:1
    |
185 | pub struct EngineStatus {
    | ----------------------- associated item `Optimal` not found for this struct

error[E0609]: no field `success_rate` on type `AggregatedMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:178:45
    |
178 |         self.success_rate = metrics_summary.success_rate;
    |                                             ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `total_operations`, `total_errors`, `combined_error_rate`, `peak_throughput`, `average_response_time`, `consistency_score`

error[E0609]: no field `average_operation_time_us` on type `AggregatedMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:179:54
    |
179 |         self.avg_operation_time_us = metrics_summary.average_operation_time_us;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `total_operations`, `total_errors`, `combined_error_rate`, `peak_throughput`, `average_response_time`, `consistency_score`

error[E0609]: no field `cache_hit_rate` on type `AggregatedMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:180:47
    |
180 |         self.cache_hit_rate = metrics_summary.cache_hit_rate;
    |                                               ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `total_operations`, `total_errors`, `combined_error_rate`, `peak_throughput`, `average_response_time`, `consistency_score`

error[E0609]: no field `operations_per_second` on type `AggregatedMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:181:54
    |
181 |         self.operations_per_second = metrics_summary.operations_per_second;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `total_operations`, `total_errors`, `combined_error_rate`, `peak_throughput`, `average_response_time`, `consistency_score`

error[E0599]: no associated item named `Optimal` found for struct `EngineStatus` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:196:27
    |
196 |             EngineStatus::Optimal => "Performance trending upward - excellent".to_string(),
    |                           ^^^^^^^ associated item not found in `EngineStatus`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:185:1
    |
185 | pub struct EngineStatus {
    | ----------------------- associated item `Optimal` not found for this struct

error[E0599]: no associated item named `Good` found for struct `EngineStatus` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:197:27
    |
197 |             EngineStatus::Good => "Performance stable - good".to_string(),
    |                           ^^^^ associated item not found in `EngineStatus`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:185:1
    |
185 | pub struct EngineStatus {
    | ----------------------- associated item `Good` not found for this struct

error[E0599]: no associated item named `Degraded` found for struct `EngineStatus` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:198:27
    |
198 |             EngineStatus::Degraded => "Performance declining - attention needed".to_string(),
    |                           ^^^^^^^^ associated item not found in `EngineStatus`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:185:1
    |
185 | pub struct EngineStatus {
    | ----------------------- associated item `Degraded` not found for this struct
    |
help: there is a method `grade` with a similar name
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:205:5
    |
205 |     pub fn grade(&self) -> char {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no associated item named `Critical` found for struct `EngineStatus` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:199:27
    |
199 |             EngineStatus::Critical => "Performance critical - immediate action required".to_string(),
    |                           ^^^^^^^^ associated item not found in `EngineStatus`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:185:1
    |
185 | pub struct EngineStatus {
    | ----------------------- associated item `Critical` not found for this struct

error[E0599]: no method named `summary` found for struct `std::sync::Arc<quantum_mcts::entanglement::metrics::EntanglementMetrics>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:274:44
    |
274 |         let metrics_summary = self.metrics.summary();
    |                                            ^^^^^^^
    |
help: there is a method `status_summary` with a similar name
    |
274 |         let metrics_summary = self.metrics.status_summary();
    |                                             +++++++

error[E0599]: no associated item named `Optimal` found for struct `EngineStatus` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:277:27
    |
277 |             EngineStatus::Optimal
    |                           ^^^^^^^ associated item not found in `EngineStatus`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:185:1
    |
185 | pub struct EngineStatus {
    | ----------------------- associated item `Optimal` not found for this struct

error[E0599]: no associated item named `Good` found for struct `EngineStatus` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:279:27
    |
279 |             EngineStatus::Good
    |                           ^^^^ associated item not found in `EngineStatus`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:185:1
    |
185 | pub struct EngineStatus {
    | ----------------------- associated item `Good` not found for this struct

error[E0599]: no associated item named `Degraded` found for struct `EngineStatus` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:281:27
    |
281 |             EngineStatus::Degraded
    |                           ^^^^^^^^ associated item not found in `EngineStatus`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:185:1
    |
185 | pub struct EngineStatus {
    | ----------------------- associated item `Degraded` not found for this struct
    |
help: there is a method `grade` with a similar name
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:205:5
    |
205 |     pub fn grade(&self) -> char {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no associated item named `Critical` found for struct `EngineStatus` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:283:27
    |
283 |             EngineStatus::Critical
    |                           ^^^^^^^^ associated item not found in `EngineStatus`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/core.rs:185:1
    |
185 | pub struct EngineStatus {
    | ----------------------- associated item `Critical` not found for this struct

error[E0599]: no method named `performance_summary` found for struct `maintenance_statistics::EngineStatistics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/performance_grading.rs:162:29
    |
162 |             self.statistics.performance_summary(),
    |                             ^^^^^^^^^^^^^^^^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:61:1
    |
61  | pub struct EngineStatistics {
    | --------------------------- method `performance_summary` not found for this struct
    |
help: there is a method `performance_trend` with a similar name
    |
162 -             self.statistics.performance_summary(),
162 +             self.statistics.performance_trend(),
    |

error[E0599]: no function or associated item named `new` found for struct `PerformanceTracker` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/mod.rs:70:63
   |
70 |             performance_tracker: Arc::new(PerformanceTracker::new()),
   |                                                               ^^^ function or associated item not found in `PerformanceTracker`
   |
  ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/tracking.rs:11:1
   |
11 | pub struct PerformanceTracker {
   | ----------------------------- function or associated item `new` not found for this struct
   |
note: if you're trying to build a new `PerformanceTracker` consider using one of the following associated functions:
      PerformanceTracker::start
      PerformanceTracker::start_named
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/tracking.rs:21:5
   |
21 |     pub fn start() -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^
...
30 |     pub fn start_named(operation_name: String) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: items from traits can only be used if the trait is implemented and in scope
   = note: the following traits define an item `new`, perhaps you need to implement one of them:
           candidate #1: `Atomic`
           candidate #2: `Bit`
           candidate #3: `Digest`
           candidate #4: `KeyInit`
           candidate #5: `KeyIvInit`
           candidate #6: `Nullable`
           candidate #7: `UniformSampler`
           candidate #8: `VariableOutput`
           candidate #9: `VariableOutputCore`
           candidate #10: `ahash::HashMapExt`
           candidate #11: `ahash::HashSetExt`
           candidate #12: `aws_lc_rs::aead::BoundKey`
           candidate #13: `ext_sort::chunk::ExternalChunk`
           candidate #14: `itertools::adaptors::coalesce::CountItem`
           candidate #15: `ndarray::DataOwned`
           candidate #16: `ndarray::data_traits::DataOwned`
           candidate #17: `parking_lot_core::thread_parker::ThreadParkerT`
           candidate #18: `petgraph::adj::IndexType`
           candidate #19: `protobuf::message::Message`
           candidate #20: `quick_cache::shard::SharedPlaceholder`
           candidate #21: `quick_cache::shard::SharedPlaceholder`
           candidate #22: `rand::distributions::uniform::UniformSampler`
           candidate #23: `ring::aead::BoundKey`
           candidate #24: `rstar::point::PointExt`
           candidate #25: `serde_with::duplicate_key_impls::error_on_duplicate::PreventDuplicateInsertsMap`
           candidate #26: `serde_with::duplicate_key_impls::error_on_duplicate::PreventDuplicateInsertsSet`
           candidate #27: `serde_with::duplicate_key_impls::first_value_wins::DuplicateInsertsFirstWinsMap`
           candidate #28: `serde_with::duplicate_key_impls::last_value_wins::DuplicateInsertsLastWinsSet`
           candidate #29: `sha2::digest::Mac`
           candidate #30: `spade::triangulation::Triangulation`
           candidate #31: `tendril::tendril::Atomicity`

error[E0599]: no method named `efficiency_score` found for reference `&maintenance_statistics::EngineStatistics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/mod.rs:132:43
    |
132 |         let efficiency_score = statistics.efficiency_score();
    |                                           ^^^^^^^^^^^^^^^^ method not found in `&maintenance_statistics::EngineStatistics`
    |
help: one of the expressions' fields has a method of the same name
    |
132 |         let efficiency_score = statistics.topology.efficiency_score();
    |                                           +++++++++

error[E0599]: no method named `is_urgent` found for reference `&maintenance_statistics::MaintenanceAssessment` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/mod.rs:148:35
    |
148 |         if maintenance_assessment.is_urgent() {
    |                                   ^^^^^^^^^ method not found in `&maintenance_statistics::MaintenanceAssessment`

error[E0609]: no field `required_actions` on type `&maintenance_statistics::MaintenanceAssessment`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/mod.rs:152:47
    |
152 |         for action in &maintenance_assessment.required_actions {
    |                                               ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `priority`, `actions`, `confidence`

error[E0599]: no method named `is_urgent` found for struct `maintenance_statistics::MaintenanceAssessment` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/mod.rs:193:38
    |
193 |         !self.maintenance_assessment.is_urgent()
    |                                      ^^^^^^^^^ method not found in `maintenance_statistics::MaintenanceAssessment`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:20:1
    |
20  | pub struct MaintenanceAssessment {
    | -------------------------------- method `is_urgent` not found for this struct

error[E0599]: no method named `is_urgent` found for struct `maintenance_statistics::MaintenanceAssessment` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/mod.rs:200:37
    |
200 |         self.maintenance_assessment.is_urgent()
    |                                     ^^^^^^^^^ method not found in `maintenance_statistics::MaintenanceAssessment`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:20:1
    |
20  | pub struct MaintenanceAssessment {
    | -------------------------------- method `is_urgent` not found for this struct

error[E0599]: no method named `summary` found for struct `maintenance_statistics::MaintenanceAssessment` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/mod.rs:226:41
    |
226 |             self.maintenance_assessment.summary(),
    |                                         ^^^^^^^ method not found in `maintenance_statistics::MaintenanceAssessment`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:20:1
    |
20  | pub struct MaintenanceAssessment {
    | -------------------------------- method `summary` not found for this struct

error[E0599]: no method named `performance_summary` found for struct `maintenance_statistics::EngineStatistics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/mod.rs:227:29
    |
227 |             self.statistics.performance_summary(),
    |                             ^^^^^^^^^^^^^^^^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/maintenance_statistics.rs:61:1
    |
61  | pub struct EngineStatistics {
    | --------------------------- method `performance_summary` not found for this struct
    |
help: there is a method `performance_trend` with a similar name
    |
227 -             self.statistics.performance_summary(),
227 +             self.statistics.performance_trend(),
    |

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:79:17
    |
79  |         if self.is_sparse() {
    |                 ^^^^^^^^^ multiple `is_sparse` found
    |
note: candidate #1 is defined in an impl for the type `network_topology::NetworkTopology`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:262:5
    |
262 |     pub fn is_sparse(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `network_topology::NetworkTopology`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:45:5
    |
45  |     pub fn is_sparse(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:83:17
    |
83  |         if self.is_overly_dense() {
    |                 ^^^^^^^^^^^^^^^ multiple `is_overly_dense` found
    |
note: candidate #1 is defined in an impl for the type `network_topology::NetworkTopology`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine_operations.rs:257:5
    |
257 |     pub fn is_overly_dense(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `network_topology::NetworkTopology`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/analysis/network_topology.rs:51:5
    |
51  |     pub fn is_overly_dense(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/benchmark_core.rs:93:49
    |
93  |         let avg_duration = Duration::from_nanos(total_duration.as_nanos() / operation_count as u128);
    |                            -------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u64`, found `u128`
    |                            |
    |                            arguments to this function are incorrect
    |
note: associated function defined here
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/time.rs:301:18
    |
301 |     pub const fn from_nanos(nanos: u64) -> Duration {
    |                  ^^^^^^^^^^
help: you can convert a `u128` to a `u64` and panic if the converted value doesn't fit
    |
93  |         let avg_duration = Duration::from_nanos((total_duration.as_nanos() / operation_count as u128).try_into().unwrap());
    |                                                 +                                                   +++++++++++++++++++++

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/benchmark_core.rs:134:34
    |
134 |             Duration::from_nanos(self.total_time.as_nanos() / self.total_operations as u128)
    |             -------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u64`, found `u128`
    |             |
    |             arguments to this function are incorrect
    |
note: associated function defined here
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/time.rs:301:18
    |
301 |     pub const fn from_nanos(nanos: u64) -> Duration {
    |                  ^^^^^^^^^^
help: you can convert a `u128` to a `u64` and panic if the converted value doesn't fit
    |
134 |             Duration::from_nanos((self.total_time.as_nanos() / self.total_operations as u128).try_into().unwrap())
    |                                  +                                                          +++++++++++++++++++++

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/benchmark_core.rs:240:42
    |
240 |                     Duration::from_nanos(self.total_time.as_nanos() / self.total_operations as u128)
    |                     -------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u64`, found `u128`
    |                     |
    |                     arguments to this function are incorrect
    |
note: associated function defined here
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/time.rs:301:18
    |
301 |     pub const fn from_nanos(nanos: u64) -> Duration {
    |                  ^^^^^^^^^^
help: you can convert a `u128` to a `u64` and panic if the converted value doesn't fit
    |
240 |                     Duration::from_nanos((self.total_time.as_nanos() / self.total_operations as u128).try_into().unwrap())
    |                                          +                                                          +++++++++++++++++++++

error[E0599]: no method named `entanglement_count` found for reference `&EntanglementCounters` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/generation.rs:51:43
   |
51 |         let entanglement_count = counters.entanglement_count();
   |                                           ^^^^^^^^^^^^^^^^^^
   |
help: there is a method `entanglements_pruned` with a similar name
   |
51 -         let entanglement_count = counters.entanglement_count();
51 +         let entanglement_count = counters.entanglements_pruned();
   |

error[E0599]: no method named `operation_count` found for reference `&EntanglementCounters` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/generation.rs:52:40
   |
52 |         let operation_count = counters.operation_count();
   |                                        ^^^^^^^^^^^^^^^ method not found in `&EntanglementCounters`

error[E0599]: no method named `influence_calculation_count` found for reference `&EntanglementCounters` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/generation.rs:53:40
   |
53 |         let influence_count = counters.influence_calculation_count();
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: there is a method `influence_calculations` with a similar name
   |
53 -         let influence_count = counters.influence_calculation_count();
53 +         let influence_count = counters.influence_calculations();
   |

error[E0599]: no method named `error_count` found for reference `&EntanglementCounters` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/generation.rs:54:36
   |
54 |         let error_count = counters.error_count();
   |                                    ^^^^^^^^^^^ method not found in `&EntanglementCounters`

error[E0609]: no field `error_count` on type `&BatchStatistics`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/summary.rs:35:37
   |
35 |             error_counts.push(batch.error_count);
   |                                     ^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `batch_name`, `operation_count`, `batch_duration`, `total_operation_time`, `average_operation_time` ... and 3 others

error[E0609]: no field `error_count` on type `&InfluenceStatistics`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/summary.rs:43:41
   |
43 |             error_counts.push(influence.error_count);
   |                                         ^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `calculation_count`, `total_time`, `average_time`, `calculations_per_second`

error[E0609]: no field `average_calculation_time` on type `&InfluenceStatistics`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/summary.rs:44:43
   |
44 |             response_times.push(influence.average_calculation_time);
   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `calculation_count`, `total_time`, `average_time`, `calculations_per_second`

error[E0599]: no method named `total_operations` found for reference `&benchmark_results::BenchmarkResults` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/summary.rs:50:45
   |
50 |             operation_counts.push(benchmark.total_operations());
   |                                             ^^^^^^^^^^^^^^^^-- help: remove the arguments
   |                                             |
   |                                             field, not a method

error[E0599]: no method named `error_count` found for reference `&benchmark_results::BenchmarkResults` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/summary.rs:51:41
   |
51 |             error_counts.push(benchmark.error_count());
   |                                         ^^^^^^^^^^^ method not found in `&benchmark_results::BenchmarkResults`

error[E0599]: no method named `average_response_time` found for reference `&benchmark_results::BenchmarkResults` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/summary.rs:52:43
   |
52 |             response_times.push(benchmark.average_response_time());
   |                                           ^^^^^^^^^^^^^^^^^^^^^ method not found in `&benchmark_results::BenchmarkResults`

error[E0599]: no method named `sample_count` found for reference `&rolling_monitor::RollingStatistics` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/summary.rs:58:43
   |
58 |             operation_counts.push(rolling.sample_count());
   |                                           ^^^^^^^^^^^^ method not found in `&rolling_monitor::RollingStatistics`

error[E0599]: no method named `error_count` found for reference `&rolling_monitor::RollingStatistics` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/summary.rs:59:39
   |
59 |             error_counts.push(rolling.error_count());
   |                                       ^^^^^^^^^^^ method not found in `&rolling_monitor::RollingStatistics`

error[E0599]: no method named `average_sample_time` found for reference `&rolling_monitor::RollingStatistics` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/summary.rs:60:41
   |
60 |             response_times.push(rolling.average_sample_time());
   |                                         ^^^^^^^^^^^^^^^^^^^ method not found in `&rolling_monitor::RollingStatistics`

error[E0624]: associated function `score_to_grade` is private
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/summary.rs:117:35
    |
117 |         let overall_grade = Self::score_to_grade(overall_performance_score);
    |                                   ^^^^^^^^^^^^^^ private associated function
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/generation.rs:221:5
    |
221 |     fn score_to_grade(score: f64) -> char {
    |     ------------------------------------- private associated function defined here

error[E0609]: no field `error_count` on type `&BatchStatistics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/summary.rs:150:37
    |
150 |             error_counts.push(batch.error_count);
    |                                     ^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `batch_name`, `operation_count`, `batch_duration`, `total_operation_time`, `average_operation_time` ... and 3 others

error[E0609]: no field `error_count` on type `&InfluenceStatistics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/summary.rs:158:41
    |
158 |             error_counts.push(influence.error_count);
    |                                         ^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `calculation_count`, `total_time`, `average_time`, `calculations_per_second`

error[E0609]: no field `average_calculation_time` on type `&InfluenceStatistics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/summary.rs:160:43
    |
160 |             response_times.push(influence.average_calculation_time);
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `calculation_count`, `total_time`, `average_time`, `calculations_per_second`

error[E0599]: no method named `total_operations` found for reference `&benchmark_results::BenchmarkResults` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/summary.rs:165:45
    |
165 |             operation_counts.push(benchmark.total_operations());
    |                                             ^^^^^^^^^^^^^^^^-- help: remove the arguments
    |                                             |
    |                                             field, not a method

error[E0599]: no method named `error_count` found for reference `&benchmark_results::BenchmarkResults` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/summary.rs:166:41
    |
166 |             error_counts.push(benchmark.error_count());
    |                                         ^^^^^^^^^^^ method not found in `&benchmark_results::BenchmarkResults`

error[E0599]: no method named `average_response_time` found for reference `&benchmark_results::BenchmarkResults` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/summary.rs:168:43
    |
168 |             response_times.push(benchmark.average_response_time());
    |                                           ^^^^^^^^^^^^^^^^^^^^^ method not found in `&benchmark_results::BenchmarkResults`

error[E0599]: no method named `sample_count` found for reference `&rolling_monitor::RollingStatistics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/summary.rs:173:43
    |
173 |             operation_counts.push(rolling.sample_count());
    |                                           ^^^^^^^^^^^^ method not found in `&rolling_monitor::RollingStatistics`

error[E0599]: no method named `error_count` found for reference `&rolling_monitor::RollingStatistics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/summary.rs:174:39
    |
174 |             error_counts.push(rolling.error_count());
    |                                       ^^^^^^^^^^^ method not found in `&rolling_monitor::RollingStatistics`

error[E0599]: no method named `average_sample_time` found for reference `&rolling_monitor::RollingStatistics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/summary.rs:176:41
    |
176 |             response_times.push(rolling.average_sample_time());
    |                                         ^^^^^^^^^^^^^^^^^^^ method not found in `&rolling_monitor::RollingStatistics`

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/mod.rs:40:44
   |
40 |             reporter: MetricsReporter::new(reporter_name),
   |                       -------------------- ^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`
   |                       |                    |
   |                       |                    expected `String`, found `&str`
   |                       arguments to this function are incorrect
   |
note: associated function defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/generation.rs:27:12
   |
27 |     pub fn new(reporter_name: String) -> Self {
   |            ^^^ ---------------------

error[E0061]: this method takes 2 arguments but 0 arguments were supplied
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/mod.rs:46:23
   |
46 |         self.reporter.generate_report()
   |                       ^^^^^^^^^^^^^^^-- two arguments are missing
   |
note: method defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/generation.rs:42:12
   |
42 |     pub fn generate_report(
   |            ^^^^^^^^^^^^^^^
43 |         &mut self,
44 |         counters: &EntanglementCounters,
   |         -------------------------------
45 |         calculations: &PerformanceCalculations,
   |         --------------------------------------
help: provide the arguments
   |
46 |         self.reporter.generate_report(/* &EntanglementCounters */, /* calculations */)
   |                                       +++++++++++++++++++++++++++++++++++++++++++++++

error[E0061]: this method takes 4 arguments but 3 arguments were supplied
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/mod.rs:51:23
   |
51 |         self.reporter.generate_summary_report(None, None, reports)
   |                       ^^^^^^^^^^^^^^^^^^^^^^^--------------------- argument #4 of type `std::option::Option<&rolling_monitor::RollingStatistics>` is missing
   |
note: expected `Option<&BenchmarkResults>`, found `&[MetricsReport]`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/mod.rs:51:59
   |
51 |         self.reporter.generate_summary_report(None, None, reports)
   |                                                           ^^^^^^^
   = note:   expected enum `std::option::Option<&benchmark_results::BenchmarkResults>`
           found reference `&[MetricsReport]`
note: method defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/summary.rs:14:12
   |
14 |     pub fn generate_summary_report(
   |            ^^^^^^^^^^^^^^^^^^^^^^^
...
18 |         benchmark_results: Option<&BenchmarkResults>,
   |         --------------------------------------------
19 |         rolling_stats: Option<&RollingStatistics>,
   |         -----------------------------------------
help: provide the argument
   |
51 -         self.reporter.generate_summary_report(None, None, reports)
51 +         self.reporter.generate_summary_report(None, None, /* std::option::Option<&benchmark_results::BenchmarkResults> */, /* std::option::Option<&rolling_monitor::RollingStatistics> */)
   |

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/rolling_monitor.rs:59:53
    |
59  |         let average_duration = Duration::from_nanos(total_time.as_nanos() / self.samples.len() as u128);
    |                                -------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u64`, found `u128`
    |                                |
    |                                arguments to this function are incorrect
    |
note: associated function defined here
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/time.rs:301:18
    |
301 |     pub const fn from_nanos(nanos: u64) -> Duration {
    |                  ^^^^^^^^^^
help: you can convert a `u128` to a `u64` and panic if the converted value doesn't fit
    |
59  |         let average_duration = Duration::from_nanos((total_time.as_nanos() / self.samples.len() as u128).try_into().unwrap());
    |                                                     +                                                  +++++++++++++++++++++

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/rolling_monitor.rs:121:13
    |
120 |         let first_avg = Duration::from_nanos(
    |                         -------------------- arguments to this function are incorrect
121 |             first_half.iter().map(|d| d.as_nanos()).sum::<u128>() / first_half.len() as u128
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u64`, found `u128`
    |
note: associated function defined here
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/time.rs:301:18
    |
301 |     pub const fn from_nanos(nanos: u64) -> Duration {
    |                  ^^^^^^^^^^
help: you can convert a `u128` to a `u64` and panic if the converted value doesn't fit
    |
121 |             (first_half.iter().map(|d| d.as_nanos()).sum::<u128>() / first_half.len() as u128).try_into().unwrap()
    |             +                                                                                +++++++++++++++++++++

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/rolling_monitor.rs:124:13
    |
123 |         let second_avg = Duration::from_nanos(
    |                          -------------------- arguments to this function are incorrect
124 |             second_half.iter().map(|d| d.as_nanos()).sum::<u128>() / second_half.len() as u128
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u64`, found `u128`
    |
note: associated function defined here
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/time.rs:301:18
    |
301 |     pub const fn from_nanos(nanos: u64) -> Duration {
    |                  ^^^^^^^^^^
help: you can convert a `u128` to a `u64` and panic if the converted value doesn't fit
    |
124 |             (second_half.iter().map(|d| d.as_nanos()).sum::<u128>() / second_half.len() as u128).try_into().unwrap()
    |             +                                                                                  +++++++++++++++++++++

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/rolling_monitor.rs:186:34
    |
186 |             Duration::from_nanos(total.as_nanos() / self.samples.len() as u128)
    |             -------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u64`, found `u128`
    |             |
    |             arguments to this function are incorrect
    |
note: associated function defined here
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/time.rs:301:18
    |
301 |     pub const fn from_nanos(nanos: u64) -> Duration {
    |                  ^^^^^^^^^^
help: you can convert a `u128` to a `u64` and panic if the converted value doesn't fit
    |
186 |             Duration::from_nanos((total.as_nanos() / self.samples.len() as u128).try_into().unwrap())
    |                                  +                                             +++++++++++++++++++++

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/rolling_monitor.rs:270:17
    |
269 |             let total_operation_time = Duration::from_nanos(
    |                                        -------------------- arguments to this function are incorrect
270 |                 self.average_duration.as_nanos() * self.window_size as u128
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u64`, found `u128`
    |
note: associated function defined here
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/time.rs:301:18
    |
301 |     pub const fn from_nanos(nanos: u64) -> Duration {
    |                  ^^^^^^^^^^
help: you can convert a `u128` to a `u64` and panic if the converted value doesn't fit
    |
270 |                 (self.average_duration.as_nanos() * self.window_size as u128).try_into().unwrap()
    |                 +                                                           +++++++++++++++++++++

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/tracking.rs:209:53
    |
209 |             let avg_duration = Duration::from_nanos(total_duration.as_nanos() / count as u128);
    |                                -------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u64`, found `u128`
    |                                |
    |                                arguments to this function are incorrect
    |
note: associated function defined here
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/time.rs:301:18
    |
301 |     pub const fn from_nanos(nanos: u64) -> Duration {
    |                  ^^^^^^^^^^
help: you can convert a `u128` to a `u64` and panic if the converted value doesn't fit
    |
209 |             let avg_duration = Duration::from_nanos((total_duration.as_nanos() / count as u128).try_into().unwrap());
    |                                                     +                                         +++++++++++++++++++++

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/tracking.rs:230:34
    |
230 |             Duration::from_nanos(self.total_operation_time.as_nanos() / self.operation_count as u128)
    |             -------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u64`, found `u128`
    |             |
    |             arguments to this function are incorrect
    |
note: associated function defined here
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/time.rs:301:18
    |
301 |     pub const fn from_nanos(nanos: u64) -> Duration {
    |                  ^^^^^^^^^^
help: you can convert a `u128` to a `u64` and panic if the converted value doesn't fit
    |
230 |             Duration::from_nanos((self.total_operation_time.as_nanos() / self.operation_count as u128).try_into().unwrap())
    |                                  +                                                                   +++++++++++++++++++++

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/tracking.rs:541:38
    |
541 |                 Duration::from_nanos(elapsed.as_nanos() / self.calculation_count as u128)
    |                 -------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u64`, found `u128`
    |                 |
    |                 arguments to this function are incorrect
    |
note: associated function defined here
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/time.rs:301:18
    |
301 |     pub const fn from_nanos(nanos: u64) -> Duration {
    |                  ^^^^^^^^^^
help: you can convert a `u128` to a `u64` and panic if the converted value doesn't fit
    |
541 |                 Duration::from_nanos((elapsed.as_nanos() / self.calculation_count as u128).try_into().unwrap())
    |                                      +                                                   +++++++++++++++++++++

error[E0599]: no method named `record_entanglement` found for struct `std::sync::Arc<EntanglementCounters>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/mod.rs:151:23
    |
151 |         self.counters.record_entanglement();
    |                       ^^^^^^^^^^^^^^^^^^^
    |
help: there is a method `record_entanglement_created` with a similar name
    |
151 |         self.counters.record_entanglement_created();
    |                                          ++++++++

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/mod.rs:171:53
    |
171 |             let avg_duration = Duration::from_nanos(total_duration.as_nanos() / count as u128);
    |                                -------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u64`, found `u128`
    |                                |
    |                                arguments to this function are incorrect
    |
note: associated function defined here
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/time.rs:301:18
    |
301 |     pub const fn from_nanos(nanos: u64) -> Duration {
    |                  ^^^^^^^^^^
help: you can convert a `u128` to a `u64` and panic if the converted value doesn't fit
    |
171 |             let avg_duration = Duration::from_nanos((total_duration.as_nanos() / count as u128).try_into().unwrap());
    |                                                     +                                         +++++++++++++++++++++

error[E0599]: no method named `record_error` found for struct `std::sync::Arc<EntanglementCounters>` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/mod.rs:195:23
    |
195 |         self.counters.record_error();
    |                       ^^^^^^^^^^^^ method not found in `std::sync::Arc<EntanglementCounters>`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `record_error`, perhaps you need to implement it:
            candidate #1: `Visit`

error[E0599]: no method named `description` found for enum `reporting::types::PerformanceTrend` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/mod.rs:450:38
    |
450 |             self.performance_trend().description(),
    |                                      ^^^^^^^^^^^ method not found in `reporting::types::PerformanceTrend`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/reporting/types.rs:164:1
    |
164 | pub enum PerformanceTrend {
    | ------------------------- method `description` not found for this enum
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `description`, perhaps you need to implement one of them:
            candidate #1: `StdError`
            candidate #2: `async_graphql::base::Description`

error[E0061]: this function takes 1 argument but 0 arguments were supplied
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:46:22
   |
46 |             metrics: EntanglementMetrics::new(),
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^-- argument #1 of type `std::string::String` is missing
   |
note: associated function defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/mod.rs:76:12
   |
76 |     pub fn new(system_name: String) -> Self {
   |            ^^^ -------------------
help: provide the argument
   |
46 |             metrics: EntanglementMetrics::new(/* std::string::String */),
   |                                               +++++++++++++++++++++++++

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:191:49
    |
191 |         let amplitude_product = node1.amplitude.norm() * node2.amplitude.norm();
    |                                                 ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:191:74
    |
191 |         let amplitude_product = node1.amplitude.norm() * node2.amplitude.norm();
    |                                                                          ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no variant or associated item named `Strong` found for enum `quantum::types::EntanglementType` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:257:31
    |
257 |             EntanglementType::Strong // Sibling nodes have strong entanglement
    |                               ^^^^^^ variant or associated item not found in `quantum::types::EntanglementType`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/types.rs:123:1
    |
123 | pub enum EntanglementType {
    | ------------------------- variant or associated item `Strong` not found for this enum

error[E0599]: no variant or associated item named `Medium` found for enum `quantum::types::EntanglementType` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:259:31
    |
259 |             EntanglementType::Medium // Ancestor-descendant relationship
    |                               ^^^^^^ variant or associated item not found in `quantum::types::EntanglementType`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/types.rs:123:1
    |
123 | pub enum EntanglementType {
    | ------------------------- variant or associated item `Medium` not found for this enum

error[E0599]: no variant or associated item named `Weak` found for enum `quantum::types::EntanglementType` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:261:31
    |
261 |             EntanglementType::Weak // Distant relationship
    |                               ^^^^ variant or associated item not found in `quantum::types::EntanglementType`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/types.rs:123:1
    |
123 | pub enum EntanglementType {
    | ------------------------- variant or associated item `Weak` not found for this enum

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:265:49
    |
265 |         let amplitude_factor = (node1.amplitude.norm() * node2.amplitude.norm()).sqrt();
    |                                                 ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:265:74
    |
265 |         let amplitude_factor = (node1.amplitude.norm() * node2.amplitude.norm()).sqrt();
    |                                                                          ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no variant or associated item named `Strong` found for enum `quantum::types::EntanglementType` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:276:31
    |
276 |             EntanglementType::Strong => base_strength * 1.0,
    |                               ^^^^^^ variant or associated item not found in `quantum::types::EntanglementType`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/types.rs:123:1
    |
123 | pub enum EntanglementType {
    | ------------------------- variant or associated item `Strong` not found for this enum

error[E0599]: no variant or associated item named `Medium` found for enum `quantum::types::EntanglementType` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:277:31
    |
277 |             EntanglementType::Medium => base_strength * 0.8,
    |                               ^^^^^^ variant or associated item not found in `quantum::types::EntanglementType`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/types.rs:123:1
    |
123 | pub enum EntanglementType {
    | ------------------------- variant or associated item `Medium` not found for this enum

error[E0599]: no variant or associated item named `Weak` found for enum `quantum::types::EntanglementType` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:278:31
    |
278 |             EntanglementType::Weak => base_strength * 0.6,
    |                               ^^^^ variant or associated item not found in `quantum::types::EntanglementType`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/types.rs:123:1
    |
123 | pub enum EntanglementType {
    | ------------------------- variant or associated item `Weak` not found for this enum

error[E0061]: this function takes 1 argument but 0 arguments were supplied
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:374:24
    |
374 |         self.metrics = EntanglementMetrics::new();
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^-- argument #1 of type `std::string::String` is missing
    |
note: associated function defined here
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/mod.rs:76:12
    |
76  |     pub fn new(system_name: String) -> Self {
    |            ^^^ -------------------
help: provide the argument
    |
374 |         self.metrics = EntanglementMetrics::new(/* std::string::String */);
    |                                                 +++++++++++++++++++++++++

error[E0609]: no field `entanglement_operations` on type `quantum_mcts::entanglement::metrics::EntanglementMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:436:25
    |
436 |         if self.metrics.entanglement_operations == 0 {
    |                         ^^^^^^^^^^^^^^^^^^^^^^^ unknown field

error[E0609]: no field `entanglements_created` on type `quantum_mcts::entanglement::metrics::EntanglementMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:440:22
    |
440 |         self.metrics.entanglements_created as f64 / self.metrics.entanglement_operations as f64
    |                      ^^^^^^^^^^^^^^^^^^^^^ unknown field

error[E0609]: no field `entanglement_operations` on type `quantum_mcts::entanglement::metrics::EntanglementMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:440:66
    |
440 |         self.metrics.entanglements_created as f64 / self.metrics.entanglement_operations as f64
    |                                                                  ^^^^^^^^^^^^^^^^^^^^^^^ unknown field

error[E0615]: attempted to take value of method `performance_score` on type `&node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/evaluation.rs:225:24
    |
225 |         score += state.performance_score * 0.3;
    |                        ^^^^^^^^^^^^^^^^^ method, not a field
    |
help: use parentheses to call the method
    |
225 |         score += state.performance_score() * 0.3;
    |                                         ++

error[E0609]: no field `memory_usage` on type `&node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/evaluation.rs:229:40
    |
229 |         let memory_score = 1.0 - state.memory_usage.clamp(0.0, 1.0);
    |                                        ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `complexity_score` on type `&node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/evaluation.rs:234:51
    |
234 |         let complexity_score = 1.0 / (1.0 + state.complexity_score / 10.0);
    |                                                   ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `parallelism_potential` on type `&node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/evaluation.rs:239:24
    |
239 |         score += state.parallelism_potential * 0.15;
    |                        ^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `cache_efficiency` on type `&node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/evaluation.rs:243:24
    |
243 |         score += state.cache_efficiency * 0.15;
    |                        ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0599]: no method named `coherence` found for reference `&SuperpositionState` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/evaluation.rs:260:39
    |
260 |         let coherence = superposition.coherence()
    |                                       ^^^^^^^^^
    |
help: there is a method `apply_decoherence` with a similar name, but with different arguments
   --> packages/sweetmcp-memory/src/cognitive/quantum/state.rs:99:5
    |
99  |     pub fn apply_decoherence(&mut self, elapsed: Duration) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `QuantumError` found for enum `cognitive::types::CognitiveError` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/evaluation.rs:261:42
    |
261 |             .map_err(|e| CognitiveError::QuantumError(format!("Coherence calculation failed: {}", e)))?;
    |                                          ^^^^^^^^^^^^ variant or associated item not found in `cognitive::types::CognitiveError`
    |
   ::: packages/sweetmcp-memory/src/cognitive/types.rs:233:1
    |
233 | pub enum CognitiveError {
    | ----------------------- variant or associated item `QuantumError` not found for this enum

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/evaluation.rs:264:45
    |
264 |         let amplitude_magnitude = amplitude.norm();
    |                                             ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `entanglement_entropy` found for reference `&SuperpositionState` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/evaluation.rs:267:42
    |
267 |         let entanglement = superposition.entanglement_entropy()
    |                                          ^^^^^^^^^^^^^^^^^^^^ method not found in `&SuperpositionState`

error[E0599]: no variant or associated item named `QuantumError` found for enum `cognitive::types::CognitiveError` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/evaluation.rs:268:42
    |
268 |             .map_err(|e| CognitiveError::QuantumError(format!("Entanglement entropy failed: {}", e)))?;
    |                                          ^^^^^^^^^^^^ variant or associated item not found in `cognitive::types::CognitiveError`
    |
   ::: packages/sweetmcp-memory/src/cognitive/types.rs:233:1
    |
233 | pub enum CognitiveError {
    | ----------------------- variant or associated item `QuantumError` not found for this enum

error[E0615]: attempted to take value of method `performance_score` on type `&node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/evaluation.rs:279:42
    |
279 |         let base_potential = 1.0 - state.performance_score;
    |                                          ^^^^^^^^^^^^^^^^^ method, not a field
    |
help: use parentheses to call the method
    |
279 |         let base_potential = 1.0 - state.performance_score();
    |                                                           ++

error[E0609]: no field `complexity_score` on type `&node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/evaluation.rs:282:44
    |
282 |         let optimization_factor = if state.complexity_score > 10.0 {
    |                                            ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `memory_usage` on type `&node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/evaluation.rs:284:25
    |
284 |         } else if state.memory_usage > 0.8 {
    |                         ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0689]: can't call method `clamp` on ambiguous numeric type `{float}`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/evaluation.rs:290:48
    |
290 |         (base_potential * optimization_factor).clamp(0.0, 1.0)
    |                                                ^^^^^

error[E0609]: no field `memory_usage` on type `&node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/evaluation.rs:296:36
    |
296 |         let base_potential = state.memory_usage;
    |                                    ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `functions` on type `&node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/evaluation.rs:299:42
    |
299 |         let allocation_factor = if state.functions.len() > 20 {
    |                                          ^^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `parallelism_potential` on type `&node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/evaluation.rs:311:36
    |
311 |         let base_potential = state.parallelism_potential;
    |                                    ^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `complexity_score` on type `&node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/evaluation.rs:314:41
    |
314 |         let complexity_boost = if state.complexity_score > 15.0 {
    |                                         ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `complexity_score` on type `&node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/evaluation.rs:316:25
    |
316 |         } else if state.complexity_score > 10.0 {
    |                         ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0599]: no method named `coherence` found for reference `&SuperpositionState` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/evaluation.rs:332:39
    |
332 |         let coherence = superposition.coherence()
    |                                       ^^^^^^^^^
    |
help: there is a method `apply_decoherence` with a similar name, but with different arguments
   --> packages/sweetmcp-memory/src/cognitive/quantum/state.rs:99:5
    |
99  |     pub fn apply_decoherence(&mut self, elapsed: Duration) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `QuantumError` found for enum `cognitive::types::CognitiveError` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/evaluation.rs:333:42
    |
333 |             .map_err(|e| CognitiveError::QuantumError(format!("Coherence calculation failed: {}", e)))?;
    |                                          ^^^^^^^^^^^^ variant or associated item not found in `cognitive::types::CognitiveError`
    |
   ::: packages/sweetmcp-memory/src/cognitive/types.rs:233:1
    |
233 | pub enum CognitiveError {
    | ----------------------- variant or associated item `QuantumError` not found for this enum

error[E0599]: no method named `arg` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/evaluation.rs:336:38
    |
336 |         let phase_factor = amplitude.arg().abs() / std::f64::consts::PI;
    |                                      ^^^ method not found in `Complex64`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `arg` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `arg`, perhaps you need to implement it:
            candidate #1: `num_complex::complex_float::ComplexFloat`

error[E0599]: no method named `dimension` found for reference `&SuperpositionState` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/evaluation.rs:339:47
    |
339 |         let dimension_factor = (superposition.dimension() as f64).ln() / 4.0; // Logarithmic scaling
    |                                               ^^^^^^^^^ method not found in `&SuperpositionState`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `EmbeddingModel` defines an item `dimension`, perhaps you need to implement it
   --> packages/sweetmcp-memory/src/vector/embedding_model.rs:10:1
    |
10  | pub trait EmbeddingModel: Send + Sync {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0609]: no field `complexity_score` on type `&node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/evaluation.rs:349:55
    |
349 |             complexity_reduction: (1.0 / (1.0 + state.complexity_score / 20.0)).clamp(0.0, 1.0),
    |                                                       ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0689]: can't call method `clamp` on ambiguous numeric type `{float}`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/evaluation.rs:349:81
    |
349 |             complexity_reduction: (1.0 / (1.0 + state.complexity_score / 20.0)).clamp(0.0, 1.0),
    |                                                                                 ^^^^^

error[E0615]: attempted to take value of method `performance_score` on type `&node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/evaluation.rs:350:36
    |
350 |             maintainability: state.performance_score * 0.8 + (1.0 - state.memory_usage) * 0.2,
    |                                    ^^^^^^^^^^^^^^^^^ method, not a field
    |
help: use parentheses to call the method
    |
350 |             maintainability: state.performance_score() * 0.8 + (1.0 - state.memory_usage) * 0.2,
    |                                                     ++

error[E0609]: no field `memory_usage` on type `&node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/evaluation.rs:350:75
    |
350 |             maintainability: state.performance_score * 0.8 + (1.0 - state.memory_usage) * 0.2,
    |                                                                           ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `reliability_score` on type `&node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/evaluation.rs:351:32
    |
351 |             reliability: state.reliability_score,
    |                                ^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `functions` on type `&node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/evaluation.rs:352:35
    |
352 |             testability: if state.functions.len() > 0 {
    |                                   ^^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `functions` on type `&node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/evaluation.rs:353:36
    |
353 |                 1.0 / (1.0 + state.functions.len() as f64 / 10.0)
    |                                    ^^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0061]: this function takes 4 arguments but 0 arguments were supplied
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/node_creation.rs:50:33
   |
50 |             committee: Arc::new(EvaluationCommittee::new()),
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^-- multiple arguments are missing
   |
note: associated function defined here
  --> packages/sweetmcp-memory/src/cognitive/committee/consensus/committee.rs:51:12
   |
51 |     pub fn new(
   |            ^^^
52 |         agents: Vec<CommitteeAgent>,
   |         ---------------------------
53 |         consensus_threshold: f64,
   |         ------------------------
54 |         max_concurrent: usize,
   |         ---------------------
55 |         event_tx: mpsc::UnboundedSender<CommitteeEvent>,
   |         -----------------------------------------------
help: provide the arguments
   |
50 |             committee: Arc::new(EvaluationCommittee::new(/* Vec<agents::CommitteeAgent> */, /* f64 */, /* usize */, /* tokio::sync::mpsc::UnboundedSender<CommitteeEvent> */)),
   |                                                          +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/node_creation.rs:130:13
    |
125 |         let mut child_node = QuantumMCTSNode::new(
    |                              -------------------- arguments to this function are incorrect
...
130 |             improvement_depth,
    |             ^^^^^^^^^^^^^^^^^ expected `u32`, found `usize`
    |
note: associated function defined here
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/node_state/node.rs:41:12
    |
41  |     pub fn new(
    |            ^^^
...
46  |         improvement_depth: u32,
    |         ----------------------
help: you can convert a `usize` to a `u32` and panic if the converted value doesn't fit
    |
130 |             improvement_depth.try_into().unwrap(),
    |                              ++++++++++++++++++++

error[E0599]: no function or associated item named `uniform` found for struct `SuperpositionState` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/node_creation.rs:147:49
    |
147 |         let superposition = SuperpositionState::uniform(dimension)
    |                                                 ^^^^^^^ function or associated item not found in `SuperpositionState`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/state.rs:10:1
    |
10  | pub struct SuperpositionState {
    | ----------------------------- function or associated item `uniform` not found for this struct
    |
note: if you're trying to build a new `SuperpositionState`, consider using `SuperpositionState::new` which returns `SuperpositionState`
   --> packages/sweetmcp-memory/src/cognitive/quantum/state.rs:40:5
    |
40  |     pub fn new(coherence_time: Duration) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `QuantumError` found for enum `cognitive::types::CognitiveError` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/node_creation.rs:148:42
    |
148 |             .map_err(|e| CognitiveError::QuantumError(format!("Failed to create superposition: {}", e)))?;
    |                                          ^^^^^^^^^^^^ variant or associated item not found in `cognitive::types::CognitiveError`
    |
   ::: packages/sweetmcp-memory/src/cognitive/types.rs:233:1
    |
233 | pub enum CognitiveError {
    | ----------------------- variant or associated item `QuantumError` not found for this enum

error[E0560]: struct `quantum_mcts::node_state::core::QuantumNodeState` has no field named `entanglement_map`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/node_creation.rs:159:13
    |
159 |             entanglement_map,
    |             ^^^^^^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
159 -             entanglement_map,
159 +             entanglements,
    |

error[E0609]: no field `complexity_score` on type `&node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/node_creation.rs:166:40
    |
166 |         let complexity_factor = (state.complexity_score / 10.0).ceil() as usize;
    |                                        ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `functions` on type `&node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/node_creation.rs:167:38
    |
167 |         let function_factor = (state.functions.len() / 5).max(1);
    |                                      ^^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0599]: no method named `apply_bias` found for struct `SuperpositionState` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/node_creation.rs:183:23
    |
183 |         superposition.apply_bias(&bias_vector)
    |                       ^^^^^^^^^^ method not found in `SuperpositionState`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/state.rs:10:1
    |
10  | pub struct SuperpositionState {
    | ----------------------------- method `apply_bias` not found for this struct

error[E0599]: no variant or associated item named `QuantumError` found for enum `cognitive::types::CognitiveError` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/node_creation.rs:184:42
    |
184 |             .map_err(|e| CognitiveError::QuantumError(format!("Failed to apply objective bias: {}", e)))?;
    |                                          ^^^^^^^^^^^^ variant or associated item not found in `cognitive::types::CognitiveError`
    |
   ::: packages/sweetmcp-memory/src/cognitive/types.rs:233:1
    |
233 | pub enum CognitiveError {
    | ----------------------- variant or associated item `QuantumError` not found for this enum

error[E0609]: no field `functions` on type `&node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/node_creation.rs:272:18
    |
272 |         if state.functions.len() > 10 {
    |                  ^^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `complexity_score` on type `&node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/node_creation.rs:276:18
    |
276 |         if state.complexity_score > 15.0 {
    |                  ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0615]: attempted to take value of method `performance_score` on type `&node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/node_creation.rs:280:18
    |
280 |         if state.performance_score < 0.7 {
    |                  ^^^^^^^^^^^^^^^^^ method, not a field
    |
help: use parentheses to call the method
    |
280 |         if state.performance_score() < 0.7 {
    |                                   ++

error[E0615]: attempted to take value of method `performance_score` on type `&node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/node_creation.rs:291:18
    |
291 |         if state.performance_score < 0.8 {
    |                  ^^^^^^^^^^^^^^^^^ method, not a field
    |
help: use parentheses to call the method
    |
291 |         if state.performance_score() < 0.8 {
    |                                   ++

error[E0609]: no field `memory_usage` on type `&node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/node_creation.rs:302:18
    |
302 |         if state.memory_usage > 0.7 {
    |                  ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `parallelism_potential` on type `&node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/node_creation.rs:312:18
    |
312 |         if state.parallelism_potential > 0.5 {
    |                  ^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `entanglement_map` on type `&quantum_mcts::node_state::core::QuantumNodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/node_creation.rs:345:49
    |
345 |         let new_entanglement_map = parent_state.entanglement_map.clone();
    |                                                 ^^^^^^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
345 -         let new_entanglement_map = parent_state.entanglement_map.clone();
345 +         let new_entanglement_map = parent_state.entanglements.clone();
    |

error[E0615]: attempted to take value of method `performance_score` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/node_creation.rs:350:37
    |
350 |                 new_classical_state.performance_score *= 1.1;
    |                                     ^^^^^^^^^^^^^^^^^ method, not a field
    |
    = help: methods are immutable and cannot be assigned to

error[E0609]: no field `complexity_score` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/node_creation.rs:351:37
    |
351 |                 new_classical_state.complexity_score *= 0.95;
    |                                     ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `memory_usage` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/node_creation.rs:354:37
    |
354 |                 new_classical_state.memory_usage *= 0.9;
    |                                     ^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0615]: attempted to take value of method `performance_score` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/node_creation.rs:355:37
    |
355 |                 new_classical_state.performance_score *= 1.05;
    |                                     ^^^^^^^^^^^^^^^^^ method, not a field
    |
    = help: methods are immutable and cannot be assigned to

error[E0615]: attempted to take value of method `performance_score` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/node_creation.rs:358:37
    |
358 |                 new_classical_state.performance_score *= 1.08;
    |                                     ^^^^^^^^^^^^^^^^^ method, not a field
    |
    = help: methods are immutable and cannot be assigned to

error[E0609]: no field `cache_efficiency` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/node_creation.rs:359:37
    |
359 |                 new_classical_state.cache_efficiency *= 1.15;
    |                                     ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `parallelism_potential` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/node_creation.rs:362:37
    |
362 |                 new_classical_state.parallelism_potential *= 1.2;
    |                                     ^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0615]: attempted to take value of method `performance_score` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/node_creation.rs:363:37
    |
363 |                 new_classical_state.performance_score *= 1.15;
    |                                     ^^^^^^^^^^^^^^^^^ method, not a field
    |
    = help: methods are immutable and cannot be assigned to

error[E0599]: no method named `evolve_phase` found for struct `SuperpositionState` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/node_creation.rs:367:55
    |
367 |                 new_superposition = new_superposition.evolve_phase(0.1)
    |                                                       ^^^^^^^^^^^^ method not found in `SuperpositionState`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/state.rs:10:1
    |
10  | pub struct SuperpositionState {
    | ----------------------------- method `evolve_phase` not found for this struct

error[E0599]: no variant or associated item named `QuantumError` found for enum `cognitive::types::CognitiveError` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/node_creation.rs:368:50
    |
368 |                     .map_err(|e| CognitiveError::QuantumError(format!("Phase evolution failed: {}", e)))?;
    |                                                  ^^^^^^^^^^^^ variant or associated item not found in `cognitive::types::CognitiveError`
    |
   ::: packages/sweetmcp-memory/src/cognitive/types.rs:233:1
    |
233 | pub enum CognitiveError {
    | ----------------------- variant or associated item `QuantumError` not found for this enum

error[E0599]: no method named `create_entanglement` found for struct `SuperpositionState` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/node_creation.rs:372:55
    |
372 |                 new_superposition = new_superposition.create_entanglement(vec![0, 1])
    |                                                       ^^^^^^^^^^^^^^^^^^^ method not found in `SuperpositionState`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/state.rs:10:1
    |
10  | pub struct SuperpositionState {
    | ----------------------------- method `create_entanglement` not found for this struct

error[E0599]: no variant or associated item named `QuantumError` found for enum `cognitive::types::CognitiveError` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/node_creation.rs:373:50
    |
373 |                     .map_err(|e| CognitiveError::QuantumError(format!("Entanglement creation failed: {}", e)))?;
    |                                                  ^^^^^^^^^^^^ variant or associated item not found in `cognitive::types::CognitiveError`
    |
   ::: packages/sweetmcp-memory/src/cognitive/types.rs:233:1
    |
233 | pub enum CognitiveError {
    | ----------------------- variant or associated item `QuantumError` not found for this enum

error[E0599]: no method named `amplify_amplitudes` found for struct `SuperpositionState` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/node_creation.rs:377:55
    |
377 |                 new_superposition = new_superposition.amplify_amplitudes(1.1)
    |                                                       ^^^^^^^^^^^^^^^^^^ method not found in `SuperpositionState`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/state.rs:10:1
    |
10  | pub struct SuperpositionState {
    | ----------------------------- method `amplify_amplitudes` not found for this struct

error[E0599]: no variant or associated item named `QuantumError` found for enum `cognitive::types::CognitiveError` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/node_creation.rs:378:50
    |
378 |                     .map_err(|e| CognitiveError::QuantumError(format!("Amplitude amplification failed: {}", e)))?;
    |                                                  ^^^^^^^^^^^^ variant or associated item not found in `cognitive::types::CognitiveError`
    |
   ::: packages/sweetmcp-memory/src/cognitive/types.rs:233:1
    |
233 | pub enum CognitiveError {
    | ----------------------- variant or associated item `QuantumError` not found for this enum

error[E0609]: no field `complexity_score` on type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/node_creation.rs:382:37
    |
382 |                 new_classical_state.complexity_score *= 0.98;
    |                                     ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0560]: struct `quantum_mcts::node_state::core::QuantumNodeState` has no field named `entanglement_map`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/node_creation.rs:389:13
    |
389 |             entanglement_map: new_entanglement_map,
    |             ^^^^^^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
389 -             entanglement_map: new_entanglement_map,
389 +             entanglements: new_entanglement_map,
    |

error[E0599]: no method named `reset_for_reuse` found for struct `quantum_mcts::node_state::node::QuantumMCTSNode` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/node_creation.rs:402:18
    |
402 |             node.reset_for_reuse();
    |                  ^^^^^^^^^^^^^^^ method not found in `quantum_mcts::node_state::node::QuantumMCTSNode`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/node_state/node.rs:13:1
    |
13  | pub struct QuantumMCTSNode {
    | -------------------------- method `reset_for_reuse` not found for this struct

error[E0599]: no function or associated item named `default` found for struct `node_types::CodeState` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/node_creation.rs:410:42
    |
410 |             let dummy_state = CodeState::default();
    |                                          ^^^^^^^ function or associated item not found in `node_types::CodeState`
    |
   ::: packages/sweetmcp-memory/src/cognitive/mcts/types/node_types.rs:11:1
    |
11  | pub struct CodeState {
    | -------------------- function or associated item `default` not found for this struct
    |
note: if you're trying to build a new `node_types::CodeState`, consider using `node_types::CodeState::new` which returns `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/types/node_types.rs:21:5
    |
21  |     pub fn new(code: String, latency: f64, memory: f64, relevance: f64) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `default`, perhaps you need to implement one of them:
            candidate #1: `std::default::Default`
            candidate #2: `tinyvec::array::Array`

error[E0599]: no method named `unwrap_or` found for type `usize` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/pruning.rs:114:49
    |
114 |             max_tree_size: config.max_tree_size.unwrap_or(10000),
    |                                                 ^^^^^^^^^ method not found in `usize`

error[E0609]: no field `min_visits_for_pruning` on type `quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/pruning.rs:115:42
    |
115 |             min_visits_threshold: config.min_visits_for_pruning.unwrap_or(5),
    |                                          ^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `amplitude_pruning_threshold` on type `quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/pruning.rs:116:41
    |
116 |             amplitude_threshold: config.amplitude_pruning_threshold.unwrap_or(0.01),
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
116 -             amplitude_threshold: config.amplitude_pruning_threshold.unwrap_or(0.01),
116 +             amplitude_threshold: config.amplitude_threshold.unwrap_or(0.01),
    |

error[E0609]: no field `visit_count` on type `&quantum_mcts::node_state::node::QuantumMCTSNode`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/pruning.rs:224:21
    |
224 |             if node.visit_count < self.min_visits_threshold {
    |                     ^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `visits`, `amplitude`, `quantum_reward`, `children` ... and 6 others

error[E0609]: no field `visit_count` on type `&quantum_mcts::node_state::node::QuantumMCTSNode`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/pruning.rs:227:44
    |
227 |                     priority_score: -(node.visit_count as f64), // Negative for min-heap behavior
    |                                            ^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `visits`, `amplitude`, `quantum_reward`, `children` ... and 6 others

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/pruning.rs:228:57
    |
228 |                     amplitude_magnitude: node.amplitude.norm(),
    |                                                         ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0609]: no field `visit_count` on type `&quantum_mcts::node_state::node::QuantumMCTSNode`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/pruning.rs:229:39
    |
229 |                     visit_count: node.visit_count,
    |                                       ^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `visits`, `amplitude`, `quantum_reward`, `children` ... and 6 others

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/pruning.rs:243:54
    |
243 |             let amplitude_magnitude = node.amplitude.norm();
    |                                                      ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0609]: no field `visit_count` on type `&quantum_mcts::node_state::node::QuantumMCTSNode`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/pruning.rs:249:39
    |
249 |                     visit_count: node.visit_count,
    |                                       ^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `visits`, `amplitude`, `quantum_reward`, `children` ... and 6 others

error[E0609]: no field `max_tree_depth` on type `quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/pruning.rs:260:37
    |
260 |         let max_depth = self.config.max_tree_depth.unwrap_or(20);
    |                                     ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/pruning.rs:285:54
    |
285 |             let amplitude_magnitude = node.amplitude.norm();
    |                                                      ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0609]: no field `visit_count` on type `&quantum_mcts::node_state::node::QuantumMCTSNode`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/pruning.rs:287:36
    |
287 |             let visit_count = node.visit_count;
    |                                    ^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `visits`, `amplitude`, `quantum_reward`, `children` ... and 6 others

error[E0609]: no field `last_update` on type `&quantum_mcts::node_state::node::QuantumMCTSNode`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/pruning.rs:313:49
    |
313 |             .map(|(id, node)| (id.clone(), node.last_update))
    |                                                 ^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `visits`, `amplitude`, `quantum_reward`, `children` ... and 6 others

error[E0599]: no method named `unwrap_or` found for type `usize` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/pruning.rs:400:56
    |
400 |         self.max_tree_size = self.config.max_tree_size.unwrap_or(10000);
    |                                                        ^^^^^^^^^ method not found in `usize`

error[E0609]: no field `min_visits_for_pruning` on type `quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/pruning.rs:401:49
    |
401 |         self.min_visits_threshold = self.config.min_visits_for_pruning.unwrap_or(5);
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `amplitude_pruning_threshold` on type `quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/pruning.rs:402:48
    |
402 |         self.amplitude_threshold = self.config.amplitude_pruning_threshold.unwrap_or(0.01);
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
402 -         self.amplitude_threshold = self.config.amplitude_pruning_threshold.unwrap_or(0.01);
402 +         self.amplitude_threshold = self.config.amplitude_threshold.unwrap_or(0.01);
    |

error[E0277]: the trait bound `std::time::Instant: Serialize` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/quantum_expander.rs:117:24
     |
117  |   #[derive(Debug, Clone, Serialize, Deserialize)]
     |                          ^^^^^^^^^ the trait `Serialize` is not implemented for `std::time::Instant`
...
131  | /     /// Last update timestamp
132  | |     pub last_updated: Instant,
     | |_____________________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1106 others
note: required by a bound in `llm::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `std::time::Instant: Deserialize<'_>` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/quantum_expander.rs:132:23
     |
132  |     pub last_updated: Instant,
     |                       ^^^^^^^ the trait `Deserialize<'_>` is not implemented for `std::time::Instant`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 1028 others
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `std::time::Instant: Deserialize<'_>` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/quantum_expander.rs:132:23
     |
132  |     pub last_updated: Instant,
     |                       ^^^^^^^ the trait `Deserialize<'_>` is not implemented for `std::time::Instant`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 1028 others
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `std::time::Instant: Deserialize<'_>` is not satisfied
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/quantum_expander.rs:117:35
    |
117 | #[derive(Debug, Clone, Serialize, Deserialize)]
    |                                   ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `std::time::Instant`
    |
    = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `std::time::Instant` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `Deserialize<'de>`:
              `&'a [u8]` implements `Deserialize<'de>`
              `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
              `&'a std::path::Path` implements `Deserialize<'de>`
              `&'a str` implements `Deserialize<'de>`
              `()` implements `Deserialize<'de>`
              `(T,)` implements `Deserialize<'de>`
              `(T0, T1)` implements `Deserialize<'de>`
              `(T0, T1, T2)` implements `Deserialize<'de>`
            and 1028 others
note: required by a bound in `llm::_::_serde::__private::de::missing_field`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
    |
23  | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
    |        ------------- required by a bound in this function
24  | where
25  |     V: Deserialize<'de>,
    |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0609]: no field `parallel_expansion_limit` on type `quantum_mcts::config::core::QuantumMCTSConfig`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/tree_expansion.rs:61:40
   |
61 |         let expansion_permits = config.parallel_expansion_limit.unwrap_or(4);
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `functions` on type `&node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/tree_expansion.rs:264:18
    |
264 |         if state.functions.len() > 5 {
    |                  ^^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `complexity_score` on type `&node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/tree_expansion.rs:268:18
    |
268 |         if state.complexity_score > 10.0 {
    |                  ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `code`, `latency`, `memory`, `relevance`

error[E0609]: no field `parallel_expansion_limit` on type `quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/mod.rs:161:40
    |
161 |         let expansion_permits = config.parallel_expansion_limit.unwrap_or(4);
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0609]: no field `parallel_expansion_limit` on type `quantum_mcts::config::core::QuantumMCTSConfig`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/mod.rs:384:45
    |
384 |         let expansion_permits = self.config.parallel_expansion_limit.unwrap_or(4);
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `max_quantum_parallel`, `quantum_exploration`, `decoherence_threshold`, `entanglement_strength`, `recursive_iterations` ... and 10 others

error[E0599]: no method named `clone` found for struct `QuantumSelector` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/improvement/engine.rs:73:22
   |
73 |             selector.clone(),
   |                      ^^^^^ method not found in `QuantumSelector`
   |
  ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/selection/core.rs:17:1
   |
17 | pub struct QuantumSelector {
   | -------------------------- method `clone` not found for this struct
   |
   = help: items from traits can only be used if the trait is implemented and in scope
   = note: the following trait defines an item `clone`, perhaps you need to implement it:
           candidate #1: `Clone`

error[E0599]: no method named `clone` found for struct `quantum_expander::QuantumExpander` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/improvement/engine.rs:74:22
   |
74 |             expander.clone(),
   |                      ^^^^^ method not found in `quantum_expander::QuantumExpander`
   |
  ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/quantum_expander.rs:18:1
   |
18 | pub struct QuantumExpander {
   | -------------------------- method `clone` not found for this struct
   |
   = help: items from traits can only be used if the trait is implemented and in scope
   = note: the following trait defines an item `clone`, perhaps you need to implement it:
           candidate #1: `Clone`

error[E0599]: no method named `clone` found for struct `QuantumBackpropagator` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/improvement/engine.rs:75:28
   |
75 |             backpropagator.clone(),
   |                            ^^^^^ method not found in `QuantumBackpropagator`
   |
  ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/core.rs:25:1
   |
25 | pub struct QuantumBackpropagator {
   | -------------------------------- method `clone` not found for this struct
   |
   = help: items from traits can only be used if the trait is implemented and in scope
   = note: the following trait defines an item `clone`, perhaps you need to implement it:
           candidate #1: `Clone`

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/improvement/amplification.rs:123:51
    |
123 |         let amplitude_confidence = node.amplitude.norm().min(1.0);
    |                                                   ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/improvement/convergence.rs:74:43
    |
74  |                 let amp = child.amplitude.norm();
    |                                           ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/improvement/convergence.rs:135:59
    |
135 |                     let avg_reward = child.quantum_reward.norm() / child.visits as f64;
    |                                                           ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/improvement/convergence.rs:177:48
    |
177 |                 let amp_norm = child.amplitude.norm();
    |                                                ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/improvement/simulation.rs:88:21
    |
88  |         self.reward.norm()
    |                     ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/improvement/simulation.rs:160:31
    |
160 |             self.total_reward.norm() / self.successful_simulations as f64
    |                               ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/improvement/amplitude_amplifier.rs:148:46
    |
148 |         let amplitude_score = node.amplitude.norm().min(1.0);
    |                                              ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/improvement/amplitude_amplifier.rs:151:33
    |
151 |             node.quantum_reward.norm() / node.visits as f64
    |                                 ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/node_state/core.rs:40:52
   |
40 |             superposition: SuperpositionState::new(superposition_size),
   |                            ----------------------- ^^^^^^^^^^^^^^^^^^ expected `Duration`, found `usize`
   |                            |
   |                            arguments to this function are incorrect
   |
note: associated function defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum/state.rs:40:12
   |
40 |     pub fn new(coherence_time: Duration) -> Self {
   |            ^^^ ------------------------

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/node_state/core.rs:59:52
   |
59 |             superposition: SuperpositionState::new(superposition_size),
   |                            ----------------------- ^^^^^^^^^^^^^^^^^^ expected `Duration`, found `usize`
   |                            |
   |                            arguments to this function are incorrect
   |
note: associated function defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum/state.rs:40:12
   |
40 |     pub fn new(coherence_time: Duration) -> Self {
   |            ^^^ ------------------------

error[E0599]: no method named `memory_usage` found for struct `SuperpositionState` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/node_state/core.rs:260:28
    |
260 |         self.superposition.memory_usage()
    |                            ^^^^^^^^^^^^ method not found in `SuperpositionState`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/state.rs:10:1
    |
10  | pub struct SuperpositionState {
    | ----------------------------- method `memory_usage` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `memory_usage`, perhaps you need to implement it:
            candidate #1: `aho_corasick::automaton::Automaton`

error[E0599]: no method named `optimize_memory` found for struct `SuperpositionState` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/node_state/core.rs:267:28
    |
267 |         self.superposition.optimize_memory();
    |                            ^^^^^^^^^^^^^^^ method not found in `SuperpositionState`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/state.rs:10:1
    |
10  | pub struct SuperpositionState {
    | ----------------------------- method `optimize_memory` not found for this struct

error[E0599]: no method named `validate` found for struct `SuperpositionState` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/node_state/core.rs:290:28
    |
290 |         self.superposition.validate()?;
    |                            ^^^^^^^^ method not found in `SuperpositionState`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/state.rs:10:1
    |
10  | pub struct SuperpositionState {
    | ----------------------------- method `validate` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `validate`, perhaps you need to implement one of them:
            candidate #1: `entity::core::Entity`
            candidate #2: `entity::types::Entity`
            candidate #3: `entity::validation::ValidationRule`
            candidate #4: `traits::Memory`
            candidate #5: `validator::ValidationRule`
            candidate #6: `tendril::fmt::Format`

error[E0599]: no function or associated item named `default` found for struct `node_types::CodeState` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/node_state/core.rs:299:24
    |
299 |             CodeState::default(),
    |                        ^^^^^^^ function or associated item not found in `node_types::CodeState`
    |
   ::: packages/sweetmcp-memory/src/cognitive/mcts/types/node_types.rs:11:1
    |
11  | pub struct CodeState {
    | -------------------- function or associated item `default` not found for this struct
    |
note: if you're trying to build a new `node_types::CodeState`, consider using `node_types::CodeState::new` which returns `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/types/node_types.rs:21:5
    |
21  |     pub fn new(code: String, latency: f64, memory: f64, relevance: f64) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `default`, perhaps you need to implement one of them:
            candidate #1: `std::default::Default`
            candidate #2: `tinyvec::array::Array`

error[E0369]: binary operation `==` cannot be applied to type `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/node_state/core.rs:307:30
    |
307 |         self.classical_state == other.classical_state &&
    |         -------------------- ^^ --------------------- node_types::CodeState
    |         |
    |         node_types::CodeState
    |
note: an implementation of `PartialEq` might be missing for `node_types::CodeState`
   --> packages/sweetmcp-memory/src/cognitive/mcts/types/node_types.rs:11:1
    |
11  | pub struct CodeState {
    | ^^^^^^^^^^^^^^^^^^^^ must implement `PartialEq`
help: consider annotating `node_types::CodeState` with `#[derive(PartialEq)]`
   --> packages/sweetmcp-memory/src/cognitive/mcts/types/node_types.rs:11:1
    |
11  + #[derive(PartialEq)]
12  | pub struct CodeState {
    |

error[E0369]: binary operation `==` cannot be applied to type `SuperpositionState`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/node_state/core.rs:308:28
    |
308 |         self.superposition == other.superposition &&
    |         ------------------ ^^ ------------------- SuperpositionState
    |         |
    |         SuperpositionState
    |
note: an implementation of `PartialEq` might be missing for `SuperpositionState`
   --> packages/sweetmcp-memory/src/cognitive/quantum/state.rs:10:1
    |
10  | pub struct SuperpositionState {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ must implement `PartialEq`
help: consider annotating `SuperpositionState` with `#[derive(PartialEq)]`
   --> packages/sweetmcp-memory/src/cognitive/quantum/state.rs:10:1
    |
10  + #[derive(PartialEq)]
11  | pub struct SuperpositionState {
    |

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/node_state/node.rs:163:40
    |
163 |         let norm = self.quantum_reward.norm();
    |                                        ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0609]: no field `re` on type `Complex64`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/node_state/node.rs:195:33
    |
195 |             self.quantum_reward.re / self.visits as f64
    |                                 ^^ unknown field
    |
    = note: available fields are: `real`, `imaginary`

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/node_state/node.rs:204:29
    |
204 |         self.quantum_reward.norm()
    |                             ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `arg` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/node_state/node.rs:210:29
    |
210 |         self.quantum_reward.arg()
    |                             ^^^ method not found in `Complex64`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `arg` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `arg`, perhaps you need to implement it:
            candidate #1: `num_complex::complex_float::ComplexFloat`

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/node_state/node.rs:217:51
    |
217 |         let amplitude_confidence = self.amplitude.norm();
    |                                                   ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/node_state/node.rs:235:35
    |
235 |         let norm = self.amplitude.norm();
    |                                   ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/node_state/node.rs:250:35
    |
250 |         let norm = self.amplitude.norm();
    |                                   ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/node_state/node.rs:386:27
    |
386 |         if self.amplitude.norm().is_nan() || self.amplitude.norm().is_infinite() {
    |                           ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/node_state/node.rs:386:61
    |
386 |         if self.amplitude.norm().is_nan() || self.amplitude.norm().is_infinite() {
    |                                                             ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/node_state/node.rs:391:32
    |
391 |         if self.quantum_reward.norm().is_nan() || self.quantum_reward.norm().is_infinite() {
    |                                ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/node_state/node.rs:391:71
    |
391 |         if self.quantum_reward.norm().is_nan() || self.quantum_reward.norm().is_infinite() {
    |                                                                       ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/node_state/mod.rs:221:59
    |
221 |         stats.total_quantum_reward += node.quantum_reward.norm();
    |                                                           ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/selection/scoring.rs:30:47
    |
30  |         let amplitude_factor = node.amplitude.norm();
    |                                               ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/selection/scoring.rs:166:74
    |
166 |                     let entangled_reward = entangled_node.quantum_reward.norm() / entangled_node.visits as f64;
    |                                                                          ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0689]: can't call method `tanh` on ambiguous numeric type `{float}`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/selection/scoring.rs:176:21
    |
176 |         total_bonus.tanh() * 0.2 // Bounded between -0.2 and 0.2
    |                     ^^^^
    |
help: you must specify a type for this binding, like `f32`
    |
160 |         let mut total_bonus: f32 = 0.0;
    |                            +++++

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/selection/scoring.rs:228:49
    |
228 |         let exploitation = child.quantum_reward.norm() / child.visits as f64;
    |                                                 ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/selection/scoring.rs:252:49
    |
252 |         let exploitation = child.quantum_reward.norm() / child.visits as f64;
    |                                                 ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/selection/engine.rs:181:51
    |
181 |         let amplitude_confidence = node.amplitude.norm();
    |                                                   ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: the method `entry` exists for struct `std::collections::HashMap<selection::types::SelectionStrategy, f64>`, but its trait bounds were not satisfied
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/selection/engine.rs:237:61
    |
237 |         let current_performance = self.strategy_performance.entry(strategy).or_insert(0.5);
    |                                                             ^^^^^ method cannot be called due to unsatisfied trait bounds
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/selection/types.rs:8:1
    |
8   | pub enum SelectionStrategy {
    | -------------------------- doesn't satisfy `selection::types::SelectionStrategy: Hash`
    |
    = note: the following trait bounds were not satisfied:
            `selection::types::SelectionStrategy: Hash`
help: consider annotating `selection::types::SelectionStrategy` with `#[derive(Hash)]`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/selection/types.rs:8:1
    |
8   + #[derive(Hash)]
9   | pub enum SelectionStrategy {
    |

error[E0599]: the method `insert` exists for struct `std::collections::HashMap<selection::types::SelectionStrategy, f64>`, but its trait bounds were not satisfied
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/selection/engine.rs:292:35
    |
292 |         self.strategy_performance.insert(strategy, score.max(0.0).min(1.0));
    |                                   ^^^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/selection/types.rs:8:1
    |
8   | pub enum SelectionStrategy {
    | -------------------------- doesn't satisfy `selection::types::SelectionStrategy: Hash`
    |
    = note: the following trait bounds were not satisfied:
            `selection::types::SelectionStrategy: Hash`
help: consider annotating `selection::types::SelectionStrategy` with `#[derive(Hash)]`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/selection/types.rs:8:1
    |
8   + #[derive(Hash)]
9   | pub enum SelectionStrategy {
    |

error[E0689]: can't call method `max` on ambiguous numeric type `{float}`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/calculation_engine.rs:239:43
    |
239 |             max_amplitude = max_amplitude.max(node.amplitude.norm());
    |                                           ^^^
    |
help: you must specify a type for this binding, like `f32`
    |
234 |         let mut max_amplitude: f32 = 0.0;
    |                              +++++

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/calculation_engine.rs:239:62
    |
239 |             max_amplitude = max_amplitude.max(node.amplitude.norm());
    |                                                              ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0277]: `QuantumStatisticsCollector` doesn't implement `std::fmt::Debug`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/coordinator.rs:48:5
   |
45 | #[derive(Debug)]
   |          ----- in this derive macro expansion
...
48 |     pub collector: QuantumStatisticsCollector,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::fmt::Debug` is not implemented for `QuantumStatisticsCollector`
   |
   = note: add `#[derive(Debug)]` to `QuantumStatisticsCollector` or manually `impl std::fmt::Debug for QuantumStatisticsCollector`

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/coordinator.rs:60:57
   |
60 |         let collector = QuantumStatisticsCollector::new(config.clone());
   |                         ------------------------------- ^^^^^^^^^^^^^^ expected `QuantumMCTSConfig`, found a different `QuantumMCTSConfig`
   |                         |
   |                         arguments to this function are incorrect
   |
   = note: `QuantumMCTSConfig` and `QuantumMCTSConfig` have similar names, but are actually distinct types
note: `QuantumMCTSConfig` is defined in module `crate::cognitive::quantum_mcts::statistics::config` of the current crate
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/config.rs:11:1
   |
11 | pub struct QuantumMCTSConfig {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: `QuantumMCTSConfig` is defined in module `crate::cognitive::quantum_mcts::config::core` of the current crate
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/config/core.rs:11:1
   |
11 | pub struct QuantumMCTSConfig {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: associated function defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/collector.rs:45:12
   |
45 |     pub fn new(config: QuantumMCTSConfig) -> Self {
   |            ^^^ -------------------------

error[E0599]: no variant or associated item named `Poor` found for enum `quantum_mcts::statistics::performance::PerformanceTrend` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/coordinator.rs:318:50
    |
318 |             performance_trend: PerformanceTrend::Poor,
    |                                                  ^^^^ variant or associated item not found in `quantum_mcts::statistics::performance::PerformanceTrend`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/performance.rs:211:1
    |
211 | pub enum PerformanceTrend {
    | ------------------------- variant or associated item `Poor` not found for this enum
    |
help: there is a method `or` with a similar name
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0277]: the trait bound `quantum_mcts::statistics::types::QuantumTreeStatistics: Clone` is not satisfied
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/coordinator.rs:365:5
    |
362 | #[derive(Debug, Clone)]
    |                 ----- in this derive macro expansion
...
365 |     pub statistics: QuantumTreeStatistics,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `quantum_mcts::statistics::types::QuantumTreeStatistics`

error[E0609]: no field `overall_convergence` on type `ConvergenceMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/coordinator.rs:389:49
    |
389 |             self.statistics.convergence_metrics.overall_convergence * 100.0,
    |                                                 ^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `iterations_to_convergence`, `convergence_rate`, `stability_score`, `converged`

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/metrics.rs:194:45
    |
194 |         let avg_magnitude = self.avg_reward.norm();
    |                                             ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/metrics.rs:225:41
    |
225 |         let magnitude = self.avg_reward.norm().min(1.0);
    |                                         ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0599]: no method named `norm` found for struct `Complex64` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/metrics.rs:234:29
    |
234 |             self.avg_reward.norm(),
    |                             ^^^^
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum/complex.rs:8:1
    |
8   | pub struct Complex64 {
    | -------------------- method `norm` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `norm`, perhaps you need to implement one of them:
            candidate #1: `Norm`
            candidate #2: `Normed`
help: there is a method `or` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/policy/mod.rs:165:5
    |
165 | /     fn or<P, B, E>(self, other: P) -> Or<Self, P>
166 | |     where
167 | |         Self: Policy<B, E> + Sized,
168 | |         P: Policy<B, E>;
    | |________________________^

error[E0277]: the trait bound `NodeMetrics: Serialize` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/node_state.rs:11:24
     |
11   |   #[derive(Debug, Clone, Serialize, Deserialize)]
     |                          ^^^^^^^^^ the trait `Serialize` is not implemented for `NodeMetrics`
...
21   | /     /// Performance metrics
22   | |     pub metrics: NodeMetrics,
     | |____________________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `NodeMetrics` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1106 others
note: required by a bound in `llm::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `std::time::Instant: Serialize` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/node_state.rs:11:24
     |
11   |   #[derive(Debug, Clone, Serialize, Deserialize)]
     |                          ^^^^^^^^^ the trait `Serialize` is not implemented for `std::time::Instant`
...
23   | /     /// Creation timestamp
24   | |     pub created_at: Instant,
     | |___________________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1106 others
note: required by a bound in `llm::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `NodeMetrics: Deserialize<'_>` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/node_state.rs:22:18
     |
22   |     pub metrics: NodeMetrics,
     |                  ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `NodeMetrics`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `NodeMetrics` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 1032 others
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `std::time::Instant: Deserialize<'_>` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/node_state.rs:24:21
     |
24   |     pub created_at: Instant,
     |                     ^^^^^^^ the trait `Deserialize<'_>` is not implemented for `std::time::Instant`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 1032 others
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `NodeMetrics: Deserialize<'_>` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/node_state.rs:22:18
     |
22   |     pub metrics: NodeMetrics,
     |                  ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `NodeMetrics`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `NodeMetrics` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 1032 others
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `std::time::Instant: Deserialize<'_>` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/node_state.rs:24:21
     |
24   |     pub created_at: Instant,
     |                     ^^^^^^^ the trait `Deserialize<'_>` is not implemented for `std::time::Instant`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 1032 others
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `NodeMetrics: Deserialize<'_>` is not satisfied
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/node_state.rs:11:35
   |
11 | #[derive(Debug, Clone, Serialize, Deserialize)]
   |                                   ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `NodeMetrics`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `NodeMetrics` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `Deserialize<'de>`:
             `&'a [u8]` implements `Deserialize<'de>`
             `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
             `&'a std::path::Path` implements `Deserialize<'de>`
             `&'a str` implements `Deserialize<'de>`
             `()` implements `Deserialize<'de>`
             `(T,)` implements `Deserialize<'de>`
             `(T0, T1)` implements `Deserialize<'de>`
             `(T0, T1, T2)` implements `Deserialize<'de>`
           and 1032 others
note: required by a bound in `llm::_::_serde::__private::de::missing_field`
  --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
   |
23 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
24 | where
25 |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `std::time::Instant: Deserialize<'_>` is not satisfied
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/node_state.rs:11:35
   |
11 | #[derive(Debug, Clone, Serialize, Deserialize)]
   |                                   ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `std::time::Instant`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `std::time::Instant` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `Deserialize<'de>`:
             `&'a [u8]` implements `Deserialize<'de>`
             `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
             `&'a std::path::Path` implements `Deserialize<'de>`
             `&'a str` implements `Deserialize<'de>`
             `()` implements `Deserialize<'de>`
             `(T,)` implements `Deserialize<'de>`
             `(T0, T1)` implements `Deserialize<'de>`
             `(T0, T1, T2)` implements `Deserialize<'de>`
           and 1032 others
note: required by a bound in `llm::_::_serde::__private::de::missing_field`
  --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
   |
23 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
24 | where
25 |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `std::time::Instant: Serialize` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/node_state.rs:134:24
     |
134  |   #[derive(Debug, Clone, Serialize, Deserialize)]
     |                          ^^^^^^^^^ the trait `Serialize` is not implemented for `std::time::Instant`
...
146  | /     /// Last update timestamp
147  | |     pub last_updated: Instant,
     | |_____________________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1106 others
note: required by a bound in `llm::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `std::time::Instant: Deserialize<'_>` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/node_state.rs:147:23
     |
147  |     pub last_updated: Instant,
     |                       ^^^^^^^ the trait `Deserialize<'_>` is not implemented for `std::time::Instant`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 1032 others
note: required by a bound in `next_element`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1732:12
     |
1730 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1731 |     where
1732 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `std::time::Instant: Deserialize<'_>` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/node_state.rs:147:23
     |
147  |     pub last_updated: Instant,
     |                       ^^^^^^^ the trait `Deserialize<'_>` is not implemented for `std::time::Instant`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Deserialize<'de>`:
               `&'a [u8]` implements `Deserialize<'de>`
               `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
               `&'a std::path::Path` implements `Deserialize<'de>`
               `&'a str` implements `Deserialize<'de>`
               `()` implements `Deserialize<'de>`
               `(T,)` implements `Deserialize<'de>`
               `(T0, T1)` implements `Deserialize<'de>`
               `(T0, T1, T2)` implements `Deserialize<'de>`
             and 1032 others
note: required by a bound in `next_value`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/de/mod.rs:1871:12
     |
1869 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1870 |     where
1871 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `std::time::Instant: Deserialize<'_>` is not satisfied
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/node_state.rs:134:35
    |
134 | #[derive(Debug, Clone, Serialize, Deserialize)]
    |                                   ^^^^^^^^^^^ the trait `Deserialize<'_>` is not implemented for `std::time::Instant`
    |
    = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `std::time::Instant` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `Deserialize<'de>`:
              `&'a [u8]` implements `Deserialize<'de>`
              `&'a serde_json::value::RawValue` implements `Deserialize<'de>`
              `&'a std::path::Path` implements `Deserialize<'de>`
              `&'a str` implements `Deserialize<'de>`
              `()` implements `Deserialize<'de>`
              `(T,)` implements `Deserialize<'de>`
              `(T0, T1)` implements `Deserialize<'de>`
              `(T0, T1, T2)` implements `Deserialize<'de>`
            and 1032 others
note: required by a bound in `llm::_::_serde::__private::de::missing_field`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/private/de.rs:25:8
    |
23  | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
    |        ------------- required by a bound in this function
24  | where
25  |     V: Deserialize<'de>,
    |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0609]: no field `overall_convergence` on type `ConvergenceMetrics`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/performance_trends.rs:65:55
   |
65 |             .map(|s| s.statistics.convergence_metrics.overall_convergence)
   |                                                       ^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `iterations_to_convergence`, `convergence_rate`, `stability_score`, `converged`

error[E0689]: can't call method `min` on ambiguous numeric type `{float}`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/performance_trends.rs:81:56
   |
81 |         (1.0 / (1.0 + coefficient_of_variation * 2.0)).min(1.0)
   |                                                        ^^^

error[E0609]: no field `overall_convergence` on type `ConvergenceMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/performance_trends.rs:205:84
    |
205 |         let recent_change = recent_snapshots[len-1].statistics.convergence_metrics.overall_convergence -
    |                                                                                    ^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `iterations_to_convergence`, `convergence_rate`, `stability_score`, `converged`

error[E0609]: no field `overall_convergence` on type `ConvergenceMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/performance_trends.rs:206:83
    |
206 | ...                   recent_snapshots[len-2].statistics.convergence_metrics.overall_convergence;
    |                                                                              ^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `iterations_to_convergence`, `convergence_rate`, `stability_score`, `converged`

error[E0609]: no field `overall_convergence` on type `ConvergenceMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/performance_trends.rs:207:86
    |
207 |         let previous_change = recent_snapshots[len-2].statistics.convergence_metrics.overall_convergence -
    |                                                                                      ^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `iterations_to_convergence`, `convergence_rate`, `stability_score`, `converged`

error[E0609]: no field `overall_convergence` on type `ConvergenceMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/performance_trends.rs:208:85
    |
208 | ...                   recent_snapshots[len-3].statistics.convergence_metrics.overall_convergence;
    |                                                                              ^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `iterations_to_convergence`, `convergence_rate`, `stability_score`, `converged`

error[E0277]: the trait bound `quantum_mcts::statistics::types::QuantumTreeStatistics: Clone` is not satisfied
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/snapshot_comparison.rs:16:5
   |
11 | #[derive(Debug, Clone, Serialize)]
   |                 ----- in this derive macro expansion
...
16 |     pub statistics: QuantumTreeStatistics,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `quantum_mcts::statistics::types::QuantumTreeStatistics`

error[E0277]: the trait bound `std::time::Instant: Serialize` is not satisfied
    --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/snapshot_comparison.rs:11:24
     |
11   |   #[derive(Debug, Clone, Serialize)]
     |                          ^^^^^^^^^ the trait `Serialize` is not implemented for `std::time::Instant`
12   |   pub struct StatisticsSnapshot {
13   | /     /// Timestamp when the snapshot was taken
14   | |     pub timestamp: Instant,
     | |__________________________- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `std::time::Instant` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1106 others
note: required by a bound in `llm::_::_serde::ser::SerializeStruct::serialize_field`
    --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/src/ser/mod.rs:1866:21
     |
1864 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1865 |     where
1866 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0609]: no field `overall_convergence` on type `ConvergenceMetrics`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/snapshot_comparison.rs:58:70
   |
58 |         let convergence_change = self.statistics.convergence_metrics.overall_convergence - 
   |                                                                      ^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `iterations_to_convergence`, `convergence_rate`, `stability_score`, `converged`

error[E0609]: no field `overall_convergence` on type `ConvergenceMetrics`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/snapshot_comparison.rs:59:70
   |
59 | ...                   other.statistics.convergence_metrics.overall_convergence;
   |                                                            ^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `iterations_to_convergence`, `convergence_rate`, `stability_score`, `converged`

error[E0609]: no field `overall_convergence` on type `ConvergenceMetrics`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/types.rs:72:58
   |
72 |         let convergence_score = self.convergence_metrics.overall_convergence;
   |                                                          ^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `iterations_to_convergence`, `convergence_rate`, `stability_score`, `converged`

error[E0609]: no field `throughput_metrics` on type `quantum_mcts::statistics::metrics::PerformanceMetrics`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/types.rs:73:58
   |
73 |         let performance_score = self.performance_metrics.throughput_metrics.overall_throughput();
   |                                                          ^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `avg_execution_time_ms`, `memory_usage_mb`, `circuit_depth`, `gate_count`

error[E0609]: no field `overall_convergence` on type `ConvergenceMetrics`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/types.rs:86:41
   |
86 |             && self.convergence_metrics.overall_convergence > 0.6
   |                                         ^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `iterations_to_convergence`, `convergence_rate`, `stability_score`, `converged`

error[E0609]: no field `avg_visits_per_node` on type `quantum_mcts::statistics::metrics::PerformanceMetrics`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/types.rs:87:41
   |
87 |             && self.performance_metrics.avg_visits_per_node > 1.0
   |                                         ^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `avg_execution_time_ms`, `memory_usage_mb`, `circuit_depth`, `gate_count`

error[E0609]: no field `overall_convergence` on type `ConvergenceMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/types.rs:102:38
    |
102 |             self.convergence_metrics.overall_convergence,
    |                                      ^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `iterations_to_convergence`, `convergence_rate`, `stability_score`, `converged`

error[E0599]: no method named `convergence_grade` found for struct `ConvergenceMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/types.rs:103:38
    |
103 |             self.convergence_metrics.convergence_grade(),
    |                                      ^^^^^^^^^^^^^^^^^ method not found in `ConvergenceMetrics`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/metrics.rs:11:1
    |
11  | pub struct ConvergenceMetrics {
    | ----------------------------- method `convergence_grade` not found for this struct

error[E0609]: no field `throughput_metrics` on type `quantum_mcts::statistics::metrics::PerformanceMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/types.rs:107:38
    |
107 |             self.performance_metrics.throughput_metrics.overall_throughput() * 1000.0
    |                                      ^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `avg_execution_time_ms`, `memory_usage_mb`, `circuit_depth`, `gate_count`

error[E0609]: no field `overall_convergence` on type `ConvergenceMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/types.rs:116:57
    |
116 |             convergence_delta: self.convergence_metrics.overall_convergence - other.convergence_metrics.overall_convergence,
    |                                                         ^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `iterations_to_convergence`, `convergence_rate`, `stability_score`, `converged`

error[E0609]: no field `overall_convergence` on type `ConvergenceMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/types.rs:116:105
    |
116 |             convergence_delta: self.convergence_metrics.overall_convergence - other.convergence_metrics.overall_convergence,
    |                                                                                                         ^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `iterations_to_convergence`, `convergence_rate`, `stability_score`, `converged`

error[E0609]: no field `throughput_metrics` on type `quantum_mcts::statistics::metrics::PerformanceMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/types.rs:118:57
    |
118 |             performance_delta: self.performance_metrics.throughput_metrics.overall_throughput() 
    |                                                         ^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `avg_execution_time_ms`, `memory_usage_mb`, `circuit_depth`, `gate_count`

error[E0609]: no field `throughput_metrics` on type `quantum_mcts::statistics::metrics::PerformanceMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/types.rs:119:45
    |
119 |                 - other.performance_metrics.throughput_metrics.overall_throughput(),
    |                                             ^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `avg_execution_time_ms`, `memory_usage_mb`, `circuit_depth`, `gate_count`

error[E0277]: the trait bound `quantum_mcts::statistics::types::QuantumTreeStatistics: Clone` is not satisfied
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/types.rs:176:5
    |
171 | #[derive(Debug, Clone)]
    |                 ----- in this derive macro expansion
...
176 |     pub statistics: QuantumTreeStatistics,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `quantum_mcts::statistics::types::QuantumTreeStatistics`

error[E0609]: no field `overall_convergence` on type `&ConvergenceMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/tree_stats_types.rs:108:41
    |
108 |         let convergence_score = metrics.overall_convergence;
    |                                         ^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `iterations_to_convergence`, `convergence_rate`, `stability_score`, `converged`

error[E0609]: no field `amplitude_concentration` on type `&ConvergenceMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/tree_stats_types.rs:109:47
    |
109 |         let amplitude_concentration = metrics.amplitude_concentration;
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `iterations_to_convergence`, `convergence_rate`, `stability_score`, `converged`

error[E0609]: no field `visit_concentration` on type `&ConvergenceMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/tree_stats_types.rs:110:43
    |
110 |         let visit_concentration = metrics.visit_concentration;
    |                                           ^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `iterations_to_convergence`, `convergence_rate`, `stability_score`, `converged`

error[E0609]: no field `overall_convergence` on type `&ConvergenceMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/tree_stats_types.rs:198:41
    |
198 |         let convergence_score = metrics.overall_convergence;
    |                                         ^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `iterations_to_convergence`, `convergence_rate`, `stability_score`, `converged`

error[E0599]: no method named `stability_score` found for reference `&ConvergenceMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/tree_stats_types.rs:199:33
    |
199 |         let stability = metrics.stability_score();
    |                                 ^^^^^^^^^^^^^^^-- help: remove the arguments
    |                                 |
    |                                 field, not a method

error[E0609]: no field `node_creation_rate` on type `quantum_mcts::statistics::metrics::PerformanceMetrics`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/tree_stats_analyzer.rs:71:64
   |
71 |         let node_creation_score = if stats.performance_metrics.node_creation_rate > 50.0 {
   |                                                                ^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `avg_execution_time_ms`, `memory_usage_mb`, `circuit_depth`, `gate_count`

error[E0609]: no field `node_creation_rate` on type `quantum_mcts::statistics::metrics::PerformanceMetrics`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/tree_stats_analyzer.rs:73:45
   |
73 |         } else if stats.performance_metrics.node_creation_rate > 20.0 {
   |                                             ^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `avg_execution_time_ms`, `memory_usage_mb`, `circuit_depth`, `gate_count`

error[E0609]: no field `node_creation_rate` on type `quantum_mcts::statistics::metrics::PerformanceMetrics`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/tree_stats_analyzer.rs:75:45
   |
75 |         } else if stats.performance_metrics.node_creation_rate > 10.0 {
   |                                             ^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `avg_execution_time_ms`, `memory_usage_mb`, `circuit_depth`, `gate_count`

error[E0609]: no field `node_creation_rate` on type `quantum_mcts::statistics::metrics::PerformanceMetrics`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/tree_stats_analyzer.rs:77:45
   |
77 |         } else if stats.performance_metrics.node_creation_rate > 5.0 {
   |                                             ^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `avg_execution_time_ms`, `memory_usage_mb`, `circuit_depth`, `gate_count`

error[E0599]: no method named `overall_cache_hit_rate` found for struct `quantum_mcts::statistics::metrics::PerformanceMetrics` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/tree_stats_analyzer.rs:83:53
   |
83 |         let cache_score = stats.performance_metrics.overall_cache_hit_rate();
   |                                                     ^^^^^^^^^^^^^^^^^^^^^^ method not found in `quantum_mcts::statistics::metrics::PerformanceMetrics`
   |
  ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/metrics.rs:36:1
   |
36 | pub struct PerformanceMetrics {
   | ----------------------------- method `overall_cache_hit_rate` not found for this struct

error[E0609]: no field `avg_visits_per_node` on type `quantum_mcts::statistics::metrics::PerformanceMetrics`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/tree_stats_analyzer.rs:84:57
   |
84 |         let visits_score = if stats.performance_metrics.avg_visits_per_node > 5.0 {
   |                                                         ^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `avg_execution_time_ms`, `memory_usage_mb`, `circuit_depth`, `gate_count`

error[E0609]: no field `avg_visits_per_node` on type `quantum_mcts::statistics::metrics::PerformanceMetrics`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/tree_stats_analyzer.rs:86:45
   |
86 |         } else if stats.performance_metrics.avg_visits_per_node > 3.0 {
   |                                             ^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `avg_execution_time_ms`, `memory_usage_mb`, `circuit_depth`, `gate_count`

error[E0609]: no field `avg_visits_per_node` on type `quantum_mcts::statistics::metrics::PerformanceMetrics`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/tree_stats_analyzer.rs:88:45
   |
88 |         } else if stats.performance_metrics.avg_visits_per_node > 2.0 {
   |                                             ^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `avg_execution_time_ms`, `memory_usage_mb`, `circuit_depth`, `gate_count`

error[E0609]: no field `avg_visits_per_node` on type `quantum_mcts::statistics::metrics::PerformanceMetrics`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/tree_stats_analyzer.rs:90:45
   |
90 |         } else if stats.performance_metrics.avg_visits_per_node > 1.0 {
   |                                             ^^^^^^^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `avg_execution_time_ms`, `memory_usage_mb`, `circuit_depth`, `gate_count`

error[E0609]: no field `node_creation_rate` on type `quantum_mcts::statistics::metrics::PerformanceMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/tree_stats_analyzer.rs:134:38
    |
134 |         if stats.performance_metrics.node_creation_rate < 10.0 {
    |                                      ^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `avg_execution_time_ms`, `memory_usage_mb`, `circuit_depth`, `gate_count`

error[E0599]: no method named `overall_cache_hit_rate` found for struct `quantum_mcts::statistics::metrics::PerformanceMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/tree_stats_analyzer.rs:138:38
    |
138 |         if stats.performance_metrics.overall_cache_hit_rate() < 0.5 {
    |                                      ^^^^^^^^^^^^^^^^^^^^^^ method not found in `quantum_mcts::statistics::metrics::PerformanceMetrics`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/metrics.rs:36:1
    |
36  | pub struct PerformanceMetrics {
    | ----------------------------- method `overall_cache_hit_rate` not found for this struct

error[E0609]: no field `overall_convergence` on type `ConvergenceMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/tree_stats_analyzer.rs:152:38
    |
152 |         if stats.convergence_metrics.overall_convergence < 0.3 {
    |                                      ^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `iterations_to_convergence`, `convergence_rate`, `stability_score`, `converged`

error[E0609]: no field `avg_visits_per_node` on type `quantum_mcts::statistics::metrics::PerformanceMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/tree_stats_analyzer.rs:156:38
    |
156 |         if stats.performance_metrics.avg_visits_per_node < 2.0 {
    |                                      ^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `avg_execution_time_ms`, `memory_usage_mb`, `circuit_depth`, `gate_count`

error[E0609]: no field `node_creation_rate` on type `quantum_mcts::statistics::metrics::PerformanceMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/tree_stats_analyzer.rs:202:38
    |
202 |         if stats.performance_metrics.node_creation_rate < 10.0 {
    |                                      ^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `avg_execution_time_ms`, `memory_usage_mb`, `circuit_depth`, `gate_count`

error[E0599]: no method named `overall_cache_hit_rate` found for struct `quantum_mcts::statistics::metrics::PerformanceMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/tree_stats_analyzer.rs:207:38
    |
207 |         if stats.performance_metrics.overall_cache_hit_rate() < 0.7 {
    |                                      ^^^^^^^^^^^^^^^^^^^^^^ method not found in `quantum_mcts::statistics::metrics::PerformanceMetrics`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/metrics.rs:36:1
    |
36  | pub struct PerformanceMetrics {
    | ----------------------------- method `overall_cache_hit_rate` not found for this struct

error[E0609]: no field `node_creation_rate` on type `quantum_mcts::statistics::metrics::PerformanceMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/tree_stats_analyzer.rs:295:39
    |
295 |             stats.performance_metrics.node_creation_rate,
    |                                       ^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `avg_execution_time_ms`, `memory_usage_mb`, `circuit_depth`, `gate_count`

error[E0599]: no method named `overall_cache_hit_rate` found for struct `quantum_mcts::statistics::metrics::PerformanceMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/tree_stats_analyzer.rs:296:39
    |
296 |             stats.performance_metrics.overall_cache_hit_rate() * 100.0,
    |                                       ^^^^^^^^^^^^^^^^^^^^^^ method not found in `quantum_mcts::statistics::metrics::PerformanceMetrics`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/metrics.rs:36:1
    |
36  | pub struct PerformanceMetrics {
    | ----------------------------- method `overall_cache_hit_rate` not found for this struct

error[E0609]: no field `avg_visits_per_node` on type `quantum_mcts::statistics::metrics::PerformanceMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/tree_stats_analyzer.rs:297:39
    |
297 |             stats.performance_metrics.avg_visits_per_node,
    |                                       ^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `avg_execution_time_ms`, `memory_usage_mb`, `circuit_depth`, `gate_count`

error[E0599]: no function or associated item named `analyze` found for struct `tree_stats_analyzer::TreeStatisticsAnalyzer` in the current scope
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/tree_stats_mod.rs:22:29
   |
22 |     TreeStatisticsAnalyzer::analyze(stats)
   |                             ^^^^^^^ function or associated item not found in `tree_stats_analyzer::TreeStatisticsAnalyzer`
   |
  ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/tree_stats_analyzer.rs:14:1
   |
14 | pub struct TreeStatisticsAnalyzer;
   | --------------------------------- function or associated item `analyze` not found for this struct
   |
help: there is an associated function `analyze_tree` with a similar name
   |
22 |     TreeStatisticsAnalyzer::analyze_tree(stats)
   |                                    +++++

error[E0609]: no field `node_creation_rate` on type `quantum_mcts::statistics::metrics::PerformanceMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/tree_stats_mod.rs:219:63
    |
219 |                 node_creation_rate: stats.performance_metrics.node_creation_rate,
    |                                                               ^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `avg_execution_time_ms`, `memory_usage_mb`, `circuit_depth`, `gate_count`

error[E0599]: no method named `overall_cache_hit_rate` found for struct `quantum_mcts::statistics::metrics::PerformanceMetrics` in the current scope
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/tree_stats_mod.rs:220:59
    |
220 |                 cache_hit_rate: stats.performance_metrics.overall_cache_hit_rate(),
    |                                                           ^^^^^^^^^^^^^^^^^^^^^^ method not found in `quantum_mcts::statistics::metrics::PerformanceMetrics`
    |
   ::: packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/metrics.rs:36:1
    |
36  | pub struct PerformanceMetrics {
    | ----------------------------- method `overall_cache_hit_rate` not found for this struct

error[E0609]: no field `avg_visits_per_node` on type `quantum_mcts::statistics::metrics::PerformanceMetrics`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/tree_stats_mod.rs:222:60
    |
222 |                 visits_per_node: stats.performance_metrics.avg_visits_per_node,
    |                                                            ^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `avg_execution_time_ms`, `memory_usage_mb`, `circuit_depth`, `gate_count`

error[E0277]: `QuantumSelector` doesn't implement `std::fmt::Debug`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:72:5
   |
68 | #[derive(Debug, Clone)]
   |          ----- in this derive macro expansion
...
72 |     selector: Arc<QuantumSelector>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::fmt::Debug` is not implemented for `QuantumSelector`
   |
   = note: add `#[derive(Debug)]` to `QuantumSelector` or manually `impl std::fmt::Debug for QuantumSelector`
   = help: the trait `std::fmt::Debug` is implemented for `std::sync::Arc<T, A>`

error[E0277]: `QuantumBackpropagator` doesn't implement `std::fmt::Debug`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:74:5
   |
68 | #[derive(Debug, Clone)]
   |          ----- in this derive macro expansion
...
74 |     backpropagator: Arc<QuantumBackpropagator>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::fmt::Debug` is not implemented for `QuantumBackpropagator`
   |
   = note: add `#[derive(Debug)]` to `QuantumBackpropagator` or manually `impl std::fmt::Debug for QuantumBackpropagator`
   = help: the trait `std::fmt::Debug` is implemented for `std::sync::Arc<T, A>`
help: consider annotating `QuantumBackpropagator` with `#[derive(Debug)]`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/core.rs:25:1
   |
25 + #[derive(Debug)]
26 | pub struct QuantumBackpropagator {
   |

error[E0277]: `QuantumEntanglementManager` doesn't implement `std::fmt::Debug`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:75:5
   |
68 | #[derive(Debug, Clone)]
   |          ----- in this derive macro expansion
...
75 |     entanglement_manager: Arc<QuantumEntanglementManager>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::fmt::Debug` is not implemented for `QuantumEntanglementManager`
   |
   = note: add `#[derive(Debug)]` to `QuantumEntanglementManager` or manually `impl std::fmt::Debug for QuantumEntanglementManager`
   = help: the trait `std::fmt::Debug` is implemented for `std::sync::Arc<T, A>`
help: consider annotating `QuantumEntanglementManager` with `#[derive(Debug)]`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:25:1
   |
25 + #[derive(Debug)]
26 | pub struct QuantumEntanglementManager {
   |

error[E0277]: `RecursiveImprovementEngine` doesn't implement `std::fmt::Debug`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:76:5
   |
68 | #[derive(Debug, Clone)]
   |          ----- in this derive macro expansion
...
76 |     improvement_engine: Arc<RecursiveImprovementEngine>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::fmt::Debug` is not implemented for `RecursiveImprovementEngine`
   |
   = note: add `#[derive(Debug)]` to `RecursiveImprovementEngine` or manually `impl std::fmt::Debug for RecursiveImprovementEngine`
   = help: the trait `std::fmt::Debug` is implemented for `std::sync::Arc<T, A>`

error[E0277]: `QuantumStatisticsCollector` doesn't implement `std::fmt::Debug`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:77:5
   |
68 | #[derive(Debug, Clone)]
   |          ----- in this derive macro expansion
...
77 |     statistics: Arc<QuantumStatisticsCollector>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::fmt::Debug` is not implemented for `QuantumStatisticsCollector`
   |
   = note: add `#[derive(Debug)]` to `QuantumStatisticsCollector` or manually `impl std::fmt::Debug for QuantumStatisticsCollector`
   = help: the trait `std::fmt::Debug` is implemented for `std::sync::Arc<T, A>`

error[E0283]: type annotations needed
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:68:17
   |
68 | #[derive(Debug, Clone)]
   |                 ^ cannot infer type
   |
   = note: cannot satisfy `_: QuantumState`
note: required by a bound in `quantum_mcts::QuantumMCTS`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:69:27
   |
69 | pub struct QuantumMCTS<S: QuantumState> {
   |                           ^^^^^^^^^^^^ required by this bound in `QuantumMCTS`

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:86:54
   |
86 |         let selector = Arc::new(QuantumSelector::new(config.clone())?);
   |                                 -------------------- ^^^^^^^^^^^^^^ expected `QuantumMCTSConfig`, found `Arc<QuantumMCTSConfig>`
   |                                 |
   |                                 arguments to this function are incorrect
   |
   = note: expected struct `quantum_mcts::config::core::QuantumMCTSConfig`
              found struct `std::sync::Arc<quantum_mcts::config::core::QuantumMCTSConfig>`
note: associated function defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/selection/core.rs:28:12
   |
28 |     pub fn new(config: QuantumMCTSConfig) -> Self {
   |            ^^^ -------------------------

error[E0277]: the `?` operator can only be applied to values that implement `Try`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:86:33
   |
86 |         let selector = Arc::new(QuantumSelector::new(config.clone())?);
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `QuantumSelector`
   |
   = help: the trait `Try` is not implemented for `QuantumSelector`

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:87:54
   |
87 |         let expander = Arc::new(QuantumExpander::new(config.clone())?);
   |                                 -------------------- ^^^^^^^^^^^^^^ expected `QuantumExpansionConfig`, found `Arc<QuantumMCTSConfig>`
   |                                 |
   |                                 arguments to this function are incorrect
   |
   = note: expected struct `QuantumExpansionConfig`
              found struct `std::sync::Arc<quantum_mcts::config::core::QuantumMCTSConfig>`
note: associated function defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/expansion/quantum_expander.rs:31:12
   |
31 |     pub fn new(config: QuantumExpansionConfig) -> Self {
   |            ^^^ ------------------------------

error[E0277]: the `?` operator can only be applied to values that implement `Try`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:87:33
   |
87 |         let expander = Arc::new(QuantumExpander::new(config.clone())?);
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `quantum_expander::QuantumExpander`
   |
   = help: the trait `Try` is not implemented for `quantum_expander::QuantumExpander`

error[E0061]: this function takes 2 arguments but 1 argument was supplied
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:88:39
   |
88 |         let backpropagator = Arc::new(QuantumBackpropagator::new(config.clone())?);
   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^---------------- argument #2 of type `std::sync::Arc<tokio::sync::RwLock<quantum::entanglement::EntanglementGraph>>` is missing
   |
note: expected `QuantumMCTSConfig`, found `Arc<QuantumMCTSConfig>`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:88:66
   |
88 |         let backpropagator = Arc::new(QuantumBackpropagator::new(config.clone())?);
   |                                                                  ^^^^^^^^^^^^^^
   = note: expected struct `quantum_mcts::config::core::QuantumMCTSConfig`
              found struct `std::sync::Arc<quantum_mcts::config::core::QuantumMCTSConfig>`
note: associated function defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/core.rs:40:12
   |
40 |     pub fn new(
   |            ^^^
41 |         config: QuantumMCTSConfig,
   |         -------------------------
42 |         entanglement_graph: Arc<RwLock<EntanglementGraph>>,
   |         --------------------------------------------------
help: provide the argument
   |
88 -         let backpropagator = Arc::new(QuantumBackpropagator::new(config.clone())?);
88 +         let backpropagator = Arc::new(QuantumBackpropagator::new(/* quantum_mcts::config::core::QuantumMCTSConfig */, /* std::sync::Arc<tokio::sync::RwLock<quantum::entanglement::EntanglementGraph>> */)?);
   |

error[E0277]: the `?` operator can only be applied to values that implement `Try`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:88:39
   |
88 |         let backpropagator = Arc::new(QuantumBackpropagator::new(config.clone())?);
   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `QuantumBackpropagator`
   |
   = help: the trait `Try` is not implemented for `QuantumBackpropagator`

error[E0061]: this function takes 2 arguments but 1 argument was supplied
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:89:45
   |
89 |         let entanglement_manager = Arc::new(QuantumEntanglementManager::new(config.clone())?);
   |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---------------- argument #2 of type `std::sync::Arc<tokio::sync::RwLock<quantum::entanglement::EntanglementGraph>>` is missing
   |
note: expected `QuantumMCTSConfig`, found `Arc<QuantumMCTSConfig>`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:89:77
   |
89 |         let entanglement_manager = Arc::new(QuantumEntanglementManager::new(config.clone())?);
   |                                                                             ^^^^^^^^^^^^^^
   = note: expected struct `quantum_mcts::config::core::QuantumMCTSConfig`
              found struct `std::sync::Arc<quantum_mcts::config::core::QuantumMCTSConfig>`
note: associated function defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/core.rs:38:12
   |
38 |     pub fn new(
   |            ^^^
39 |         config: QuantumMCTSConfig,
   |         -------------------------
40 |         entanglement_graph: Arc<RwLock<EntanglementGraph>>,
   |         --------------------------------------------------
help: provide the argument
   |
89 -         let entanglement_manager = Arc::new(QuantumEntanglementManager::new(config.clone())?);
89 +         let entanglement_manager = Arc::new(QuantumEntanglementManager::new(/* quantum_mcts::config::core::QuantumMCTSConfig */, /* std::sync::Arc<tokio::sync::RwLock<quantum::entanglement::EntanglementGraph>> */)?);
   |

error[E0277]: the `?` operator can only be applied to values that implement `Try`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:89:45
   |
89 |         let entanglement_manager = Arc::new(QuantumEntanglementManager::new(config.clone())?);
   |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `QuantumEntanglementManager`
   |
   = help: the trait `Try` is not implemented for `QuantumEntanglementManager`

error[E0061]: this function takes 7 arguments but 1 argument was supplied
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:90:43
   |
90 |         let improvement_engine = Arc::new(RecursiveImprovementEngine::new(config.clone())?);
   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---------------- multiple arguments are missing
   |
note: expected `QuantumMCTSConfig`, found `Arc<QuantumMCTSConfig>`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:90:75
   |
90 |         let improvement_engine = Arc::new(RecursiveImprovementEngine::new(config.clone())?);
   |                                                                           ^^^^^^^^^^^^^^
   = note: expected struct `quantum_mcts::config::core::QuantumMCTSConfig`
              found struct `std::sync::Arc<quantum_mcts::config::core::QuantumMCTSConfig>`
note: associated function defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/improvement/engine.rs:60:12
   |
60 |     pub fn new(
   |            ^^^
61 |         config: QuantumMCTSConfig,
   |         -------------------------
62 |         performance_analyzer: Arc<PerformanceAnalyzer>,
   |         ----------------------------------------------
63 |         error_correction: Arc<QuantumErrorCorrection>,
   |         ---------------------------------------------
64 |         metrics: Arc<RwLock<QuantumMetrics>>,
   |         ------------------------------------
65 |         selector: QuantumSelector,
   |         -------------------------
66 |         expander: QuantumExpander,
   |         -------------------------
67 |         backpropagator: QuantumBackpropagator,
   |         -------------------------------------
help: provide the arguments
   |
90 -         let improvement_engine = Arc::new(RecursiveImprovementEngine::new(config.clone())?);
90 +         let improvement_engine = Arc::new(RecursiveImprovementEngine::new(/* quantum_mcts::config::core::QuantumMCTSConfig */, /* std::sync::Arc<cognitive::performance::PerformanceAnalyzer> */, /* std::sync::Arc<QuantumErrorCorrection> */, /* std::sync::Arc<tokio::sync::RwLock<QuantumMetrics>> */, /* QuantumSelector */, /* quantum_expander::QuantumExpander */, /* QuantumBackpropagator */)?);
   |

error[E0277]: the `?` operator can only be applied to values that implement `Try`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:90:43
   |
90 |         let improvement_engine = Arc::new(RecursiveImprovementEngine::new(config.clone())?);
   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `RecursiveImprovementEngine`
   |
   = help: the trait `Try` is not implemented for `RecursiveImprovementEngine`

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:91:67
   |
91 |         let statistics = Arc::new(QuantumStatisticsCollector::new(config.clone())?);
   |                                   ------------------------------- ^^^^^^^^^^^^^^ expected `QuantumMCTSConfig`, found `Arc<QuantumMCTSConfig>`
   |                                   |
   |                                   arguments to this function are incorrect
   |
   = note: expected struct `quantum_mcts::config::core::QuantumMCTSConfig`
              found struct `std::sync::Arc<quantum_mcts::config::core::QuantumMCTSConfig>`
note: associated function defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/collector.rs:45:12
   |
45 |     pub fn new(config: QuantumMCTSConfig) -> Self {
   |            ^^^ -------------------------

error[E0277]: the `?` operator can only be applied to values that implement `Try`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:91:35
   |
91 |         let statistics = Arc::new(QuantumStatisticsCollector::new(config.clone())?);
   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `QuantumStatisticsCollector`
   |
   = help: the trait `Try` is not implemented for `QuantumStatisticsCollector`

error[E0061]: this function takes 5 arguments but 2 arguments were supplied
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:94:29
   |
94 |           let root = Arc::new(QuantumMCTSNode::new(
   |  _____________________________^^^^^^^^^^^^^^^^^^^^-
95 | |             "root".to_string(),
96 | |             config.clone(),
97 | |         )?);
   | |_________- three arguments of type `Vec<std::string::String>`, `std::option::Option<std::string::String>`, and `u32` are missing
   |
note: expected `QuantumNodeState`, found `Arc<QuantumMCTSConfig>`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:96:13
   |
96 |             config.clone(),
   |             ^^^^^^^^^^^^^^
   = note: expected struct `quantum_mcts::node_state::core::QuantumNodeState`
              found struct `std::sync::Arc<quantum_mcts::config::core::QuantumMCTSConfig>`
note: associated function defined here
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/node_state/node.rs:41:12
   |
41 |     pub fn new(
   |            ^^^
42 |         id: String,
43 |         quantum_state: QuantumNodeState,
   |         -------------------------------
44 |         untried_actions: Vec<String>,
   |         ----------------------------
45 |         parent: Option<String>,
   |         ----------------------
46 |         improvement_depth: u32,
   |         ----------------------
help: provide the arguments
   |
94 -         let root = Arc::new(QuantumMCTSNode::new(
95 -             "root".to_string(),
96 -             config.clone(),
97 -         )?);
94 +         let root = Arc::new(QuantumMCTSNode::new("root".to_string(), /* quantum_mcts::node_state::core::QuantumNodeState */, /* Vec<std::string::String> */, /* std::option::Option<std::string::String> */, /* u32 */)?);
   |

error[E0277]: the `?` operator can only be applied to values that implement `Try`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/mod.rs:94:29
   |
94 |           let root = Arc::new(QuantumMCTSNode::new(
   |  _____________________________^
95 | |             "root".to_string(),
96 | |             config.clone(),
97 | |         )?);
   | |__________^ the `?` operator cannot be applied to type `quantum_mcts::node_state::node::QuantumMCTSNode`
   |
   = help: the trait `Try` is not implemented for `quantum_mcts::node_state::node::QuantumMCTSNode`

error[E0599]: no variant or associated item named `SerializationError` found for enum `graph_db::GraphError` in the current scope
   --> packages/sweetmcp-memory/src/graph/entity/base_entity.rs:161:25
    |
161 |             GraphError::SerializationError(format!("Failed to serialize attributes: {}", e))
    |                         ^^^^^^^^^^^^^^^^^^ variant or associated item not found in `graph_db::GraphError`
    |
   ::: packages/sweetmcp-memory/src/graph/graph_db.rs:16:1
    |
16  | pub enum GraphError {
    | ------------------- variant or associated item `SerializationError` not found for this enum
    |
help: there is a variant with a similar name
    |
161 -             GraphError::SerializationError(format!("Failed to serialize attributes: {}", e))
161 +             GraphError::ValidationError(format!("Failed to serialize attributes: {}", e))
    |

error[E0599]: no variant or associated item named `SerializationError` found for enum `graph_db::GraphError` in the current scope
   --> packages/sweetmcp-memory/src/graph/entity/base_entity.rs:175:29
    |
175 |                 GraphError::SerializationError(format!("Failed to parse JSON: {}", e))
    |                             ^^^^^^^^^^^^^^^^^^ variant or associated item not found in `graph_db::GraphError`
    |
   ::: packages/sweetmcp-memory/src/graph/graph_db.rs:16:1
    |
16  | pub enum GraphError {
    | ------------------- variant or associated item `SerializationError` not found for this enum
    |
help: there is a variant with a similar name
    |
175 -                 GraphError::SerializationError(format!("Failed to parse JSON: {}", e))
175 +                 GraphError::ValidationError(format!("Failed to parse JSON: {}", e))
    |

error[E0609]: no field `node_type` on type `graph_db::Node`
   --> packages/sweetmcp-memory/src/graph/entity/base_entity.rs:259:37
    |
259 |             .unwrap_or_else(|| node.node_type.clone());
    |                                     ^^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `properties`, `labels`

error[E0599]: no variant or associated item named `SerializationError` found for enum `graph_db::GraphError` in the current scope
  --> packages/sweetmcp-memory/src/graph/entity/builder.rs:47:38
   |
47 |             .map_err(|e| GraphError::SerializationError(e.to_string()))?;
   |                                      ^^^^^^^^^^^^^^^^^^ variant or associated item not found in `graph_db::GraphError`
   |
  ::: packages/sweetmcp-memory/src/graph/graph_db.rs:16:1
   |
16 | pub enum GraphError {
   | ------------------- variant or associated item `SerializationError` not found for this enum
   |
help: there is a variant with a similar name
   |
47 -             .map_err(|e| GraphError::SerializationError(e.to_string()))?;
47 +             .map_err(|e| GraphError::ValidationError(e.to_string()))?;
   |

error[E0599]: no variant or associated item named `SerializationError` found for enum `graph_db::GraphError` in the current scope
  --> packages/sweetmcp-memory/src/graph/entity/builder.rs:51:42
   |
51 |                 .map_err(|e| GraphError::SerializationError(e.to_string()))?,
   |                                          ^^^^^^^^^^^^^^^^^^ variant or associated item not found in `graph_db::GraphError`
   |
  ::: packages/sweetmcp-memory/src/graph/graph_db.rs:16:1
   |
16 | pub enum GraphError {
   | ------------------- variant or associated item `SerializationError` not found for this enum
   |
help: there is a variant with a similar name
   |
51 -                 .map_err(|e| GraphError::SerializationError(e.to_string()))?,
51 +                 .map_err(|e| GraphError::ValidationError(e.to_string()))?,
   |

error[E0599]: no variant or associated item named `SerializationError` found for enum `graph_db::GraphError` in the current scope
  --> packages/sweetmcp-memory/src/graph/entity/builder.rs:52:46
   |
52 |             Err(e) => return Err(GraphError::SerializationError(e.to_string())),
   |                                              ^^^^^^^^^^^^^^^^^^ variant or associated item not found in `graph_db::GraphError`
   |
  ::: packages/sweetmcp-memory/src/graph/graph_db.rs:16:1
   |
16 | pub enum GraphError {
   | ------------------- variant or associated item `SerializationError` not found for this enum
   |
help: there is a variant with a similar name
   |
52 -             Err(e) => return Err(GraphError::SerializationError(e.to_string())),
52 +             Err(e) => return Err(GraphError::ValidationError(e.to_string())),
   |

error[E0599]: no method named `get_attribute` found for reference `&entity::core::BaseEntity` in the current scope
   --> packages/sweetmcp-memory/src/graph/entity/comparison.rs:110:24
    |
110 |             match self.get_attribute(attr_name) {
    |                        ^^^^^^^^^^^^^
    |
    = help: items from traits can only be used if the trait is in scope
help: there is a method `set_attribute` with a similar name, but with different arguments
   --> packages/sweetmcp-memory/src/graph/entity/core.rs:29:5
    |
29  |     fn set_attribute(&mut self, name: &str, value: Value);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: trait `Entity` which provides `get_attribute` is implemented but not in scope; perhaps you want to import it
    |
6   + use crate::graph::entity::core::Entity;
    |

error[E0599]: no method named `get_attribute` found for reference `&entity::core::BaseEntity` in the current scope
   --> packages/sweetmcp-memory/src/graph/entity/comparison.rs:203:25
    |
203 |             match (self.get_attribute(attr_name), other.get_attribute(attr_name)) {
    |                         ^^^^^^^^^^^^^
    |
    = help: items from traits can only be used if the trait is in scope
help: there is a method `set_attribute` with a similar name, but with different arguments
   --> packages/sweetmcp-memory/src/graph/entity/core.rs:29:5
    |
29  |     fn set_attribute(&mut self, name: &str, value: Value);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: trait `Entity` which provides `get_attribute` is implemented but not in scope; perhaps you want to import it
    |
6   + use crate::graph::entity::core::Entity;
    |

error[E0599]: no method named `get_attribute` found for reference `&entity::core::BaseEntity` in the current scope
   --> packages/sweetmcp-memory/src/graph/entity/comparison.rs:203:57
    |
203 |             match (self.get_attribute(attr_name), other.get_attribute(attr_name)) {
    |                                                         ^^^^^^^^^^^^^
    |
    = help: items from traits can only be used if the trait is in scope
help: there is a method `set_attribute` with a similar name, but with different arguments
   --> packages/sweetmcp-memory/src/graph/entity/core.rs:29:5
    |
29  |     fn set_attribute(&mut self, name: &str, value: Value);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: trait `Entity` which provides `get_attribute` is implemented but not in scope; perhaps you want to import it
    |
6   + use crate::graph::entity::core::Entity;
    |

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/graph/entity/conversion.rs:19:20
   |
19 |             if let Ok(i) = n.as_int() {
   |                    ^^^^^   ---------- this expression has type `i64`
   |                    |
   |                    expected `i64`, found `Result<_, _>`
   |
   = note: expected type `i64`
              found enum `std::result::Result<_, _>`

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/graph/entity/conversion.rs:21:27
   |
21 |             } else if let Ok(f) = n.as_float() {
   |                           ^^^^^   ------------ this expression has type `f64`
   |                           |
   |                           expected `f64`, found `Result<_, _>`
   |
   = note: expected type `f64`
              found enum `std::result::Result<_, _>`

error[E0599]: no variant or associated item named `SerializationError` found for enum `graph_db::GraphError` in the current scope
  --> packages/sweetmcp-memory/src/graph/entity/conversion.rs:95:33
   |
95 |                 Err(GraphError::SerializationError(
   |                                 ^^^^^^^^^^^^^^^^^^ variant or associated item not found in `graph_db::GraphError`
   |
  ::: packages/sweetmcp-memory/src/graph/graph_db.rs:16:1
   |
16 | pub enum GraphError {
   | ------------------- variant or associated item `SerializationError` not found for this enum
   |
help: there is a variant with a similar name
   |
95 -                 Err(GraphError::SerializationError(
95 +                 Err(GraphError::ValidationError(
   |

error[E0277]: the trait bound `surrealdb::sql::Datetime: std::convert::From<chrono::DateTime<FixedOffset>>` is not satisfied
   --> packages/sweetmcp-memory/src/graph/entity/conversion.rs:105:45
    |
105 |                 Ok(Value::Datetime(datetime.into()))
    |                                             ^^^^ the trait `std::convert::From<chrono::DateTime<FixedOffset>>` is not implemented for `surrealdb::sql::Datetime`
    |
    = help: the trait `From<chrono::DateTime<FixedOffset>>` is not implemented for `surrealdb::sql::Datetime`
            but trait `From<chrono::DateTime<Utc>>` is implemented for it
    = help: for that trait implementation, expected `Utc`, found `FixedOffset`
    = note: required for `chrono::DateTime<FixedOffset>` to implement `std::convert::Into<surrealdb::sql::Datetime>`

error[E0599]: no method named `is_finite` found for reference `&serde_json::Number` in the current scope
   --> packages/sweetmcp-memory/src/graph/entity/conversion.rs:190:18
    |
190 |             if n.is_finite() {
    |                  ^^^^^^^^^ method not found in `&serde_json::Number`

error[E0599]: no variant or associated item named `SerializationError` found for enum `graph_db::GraphError` in the current scope
   --> packages/sweetmcp-memory/src/graph/entity/core.rs:119:38
    |
119 |             .map_err(|e| GraphError::SerializationError(e.to_string()))?;
    |                                      ^^^^^^^^^^^^^^^^^^ variant or associated item not found in `graph_db::GraphError`
    |
   ::: packages/sweetmcp-memory/src/graph/graph_db.rs:16:1
    |
16  | pub enum GraphError {
    | ------------------- variant or associated item `SerializationError` not found for this enum
    |
help: there is a variant with a similar name
    |
119 -             .map_err(|e| GraphError::SerializationError(e.to_string()))?;
119 +             .map_err(|e| GraphError::ValidationError(e.to_string()))?;
    |

error[E0599]: no variant or associated item named `SerializationError` found for enum `graph_db::GraphError` in the current scope
   --> packages/sweetmcp-memory/src/graph/entity/core.rs:123:42
    |
123 |                 .map_err(|e| GraphError::SerializationError(e.to_string()))?,
    |                                          ^^^^^^^^^^^^^^^^^^ variant or associated item not found in `graph_db::GraphError`
    |
   ::: packages/sweetmcp-memory/src/graph/graph_db.rs:16:1
    |
16  | pub enum GraphError {
    | ------------------- variant or associated item `SerializationError` not found for this enum
    |
help: there is a variant with a similar name
    |
123 -                 .map_err(|e| GraphError::SerializationError(e.to_string()))?,
123 +                 .map_err(|e| GraphError::ValidationError(e.to_string()))?,
    |

error[E0599]: no variant or associated item named `SerializationError` found for enum `graph_db::GraphError` in the current scope
   --> packages/sweetmcp-memory/src/graph/entity/core.rs:124:46
    |
124 |             Err(e) => return Err(GraphError::SerializationError(e.to_string())),
    |                                              ^^^^^^^^^^^^^^^^^^ variant or associated item not found in `graph_db::GraphError`
    |
   ::: packages/sweetmcp-memory/src/graph/graph_db.rs:16:1
    |
16  | pub enum GraphError {
    | ------------------- variant or associated item `SerializationError` not found for this enum
    |
help: there is a variant with a similar name
    |
124 -             Err(e) => return Err(GraphError::SerializationError(e.to_string())),
124 +             Err(e) => return Err(GraphError::ValidationError(e.to_string())),
    |

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/graph/entity/queries.rs:416:36
    |
411 |                         results.insert(key, value);
    |                         -------             ----- this argument has type `serde_json::Value`...
    |                         |
    |                         ... which causes `results` to have type `std::collections::HashMap<std::string::String, serde_json::Value>`
...
416 |             Ok(AggregationResult { results })
    |                                    ^^^^^^^ expected `surrealdb::sql::Value`, found `serde_json::Value`
    |
    = note: `serde_json::Value` and `surrealdb::sql::Value` have similar names, but are actually distinct types
note: `serde_json::Value` is defined in crate `serde_json`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-1.0.141/src/value/mod.rs:116:1
    |
116 | pub enum Value {
    | ^^^^^^^^^^^^^^
note: `surrealdb::sql::Value` is defined in crate `surrealdb_core`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/surrealdb-core-2.3.7/src/sql/value/value.rs:92:1
    |
92  | pub enum Value {
    | ^^^^^^^^^^^^^^

error[E0369]: binary operation `==` cannot be applied to type `AggregationType`
   --> packages/sweetmcp-memory/src/graph/entity/queries.rs:513:45
    |
513 |                 let expr = if agg.operation == AggregationType::Count {
    |                               ------------- ^^ ---------------------- AggregationType
    |                               |
    |                               AggregationType
    |
note: an implementation of `PartialEq` might be missing for `AggregationType`
   --> packages/sweetmcp-memory/src/graph/entity/queries.rs:452:1
    |
452 | pub enum AggregationType {
    | ^^^^^^^^^^^^^^^^^^^^^^^^ must implement `PartialEq`
help: consider annotating `AggregationType` with `#[derive(PartialEq)]`
    |
452 + #[derive(PartialEq)]
453 | pub enum AggregationType {
    |

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/graph/entity/relationships.rs:186:21
    |
186 |                     props
    |                     ^^^^^ expected `serde_json::Value`, found `surrealdb::sql::Value`
    |
    = note: `surrealdb::sql::Value` and `serde_json::Value` have similar names, but are actually distinct types
note: `surrealdb::sql::Value` is defined in crate `surrealdb_core`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/surrealdb-core-2.3.7/src/sql/value/value.rs:92:1
    |
92  | pub enum Value {
    | ^^^^^^^^^^^^^^
note: `serde_json::Value` is defined in crate `serde_json`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-1.0.141/src/value/mod.rs:116:1
    |
116 | pub enum Value {
    | ^^^^^^^^^^^^^^
note: return type inferred to be `std::collections::HashMap<std::string::String, serde_json::Value>` here
   --> packages/sweetmcp-memory/src/graph/entity/relationships.rs:172:13
    |
172 |             relationship.validate()?;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^

error[E0061]: this method takes 1 argument but 2 arguments were supplied
   --> packages/sweetmcp-memory/src/graph/entity/relationships.rs:191:16
    |
191 |             db.create_node(&table_name, node).await?;
    |                ^^^^^^^^^^^              ---- unexpected argument #2 of type `graph_db::Node`
    |
note: expected `HashMap<String, Value>`, found `&String`
   --> packages/sweetmcp-memory/src/graph/entity/relationships.rs:191:28
    |
191 |             db.create_node(&table_name, node).await?;
    |                            ^^^^^^^^^^^
    = note: expected struct `std::collections::HashMap<std::string::String, serde_json::Value>`
            found reference `&std::string::String`
note: method defined here
   --> packages/sweetmcp-memory/src/graph/graph_db.rs:136:8
    |
136 |     fn create_node(&self, properties: NodeProperties) -> PendingNode;
    |        ^^^^^^^^^^^        ----------
help: remove the extra argument
    |
191 -             db.create_node(&table_name, node).await?;
191 +             db.create_node(/* std::collections::HashMap<std::string::String, serde_json::Value> */).await?;
    |

error[E0061]: this method takes 1 argument but 2 arguments were supplied
   --> packages/sweetmcp-memory/src/graph/entity/relationships.rs:204:22
    |
204 |             match db.get_node(&table_name, &relationship_id).await? {
    |                      ^^^^^^^^              ---------------- unexpected argument #2 of type `&std::string::String`
    |
note: method defined here
   --> packages/sweetmcp-memory/src/graph/graph_db.rs:139:8
    |
139 |     fn get_node(&self, id: &str) -> NodeQuery;
    |        ^^^^^^^^
help: remove the extra argument
    |
204 -             match db.get_node(&table_name, &relationship_id).await? {
204 +             match db.get_node(&table_name).await? {
    |

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/graph/entity/relationships.rs:297:21
    |
297 |                     props
    |                     ^^^^^ expected `serde_json::Value`, found `surrealdb::sql::Value`
    |
    = note: `surrealdb::sql::Value` and `serde_json::Value` have similar names, but are actually distinct types
note: `surrealdb::sql::Value` is defined in crate `surrealdb_core`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/surrealdb-core-2.3.7/src/sql/value/value.rs:92:1
    |
92  | pub enum Value {
    | ^^^^^^^^^^^^^^
note: `serde_json::Value` is defined in crate `serde_json`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-1.0.141/src/value/mod.rs:116:1
    |
116 | pub enum Value {
    | ^^^^^^^^^^^^^^
note: return type inferred to be `std::collections::HashMap<std::string::String, serde_json::Value>` here
   --> packages/sweetmcp-memory/src/graph/entity/relationships.rs:283:13
    |
283 |             relationship.validate()?;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/graph/entity/relationships.rs:302:41
    |
302 |             db.update_node(&table_name, node).await?;
    |                -----------              ^^^^ expected `HashMap<String, Value>`, found `Node`
    |                |
    |                arguments to this method are incorrect
    |
    = note: expected struct `std::collections::HashMap<std::string::String, serde_json::Value>`
               found struct `graph_db::Node`
note: method defined here
   --> packages/sweetmcp-memory/src/graph/graph_db.rs:142:8
    |
142 |     fn update_node(&self, id: &str, properties: NodeProperties) -> NodeUpdate;
    |        ^^^^^^^^^^^                  ----------

error[E0061]: this method takes 1 argument but 2 arguments were supplied
   --> packages/sweetmcp-memory/src/graph/entity/relationships.rs:315:16
    |
315 |             db.delete_node(&table_name, &relationship_id).await
    |                ^^^^^^^^^^^              ---------------- unexpected argument #2 of type `&std::string::String`
    |
note: method defined here
   --> packages/sweetmcp-memory/src/graph/graph_db.rs:145:8
    |
145 |     fn delete_node(&self, id: &str) -> NodeUpdate;
    |        ^^^^^^^^^^^
help: remove the extra argument
    |
315 -             db.delete_node(&table_name, &relationship_id).await
315 +             db.delete_node(&table_name).await
    |

error[E0271]: expected `{async block@packages/sweetmcp-memory/src/graph/entity/relationships.rs:314:18: 314:28}` to be a future that resolves to `Result<bool, GraphError>`, but it resolves to `Result<(), GraphError>`
   --> packages/sweetmcp-memory/src/graph/entity/relationships.rs:314:9
    |
314 | /         Box::pin(async move {
315 | |             db.delete_node(&table_name, &relationship_id).await
316 | |         })
    | |__________^ expected `Result<bool, GraphError>`, found `Result<(), GraphError>`
    |
    = note: expected enum `std::result::Result<bool, _>`
               found enum `std::result::Result<(), _>`
    = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<dyn Future<Output = Result<bool, GraphError>> + Send>>`
    = note: the full name for the type has been written to '/Volumes/samsung_t9/sweetmcp/target/debug/deps/sweetmcp_memory-4002f0e13ee93e6a.long-type-10810010938049425330.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/graph/entity/relationships.rs:323:17
    |
322 |             .and_then(|v| match v {
    |                                 - this expression has type `&serde_json::Value`
323 |                 Value::Strand(s) => Some(s.to_string()),
    |                 ^^^^^^^^^^^^^^^^ expected `serde_json::Value`, found `surrealdb::sql::Value`
    |
    = note: `surrealdb::sql::Value` and `serde_json::Value` have similar names, but are actually distinct types
note: `surrealdb::sql::Value` is defined in crate `surrealdb_core`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/surrealdb-core-2.3.7/src/sql/value/value.rs:92:1
    |
92  | pub enum Value {
    | ^^^^^^^^^^^^^^
note: `serde_json::Value` is defined in crate `serde_json`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-1.0.141/src/value/mod.rs:116:1
    |
116 | pub enum Value {
    | ^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/graph/entity/relationships.rs:330:17
    |
329 |             .and_then(|v| match v {
    |                                 - this expression has type `&serde_json::Value`
330 |                 Value::Strand(s) => Some(s.to_string()),
    |                 ^^^^^^^^^^^^^^^^ expected `serde_json::Value`, found `surrealdb::sql::Value`
    |
    = note: `surrealdb::sql::Value` and `serde_json::Value` have similar names, but are actually distinct types
note: `surrealdb::sql::Value` is defined in crate `surrealdb_core`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/surrealdb-core-2.3.7/src/sql/value/value.rs:92:1
    |
92  | pub enum Value {
    | ^^^^^^^^^^^^^^
note: `serde_json::Value` is defined in crate `serde_json`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-1.0.141/src/value/mod.rs:116:1
    |
116 | pub enum Value {
    | ^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/graph/entity/relationships.rs:342:17
    |
341 |             .and_then(|v| match v {
    |                                 - this expression has type `&serde_json::Value`
342 |                 Value::Number(n) => n.as_float(),
    |                 ^^^^^^^^^^^^^^^^ expected `serde_json::Value`, found `surrealdb::sql::Value`
    |
    = note: `surrealdb::sql::Value` and `serde_json::Value` have similar names, but are actually distinct types
note: `surrealdb::sql::Value` is defined in crate `surrealdb_core`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/surrealdb-core-2.3.7/src/sql/value/value.rs:92:1
    |
92  | pub enum Value {
    | ^^^^^^^^^^^^^^
note: `serde_json::Value` is defined in crate `serde_json`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-1.0.141/src/value/mod.rs:116:1
    |
116 | pub enum Value {
    | ^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/graph/entity/relationships.rs:342:37
    |
342 |                 Value::Number(n) => n.as_float(),
    |                                     ^^^^^^^^^^^^ expected `Option<_>`, found `f64`
    |
    = note: expected enum `std::option::Option<_>`
               found type `f64`
help: try wrapping the expression in `Some`
    |
342 |                 Value::Number(n) => Some(n.as_float()),
    |                                     +++++            +

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/graph/entity/relationships.rs:349:17
    |
348 |             .and_then(|v| match v {
    |                                 - this expression has type `&serde_json::Value`
349 |                 Value::Bool(b) => Some(*b),
    |                 ^^^^^^^^^^^^^^ expected `serde_json::Value`, found `surrealdb::sql::Value`
    |
    = note: `surrealdb::sql::Value` and `serde_json::Value` have similar names, but are actually distinct types
note: `surrealdb::sql::Value` is defined in crate `surrealdb_core`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/surrealdb-core-2.3.7/src/sql/value/value.rs:92:1
    |
92  | pub enum Value {
    | ^^^^^^^^^^^^^^
note: `serde_json::Value` is defined in crate `serde_json`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-1.0.141/src/value/mod.rs:116:1
    |
116 | pub enum Value {
    | ^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/graph/entity/relationships.rs:356:17
    |
355 |             .and_then(|v| match v {
    |                                 - this expression has type `&serde_json::Value`
356 |                 Value::Strand(s) => chrono::DateTime::parse_from_rfc3339(&s.to_string()).ok(),
    |                 ^^^^^^^^^^^^^^^^ expected `serde_json::Value`, found `surrealdb::sql::Value`
    |
    = note: `surrealdb::sql::Value` and `serde_json::Value` have similar names, but are actually distinct types
note: `surrealdb::sql::Value` is defined in crate `surrealdb_core`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/surrealdb-core-2.3.7/src/sql/value/value.rs:92:1
    |
92  | pub enum Value {
    | ^^^^^^^^^^^^^^
note: `serde_json::Value` is defined in crate `serde_json`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-1.0.141/src/value/mod.rs:116:1
    |
116 | pub enum Value {
    | ^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/graph/entity/relationships.rs:364:17
    |
363 |             .and_then(|v| match v {
    |                                 - this expression has type `&serde_json::Value`
364 |                 Value::Strand(s) => chrono::DateTime::parse_from_rfc3339(&s.to_string()).ok(),
    |                 ^^^^^^^^^^^^^^^^ expected `serde_json::Value`, found `surrealdb::sql::Value`
    |
    = note: `surrealdb::sql::Value` and `serde_json::Value` have similar names, but are actually distinct types
note: `surrealdb::sql::Value` is defined in crate `surrealdb_core`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/surrealdb-core-2.3.7/src/sql/value/value.rs:92:1
    |
92  | pub enum Value {
    | ^^^^^^^^^^^^^^
note: `serde_json::Value` is defined in crate `serde_json`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-1.0.141/src/value/mod.rs:116:1
    |
116 | pub enum Value {
    | ^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/graph/entity/relationships.rs:384:13
    |
384 |             properties,
    |             ^^^^^^^^^^ expected `surrealdb::sql::Value`, found `serde_json::Value`
    |
    = note: `serde_json::Value` and `surrealdb::sql::Value` have similar names, but are actually distinct types
note: `serde_json::Value` is defined in crate `serde_json`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-1.0.141/src/value/mod.rs:116:1
    |
116 | pub enum Value {
    | ^^^^^^^^^^^^^^
note: `surrealdb::sql::Value` is defined in crate `surrealdb_core`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/surrealdb-core-2.3.7/src/sql/value/value.rs:92:1
    |
92  | pub enum Value {
    | ^^^^^^^^^^^^^^

error[E0277]: the type `dyn entity::validation::ValidationRule` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary
   --> packages/sweetmcp-memory/src/graph/entity/validation.rs:154:44
    |
154 |             match std::panic::catch_unwind(|| rule.clone_rule()) {
    |                   ------------------------ ^^^^^^^^^^^^^^^^^^^^ `dyn entity::validation::ValidationRule` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary
    |                   |
    |                   required by a bound introduced by this call
    |
    = help: the trait `RefUnwindSafe` is not implemented for `dyn entity::validation::ValidationRule`
    = note: required for `&dyn entity::validation::ValidationRule` to implement `UnwindSafe`
note: required because it's used within this closure
   --> packages/sweetmcp-memory/src/graph/entity/validation.rs:154:44
    |
154 |             match std::panic::catch_unwind(|| rule.clone_rule()) {
    |                                            ^^
note: required by a bound in `std::panic::catch_unwind`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/std/src/panic.rs:358:40
    |
358 | pub fn catch_unwind<F: FnOnce() -> R + UnwindSafe, R>(f: F) -> Result<R> {
    |                                        ^^^^^^^^^^ required by this bound in `catch_unwind`

error[E0038]: the trait `llm::LLMProvider` is not dyn compatible
   --> packages/sweetmcp-memory/src/llm/completion/mod.rs:18:16
    |
18  |         Self { provider }
    |                ^^^^^^^^ `llm::LLMProvider` is not dyn compatible
    |
note: for a trait to be dyn compatible it needs to allow building a vtable
      for more information, visit <https://doc.rust-lang.org/reference/items/traits.html#dyn-compatibility>
   --> packages/sweetmcp-memory/src/llm/mod.rs:93:10
    |
83  | pub trait LLMProvider: Send + Sync {
    |           ----------- this trait is not dyn compatible...
...
93  |     ) -> impl std::future::Future<Output = Result<String>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_advanced` references an `impl Trait` type in its return type
...
101 |     ) -> impl std::future::Future<Output = Result<String>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_with_messages` references an `impl Trait` type in its return type
...
110 |     ) -> impl std::future::Future<Output = Result<std::collections::HashMap<String, String>>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_with_tools` references an `impl Trait` type in its return type
    = help: consider moving `complete_advanced` to another trait
    = help: consider moving `complete_with_messages` to another trait
    = help: consider moving `complete_with_tools` to another trait
    = help: the following types implement `llm::LLMProvider`:
              llm::anthropic::AnthropicProvider
              llm::openai::OpenAIProvider
            consider defining an enum where each variant holds one of these types,
            implementing `llm::LLMProvider` for this new enum and using it instead
    = note: `llm::LLMProvider` may be implemented in other crates; if you want to support your users passing their own types here, you can't refer to a specific type

error[E0038]: the trait `llm::LLMProvider` is not dyn compatible
   --> packages/sweetmcp-memory/src/llm/content_analyzer/mod.rs:42:16
    |
42  |         Self { provider }
    |                ^^^^^^^^ `llm::LLMProvider` is not dyn compatible
    |
note: for a trait to be dyn compatible it needs to allow building a vtable
      for more information, visit <https://doc.rust-lang.org/reference/items/traits.html#dyn-compatibility>
   --> packages/sweetmcp-memory/src/llm/mod.rs:93:10
    |
83  | pub trait LLMProvider: Send + Sync {
    |           ----------- this trait is not dyn compatible...
...
93  |     ) -> impl std::future::Future<Output = Result<String>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_advanced` references an `impl Trait` type in its return type
...
101 |     ) -> impl std::future::Future<Output = Result<String>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_with_messages` references an `impl Trait` type in its return type
...
110 |     ) -> impl std::future::Future<Output = Result<std::collections::HashMap<String, String>>> + Send;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `complete_with_tools` references an `impl Trait` type in its return type
    = help: consider moving `complete_advanced` to another trait
    = help: consider moving `complete_with_messages` to another trait
    = help: consider moving `complete_with_tools` to another trait
    = help: the following types implement `llm::LLMProvider`:
              llm::anthropic::AnthropicProvider
              llm::openai::OpenAIProvider
            consider defining an enum where each variant holds one of these types,
            implementing `llm::LLMProvider` for this new enum and using it instead
    = note: `llm::LLMProvider` may be implemented in other crates; if you want to support your users passing their own types here, you can't refer to a specific type

error[E0616]: field `cache` of struct `MemoryLifecycle` is private
  --> packages/sweetmcp-memory/src/memory/manager.rs:82:24
   |
82 |         self.lifecycle.cache.memory_count()
   |                        ^^^^^ private field

warning: use of deprecated method `rand::Rng::gen_range`: Renamed to `random_range`
  --> packages/sweetmcp-memory/src/memory/memory_benchmarks.rs:61:26
   |
61 |     (0..dim).map(|_| rng.gen_range(0.0..1.0)).collect()
   |                          ^^^^^^^^^

error[E0277]: the trait bound `StandardUniform: Distribution<usize>` is not satisfied
   --> packages/sweetmcp-memory/src/memory/memory_benchmarks.rs:107:62
    |
107 |                     let idx = black_box(500 + rand::random::<usize>() % 500);
    |                                                              ^^^^^ the trait `Distribution<usize>` is not implemented for `StandardUniform`
    |
note: there are multiple different versions of crate `rand` in the dependency graph
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.9.2/src/distr/distribution.rs:35:1
    |
35  | pub trait Distribution<T> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^ this is the required trait
    |
   ::: packages/sweetmcp-memory/src/cognitive/mcts/tree_operations.rs:9:5
    |
9   | use rand::Rng;
    |     ---- one version of crate `rand` used here, as a direct dependency of the current crate
    |
   ::: packages/sweetmcp-memory/src/cognitive/manager.rs:24:5
    |
24  | use surrealdb::Surreal;
    |     --------- one version of crate `rand` used here, as a dependency of crate `surrealdb_core`
    |
   ::: /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.9.2/src/distr/mod.rs:214:1
    |
214 | pub struct StandardUniform;
    | -------------------------- this type doesn't implement the required trait
    |
   ::: /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/src/distributions/distribution.rs:35:1
    |
35  | pub trait Distribution<T> {
    | ------------------------- this is the found trait
    = help: you can use `cargo tree` to explore your dependency tree
note: required by a bound in `rand::random`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.9.2/src/lib.rs:174:22
    |
172 | pub fn random<T>() -> T
    |        ------ required by a bound in this function
173 | where
174 |     StandardUniform: Distribution<T>,
    |                      ^^^^^^^^^^^^^^^ required by this bound in `random`

error[E0277]: the trait bound `StandardUniform: Distribution<usize>` is not satisfied
   --> packages/sweetmcp-memory/src/memory/memory_benchmarks.rs:120:56
    |
120 |                     let idx = black_box(rand::random::<usize>() % 1000);
    |                                                        ^^^^^ the trait `Distribution<usize>` is not implemented for `StandardUniform`
    |
note: there are multiple different versions of crate `rand` in the dependency graph
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.9.2/src/distr/distribution.rs:35:1
    |
35  | pub trait Distribution<T> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^ this is the required trait
    |
   ::: packages/sweetmcp-memory/src/cognitive/mcts/tree_operations.rs:9:5
    |
9   | use rand::Rng;
    |     ---- one version of crate `rand` used here, as a direct dependency of the current crate
    |
   ::: packages/sweetmcp-memory/src/cognitive/manager.rs:24:5
    |
24  | use surrealdb::Surreal;
    |     --------- one version of crate `rand` used here, as a dependency of crate `surrealdb_core`
    |
   ::: /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.9.2/src/distr/mod.rs:214:1
    |
214 | pub struct StandardUniform;
    | -------------------------- this type doesn't implement the required trait
    |
   ::: /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/src/distributions/distribution.rs:35:1
    |
35  | pub trait Distribution<T> {
    | ------------------------- this is the found trait
    = help: you can use `cargo tree` to explore your dependency tree
note: required by a bound in `rand::random`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.9.2/src/lib.rs:174:22
    |
172 | pub fn random<T>() -> T
    |        ------ required by a bound in this function
173 | where
174 |     StandardUniform: Distribution<T>,
    |                      ^^^^^^^^^^^^^^^ required by this bound in `random`

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/memory/memory_benchmarks.rs:161:56
    |
161 | ...                   graph_db.create_entity(entity).await.unwrap();
    |                                ------------- ^^^^^^ expected `()`, found `String`
    |                                |
    |                                arguments to this method are incorrect
    |
note: method defined here
   --> packages/sweetmcp-memory/src/memory/memory_benchmarks.rs:28:14
    |
28  |     async fn create_entity(&self, _entity: ()) -> Result<(), ()> {
    |              ^^^^^^^^^^^^^        -----------

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/memory/memory_benchmarks.rs:268:40
    |
268 |                 graph_db.create_entity(entity).await.unwrap();
    |                          ------------- ^^^^^^ expected `()`, found `String`
    |                          |
    |                          arguments to this method are incorrect
    |
note: method defined here
   --> packages/sweetmcp-memory/src/memory/memory_benchmarks.rs:28:14
    |
28  |     async fn create_entity(&self, _entity: ()) -> Result<(), ()> {
    |              ^^^^^^^^^^^^^        -----------

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/memory/memory_manager/types.rs:80:23
   |
80 |             metadata: relationship.metadata.clone(),
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Value`, found `Option<Value>`
   |
   = note: expected enum `serde_json::Value`
              found enum `std::option::Option<serde_json::Value>`
help: consider using `Option::expect` to unwrap the `std::option::Option<serde_json::Value>` value, panicking if the value is an `Option::None`
   |
80 |             metadata: relationship.metadata.clone().expect("REASON"),
   |                                                    +++++++++++++++++

error[E0609]: no field `created_at` on type `&MemoryRelationship`
  --> packages/sweetmcp-memory/src/memory/memory_manager/types.rs:81:38
   |
81 |             created_at: relationship.created_at,
   |                                      ^^^^^^^^^^ unknown field
   |
   = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0609]: no field `updated_at` on type `&MemoryRelationship`
  --> packages/sweetmcp-memory/src/memory/memory_manager/types.rs:82:38
   |
82 |             updated_at: relationship.updated_at,
   |                                      ^^^^^^^^^^ unknown field
   |
   = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0609]: no field `strength` on type `&MemoryRelationship`
  --> packages/sweetmcp-memory/src/memory/memory_manager/types.rs:83:36
   |
83 |             strength: relationship.strength,
   |                                    ^^^^^^^^ unknown field
   |
   = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/memory/memory_manager/core.rs:95:17
   |
95 |             id: schema.id,
   |                 ^^^^^^^^^- help: try using a conversion method: `.to_string()`
   |                 |
   |                 expected `String`, found `RecordId`

error[E0063]: missing fields `created_at`, `embedding` and `updated_at` in initializer of `MemoryNode`
  --> packages/sweetmcp-memory/src/memory/memory_manager/core.rs:94:9
   |
94 |         MemoryNode {
   |         ^^^^^^^^^^ missing `created_at`, `embedding` and `updated_at`

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/memory/memory_manager/core.rs:114:17
    |
114 |             id: schema.id,
    |                 ^^^^^^^^^- help: try using a conversion method: `.to_string()`
    |                 |
    |                 expected `String`, found `RecordId`

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/memory/memory_manager/core.rs:118:23
    |
118 |             metadata: schema.metadata,
    |                       ^^^^^^^^^^^^^^^ expected `Option<Value>`, found `Value`
    |
    = note: expected enum `std::option::Option<serde_json::Value>`
               found enum `serde_json::Value`
help: try wrapping the expression in `Some`
    |
118 |             metadata: Some(schema.metadata),
    |                       +++++               +

error[E0560]: struct `MemoryRelationship` has no field named `created_at`
   --> packages/sweetmcp-memory/src/memory/memory_manager/core.rs:119:13
    |
119 |             created_at: schema.created_at,
    |             ^^^^^^^^^^ `MemoryRelationship` does not have this field
    |
    = note: all struct fields are already assigned

error[E0560]: struct `MemoryRelationship` has no field named `updated_at`
   --> packages/sweetmcp-memory/src/memory/memory_manager/core.rs:120:13
    |
120 |             updated_at: schema.updated_at,
    |             ^^^^^^^^^^ `MemoryRelationship` does not have this field
    |
    = note: all struct fields are already assigned

error[E0560]: struct `MemoryRelationship` has no field named `strength`
   --> packages/sweetmcp-memory/src/memory/memory_manager/core.rs:121:13
    |
121 |             strength: schema.strength,
    |             ^^^^^^^^ `MemoryRelationship` does not have this field
    |
    = note: all struct fields are already assigned

error[E0609]: no field `strength` on type `&MemoryRelationship`
   --> packages/sweetmcp-memory/src/memory/memory_manager/core.rs:197:25
    |
197 |         if relationship.strength < 0.0 || relationship.strength > 1.0 {
    |                         ^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0609]: no field `strength` on type `&MemoryRelationship`
   --> packages/sweetmcp-memory/src/memory/memory_manager/core.rs:197:56
    |
197 |         if relationship.strength < 0.0 || relationship.strength > 1.0 {
    |                                                        ^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0277]: the trait bound `&str: CreateResource<Vec<MemoryNodeSchema>>` is not satisfied
   --> packages/sweetmcp-memory/src/memory/memory_manager/crud.rs:29:54
    |
29  |             match db.create::<Vec<MemoryNodeSchema>>("memory").content(content).await {
    |                      ------                          ^^^^^^^^ the trait `CreateResource<Vec<MemoryNodeSchema>>` is not implemented for `&str`
    |                      |
    |                      required by a bound introduced by this call
    |
    = help: the trait `CreateResource<Vec<MemoryNodeSchema>>` is not implemented for `&str`
            but trait `CreateResource<std::option::Option<_>>` is implemented for it
    = help: for that trait implementation, expected `std::option::Option<_>`, found `Vec<MemoryNodeSchema>`
note: required by a bound in `surrealdb::method::<impl Surreal<C>>::create`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/surrealdb-2.3.7/src/api/method/mod.rs:772:41
    |
772 |     pub fn create<R>(&self, resource: impl CreateResource<R>) -> Create<C, R> {
    |                                            ^^^^^^^^^^^^^^^^^ required by this bound in `surrealdb::method::<impl Surreal<C>>::create`

error[E0599]: no method named `content` found for struct `surrealdb::method::Create<'_, surrealdb::engine::any::Any, Vec<MemoryNodeSchema>>` in the current scope
  --> packages/sweetmcp-memory/src/memory/memory_manager/crud.rs:29:64
   |
29 |             match db.create::<Vec<MemoryNodeSchema>>("memory").content(content).await {
   |                                                                ^^^^^^^ method not found in `surrealdb::method::Create<'_, surrealdb::engine::any::Any, Vec<MemoryNodeSchema>>`
   |
   = note: the method was found for
           - `surrealdb::method::Create<'r, C, std::option::Option<R>>`
           - `surrealdb::method::Create<'r, C, surrealdb::Value>`
   = help: items from traits can only be used if the trait is implemented and in scope
note: `traits::Memory` defines an item `content`, perhaps you need to implement it
  --> packages/sweetmcp-memory/src/memory/memory_type/traits.rs:68:1
   |
68 | pub trait Memory: Send + Sync + Debug {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/memory/memory_manager/crud.rs:34:54
    |
34  |                           Err(Error::Database(Box::new(std::io::Error::new(
    |  _____________________________________________--------_^
    | |                                             |
    | |                                             arguments to this function are incorrect
35  | |                             std::io::ErrorKind::Other,
36  | |                             "Failed to create memory node: no record returned",
37  | |                         ))))
    | |_________________________^ expected `surrealdb::Error`, found `std::io::Error`
    |
    = note: `std::io::Error` and `surrealdb::Error` have similar names, but are actually distinct types
note: `std::io::Error` is defined in crate `std`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/std/src/io/error.rs:65:1
    |
65  | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `surrealdb::Error` is defined in crate `surrealdb`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/surrealdb-2.3.7/src/lib.rs:159:1
    |
159 | pub enum Error {
    | ^^^^^^^^^^^^^^
note: associated function defined here
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/boxed.rs:260:12
    |
260 |     pub fn new(x: T) -> Self {
    |            ^^^

error[E0277]: the trait bound `&str: CreateResource<Vec<Relationship>>` is not satisfied
   --> packages/sweetmcp-memory/src/memory/memory_manager/relationships.rs:54:56
    |
54  |             match db.create::<Vec<RelationshipSchema>>("relationship").content(content).await {
    |                      ------                            ^^^^^^^^^^^^^^ the trait `CreateResource<Vec<Relationship>>` is not implemented for `&str`
    |                      |
    |                      required by a bound introduced by this call
    |
    = help: the trait `CreateResource<Vec<Relationship>>` is not implemented for `&str`
            but trait `CreateResource<std::option::Option<_>>` is implemented for it
    = help: for that trait implementation, expected `std::option::Option<_>`, found `Vec<Relationship>`
note: required by a bound in `surrealdb::method::<impl Surreal<C>>::create`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/surrealdb-2.3.7/src/api/method/mod.rs:772:41
    |
772 |     pub fn create<R>(&self, resource: impl CreateResource<R>) -> Create<C, R> {
    |                                            ^^^^^^^^^^^^^^^^^ required by this bound in `surrealdb::method::<impl Surreal<C>>::create`

error[E0599]: no method named `content` found for struct `surrealdb::method::Create<'_, surrealdb::engine::any::Any, Vec<Relationship>>` in the current scope
  --> packages/sweetmcp-memory/src/memory/memory_manager/relationships.rs:54:72
   |
54 |             match db.create::<Vec<RelationshipSchema>>("relationship").content(content).await {
   |                                                                        ^^^^^^^ method not found in `surrealdb::method::Create<'_, surrealdb::engine::any::Any, Vec<Relationship>>`
   |
   = note: the method was found for
           - `surrealdb::method::Create<'r, C, std::option::Option<R>>`
           - `surrealdb::method::Create<'r, C, surrealdb::Value>`
   = help: items from traits can only be used if the trait is implemented and in scope
note: `traits::Memory` defines an item `content`, perhaps you need to implement it
  --> packages/sweetmcp-memory/src/memory/memory_type/traits.rs:68:1
   |
68 | pub trait Memory: Send + Sync + Debug {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/memory/memory_manager/relationships.rs:59:54
    |
59  |                           Err(Error::Database(Box::new(std::io::Error::new(
    |  _____________________________________________--------_^
    | |                                             |
    | |                                             arguments to this function are incorrect
60  | |                             std::io::ErrorKind::Other,
61  | |                             "Failed to create relationship: no record returned",
62  | |                         ))))
    | |_________________________^ expected `surrealdb::Error`, found `std::io::Error`
    |
    = note: `std::io::Error` and `surrealdb::Error` have similar names, but are actually distinct types
note: `std::io::Error` is defined in crate `std`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/std/src/io/error.rs:65:1
    |
65  | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: `surrealdb::Error` is defined in crate `surrealdb`
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/surrealdb-2.3.7/src/lib.rs:159:1
    |
159 | pub enum Error {
    | ^^^^^^^^^^^^^^
note: associated function defined here
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/boxed.rs:260:12
    |
260 |     pub fn new(x: T) -> Self {
    |            ^^^

error[E0609]: no field `created_at` on type `MemoryRelationship`
   --> packages/sweetmcp-memory/src/memory/memory_manager/relationships.rs:108:54
    |
108 | ...                   created_at: relationship.created_at,
    |                                                ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0609]: no field `updated_at` on type `MemoryRelationship`
   --> packages/sweetmcp-memory/src/memory/memory_manager/relationships.rs:109:60
    |
109 | ...                   last_accessed_at: relationship.updated_at,
    |                                                      ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0609]: no field `strength` on type `MemoryRelationship`
   --> packages/sweetmcp-memory/src/memory/memory_manager/relationships.rs:110:54
    |
110 | ...                   importance: relationship.strength,
    |                                                ^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/memory/memory_manager/relationships.rs:112:37
    |
112 | ...                   custom: relationship.metadata,
    |                               ^^^^^^^^^^^^^^^^^^^^^ expected `Value`, found `Option<Value>`
    |
    = note: expected enum `serde_json::Value`
               found enum `std::option::Option<serde_json::Value>`
help: consider using `Option::expect` to unwrap the `std::option::Option<serde_json::Value>` value, panicking if the value is an `Option::None`
    |
112 |                             custom: relationship.metadata.expect("REASON"),
    |                                                          +++++++++++++++++

error[E0599]: no variant or associated item named `Relationship` found for enum `MemoryType` in the current scope
   --> packages/sweetmcp-memory/src/memory/memory_manager/relationships.rs:118:82
    |
118 | ...                   memory_type: crate::memory::memory_node::MemoryType::Relationship,
    |                                                                            ^^^^^^^^^^^^ variant or associated item not found in `MemoryType`
    |
   ::: packages/sweetmcp-memory/src/memory/memory_node.rs:14:1
    |
14  | pub enum MemoryType {
    | ------------------- variant or associated item `Relationship` not found for this enum

error[E0063]: missing fields `created_at`, `embedding` and `updated_at` in initializer of `MemoryNode`
   --> packages/sweetmcp-memory/src/memory/memory_manager/relationships.rs:115:38
    |
115 |                         let memory = crate::memory::memory_node::MemoryNode {
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `created_at`, `embedding` and `updated_at`

error[E0599]: no method named `decode` found for struct `GeneralPurpose` in the current scope
   --> packages/sweetmcp-memory/src/memory/memory_type/content.rs:131:30
    |
130 | /                         base64::engine::general_purpose::STANDARD
131 | |                             .decode(s)
    | |_____________________________-^^^^^^
    |
   ::: /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/base64-0.22.1/src/engine/mod.rs:244:8
    |
244 |       fn decode<T: AsRef<[u8]>>(&self, input: T) -> Result<Vec<u8>, DecodeError> {
    |          ------ the method is available for `GeneralPurpose` here
    |
    = help: items from traits can only be used if the trait is in scope
help: there is a method `decode_vec` with a similar name, but with different arguments
   --> /Users/davidmaple/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/base64-0.22.1/src/engine/mod.rs:302:5
    |
302 | /     fn decode_vec<T: AsRef<[u8]>>(
303 | |         &self,
304 | |         input: T,
305 | |         buffer: &mut Vec<u8>,
306 | |     ) -> Result<(), DecodeError> {
    | |________________________________^
help: trait `Engine` which provides `decode` is implemented but not in scope; perhaps you want to import it
    |
3   + use base64::Engine;
    |

error[E0599]: no variant or associated item named `ChannelClosed` found for enum `utils::error::Error` in the current scope
  --> packages/sweetmcp-memory/src/memory/pending_types.rs:29:80
   |
29 |             Poll::Ready(Err(_)) => Poll::Ready(Err(crate::utils::error::Error::ChannelClosed)),
   |                                                                                ^^^^^^^^^^^^^ variant or associated item not found in `utils::error::Error`
   |
  ::: packages/sweetmcp-memory/src/utils/error.rs:14:1
   |
14 | pub enum Error {
   | -------------- variant or associated item `ChannelClosed` not found for this enum

error[E0599]: no variant or associated item named `ChannelClosed` found for enum `utils::error::Error` in the current scope
  --> packages/sweetmcp-memory/src/memory/pending_types.rs:53:80
   |
53 |             Poll::Ready(Err(_)) => Poll::Ready(Err(crate::utils::error::Error::ChannelClosed)),
   |                                                                                ^^^^^^^^^^^^^ variant or associated item not found in `utils::error::Error`
   |
  ::: packages/sweetmcp-memory/src/utils/error.rs:14:1
   |
14 | pub enum Error {
   | -------------- variant or associated item `ChannelClosed` not found for this enum

error[E0599]: no variant or associated item named `ChannelClosed` found for enum `utils::error::Error` in the current scope
  --> packages/sweetmcp-memory/src/memory/pending_types.rs:77:80
   |
77 |             Poll::Ready(Err(_)) => Poll::Ready(Err(crate::utils::error::Error::ChannelClosed)),
   |                                                                                ^^^^^^^^^^^^^ variant or associated item not found in `utils::error::Error`
   |
  ::: packages/sweetmcp-memory/src/utils/error.rs:14:1
   |
14 | pub enum Error {
   | -------------- variant or associated item `ChannelClosed` not found for this enum

error[E0599]: no method named `is_empty` found for struct `filter::MemoryFilter` in the current scope
   --> packages/sweetmcp-memory/src/memory/query/core.rs:116:22
    |
116 |         !self.filter.is_empty()
    |                      ^^^^^^^^ method not found in `filter::MemoryFilter`
    |
   ::: packages/sweetmcp-memory/src/memory/filter.rs:11:1
    |
11  | pub struct MemoryFilter {
    | ----------------------- method `is_empty` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `is_empty`, perhaps you need to implement one of them:
            candidate #1: `traits::Memory`
            candidate #2: `vector_index::VectorIndex`
            candidate #3: `BKeys`
            candidate #4: `DynamicSet`
            candidate #5: `ExactSizeIterator`
            candidate #6: `IndexedRandom`
            candidate #7: `RangeBounds`
            candidate #8: `SampleRange`
            candidate #9: `async_graphql::resolver_utils::container::ContainerType`
            candidate #10: `async_graphql::subscription::SubscriptionType`
            candidate #11: `bitflags::traits::Flags`
            candidate #12: `geo::algorithm::dimensions::HasDimensions`
            candidate #13: `radix_trie::trie_common::TrieCommon`
            candidate #14: `rand::distributions::uniform::SampleRange`
            candidate #15: `vart::Key`
            candidate #16: `vart::Key`

error[E0599]: no method named `validate` found for struct `filter::MemoryFilter` in the current scope
   --> packages/sweetmcp-memory/src/memory/query/core.rs:191:37
    |
191 |         if let Err(e) = self.filter.validate() {
    |                                     ^^^^^^^^ method not found in `filter::MemoryFilter`
    |
   ::: packages/sweetmcp-memory/src/memory/filter.rs:11:1
    |
11  | pub struct MemoryFilter {
    | ----------------------- method `validate` not found for this struct
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `validate`, perhaps you need to implement one of them:
            candidate #1: `entity::core::Entity`
            candidate #2: `entity::types::Entity`
            candidate #3: `entity::validation::ValidationRule`
            candidate #4: `traits::Memory`
            candidate #5: `validator::ValidationRule`
            candidate #6: `tendril::fmt::Format`

error[E0599]: no method named `merge_with` found for struct `filter::MemoryFilter` in the current scope
   --> packages/sweetmcp-memory/src/memory/query/core.rs:223:34
    |
223 |             filter: other.filter.merge_with(&self.filter),
    |                                  ^^^^^^^^^^ method not found in `filter::MemoryFilter`
    |
   ::: packages/sweetmcp-memory/src/memory/filter.rs:11:1
    |
11  | pub struct MemoryFilter {
    | ----------------------- method `merge_with` not found for this struct

error[E0599]: no method named `count_active_filters` found for struct `filter::MemoryFilter` in the current scope
   --> packages/sweetmcp-memory/src/memory/query/core.rs:241:39
    |
241 |             filter_count: self.filter.count_active_filters(),
    |                                       ^^^^^^^^^^^^^^^^^^^^ method not found in `filter::MemoryFilter`
    |
   ::: packages/sweetmcp-memory/src/memory/filter.rs:11:1
    |
11  | pub struct MemoryFilter {
    | ----------------------- method `count_active_filters` not found for this struct

error[E0599]: no method named `get_metadata` found for reference `&MemoryNode` in the current scope
  --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:93:44
   |
93 |             if let Some(node_value) = node.get_metadata(key) {
   |                                            ^^^^^^^^^^^^ method not found in `&MemoryNode`

error[E0599]: no variant or associated item named `CreatedAtAsc` found for enum `SortOrder` in the current scope
   --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:108:24
    |
108 |             SortOrder::CreatedAtAsc => {
    |                        ^^^^^^^^^^^^ variant or associated item not found in `SortOrder`
    |
   ::: packages/sweetmcp-memory/src/memory/query/core.rs:33:1
    |
33  | pub enum SortOrder {
    | ------------------ variant or associated item `CreatedAtAsc` not found for this enum
    |
help: there is a variant with a similar name
    |
108 -             SortOrder::CreatedAtAsc => {
108 +             SortOrder::CreatedAsc => {
    |

error[E0599]: no variant or associated item named `CreatedAtDesc` found for enum `SortOrder` in the current scope
   --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:111:24
    |
111 |             SortOrder::CreatedAtDesc => {
    |                        ^^^^^^^^^^^^^ variant or associated item not found in `SortOrder`
    |
   ::: packages/sweetmcp-memory/src/memory/query/core.rs:33:1
    |
33  | pub enum SortOrder {
    | ------------------ variant or associated item `CreatedAtDesc` not found for this enum
    |
help: there is a variant with a similar name
    |
111 -             SortOrder::CreatedAtDesc => {
111 +             SortOrder::CreatedDesc => {
    |

error[E0599]: no variant or associated item named `UpdatedAtAsc` found for enum `SortOrder` in the current scope
   --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:114:24
    |
114 |             SortOrder::UpdatedAtAsc => {
    |                        ^^^^^^^^^^^^ variant or associated item not found in `SortOrder`
    |
   ::: packages/sweetmcp-memory/src/memory/query/core.rs:33:1
    |
33  | pub enum SortOrder {
    | ------------------ variant or associated item `UpdatedAtAsc` not found for this enum
    |
help: there is a variant with a similar name
    |
114 -             SortOrder::UpdatedAtAsc => {
114 +             SortOrder::UpdatedAsc => {
    |

error[E0599]: no variant or associated item named `UpdatedAtDesc` found for enum `SortOrder` in the current scope
   --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:117:24
    |
117 |             SortOrder::UpdatedAtDesc => {
    |                        ^^^^^^^^^^^^^ variant or associated item not found in `SortOrder`
    |
   ::: packages/sweetmcp-memory/src/memory/query/core.rs:33:1
    |
33  | pub enum SortOrder {
    | ------------------ variant or associated item `UpdatedAtDesc` not found for this enum
    |
help: there is a variant with a similar name
    |
117 -             SortOrder::UpdatedAtDesc => {
117 +             SortOrder::UpdatedDesc => {
    |

error[E0599]: no variant or associated item named `AccessCountAsc` found for enum `SortOrder` in the current scope
   --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:120:24
    |
120 |             SortOrder::AccessCountAsc => {
    |                        ^^^^^^^^^^^^^^ variant or associated item not found in `SortOrder`
    |
   ::: packages/sweetmcp-memory/src/memory/query/core.rs:33:1
    |
33  | pub enum SortOrder {
    | ------------------ variant or associated item `AccessCountAsc` not found for this enum

error[E0599]: no variant or associated item named `AccessCountDesc` found for enum `SortOrder` in the current scope
   --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:123:24
    |
123 |             SortOrder::AccessCountDesc => {
    |                        ^^^^^^^^^^^^^^^ variant or associated item not found in `SortOrder`
    |
   ::: packages/sweetmcp-memory/src/memory/query/core.rs:33:1
    |
33  | pub enum SortOrder {
    | ------------------ variant or associated item `AccessCountDesc` not found for this enum

error[E0599]: no variant or associated item named `RelevanceScore` found for enum `SortOrder` in the current scope
   --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:126:24
    |
126 |             SortOrder::RelevanceScore => {
    |                        ^^^^^^^^^^^^^^ variant or associated item not found in `SortOrder`
    |
   ::: packages/sweetmcp-memory/src/memory/query/core.rs:33:1
    |
33  | pub enum SortOrder {
    | ------------------ variant or associated item `RelevanceScore` not found for this enum

error[E0599]: no method named `created_at` found for reference `&MemoryNode` in the current scope
   --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:109:42
    |
109 |                 results.sort_by(|a, b| a.created_at().cmp(&b.created_at()));
    |                                          ^^^^^^^^^^-- help: remove the arguments
    |                                          |
    |                                          field, not a method

error[E0599]: no method named `created_at` found for reference `&MemoryNode` in the current scope
   --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:109:62
    |
109 |                 results.sort_by(|a, b| a.created_at().cmp(&b.created_at()));
    |                                                              ^^^^^^^^^^-- help: remove the arguments
    |                                                              |
    |                                                              field, not a method

error[E0599]: no method named `created_at` found for reference `&MemoryNode` in the current scope
   --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:112:42
    |
112 |                 results.sort_by(|a, b| b.created_at().cmp(&a.created_at()));
    |                                          ^^^^^^^^^^-- help: remove the arguments
    |                                          |
    |                                          field, not a method

error[E0599]: no method named `created_at` found for reference `&MemoryNode` in the current scope
   --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:112:62
    |
112 |                 results.sort_by(|a, b| b.created_at().cmp(&a.created_at()));
    |                                                              ^^^^^^^^^^-- help: remove the arguments
    |                                                              |
    |                                                              field, not a method

error[E0599]: no method named `updated_at` found for reference `&MemoryNode` in the current scope
   --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:115:42
    |
115 |                 results.sort_by(|a, b| a.updated_at().cmp(&b.updated_at()));
    |                                          ^^^^^^^^^^-- help: remove the arguments
    |                                          |
    |                                          field, not a method

error[E0599]: no method named `updated_at` found for reference `&MemoryNode` in the current scope
   --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:115:62
    |
115 |                 results.sort_by(|a, b| a.updated_at().cmp(&b.updated_at()));
    |                                                              ^^^^^^^^^^-- help: remove the arguments
    |                                                              |
    |                                                              field, not a method

error[E0599]: no method named `updated_at` found for reference `&MemoryNode` in the current scope
   --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:118:42
    |
118 |                 results.sort_by(|a, b| b.updated_at().cmp(&a.updated_at()));
    |                                          ^^^^^^^^^^-- help: remove the arguments
    |                                          |
    |                                          field, not a method

error[E0599]: no method named `updated_at` found for reference `&MemoryNode` in the current scope
   --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:118:62
    |
118 |                 results.sort_by(|a, b| b.updated_at().cmp(&a.updated_at()));
    |                                                              ^^^^^^^^^^-- help: remove the arguments
    |                                                              |
    |                                                              field, not a method

error[E0599]: no method named `access_count` found for reference `&MemoryNode` in the current scope
   --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:121:42
    |
121 |                 results.sort_by(|a, b| a.access_count().cmp(&b.access_count()));
    |                                          ^^^^^^^^^^^^ method not found in `&MemoryNode`

error[E0599]: no method named `access_count` found for reference `&MemoryNode` in the current scope
   --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:121:64
    |
121 |                 results.sort_by(|a, b| a.access_count().cmp(&b.access_count()));
    |                                                                ^^^^^^^^^^^^ method not found in `&MemoryNode`

error[E0599]: no method named `access_count` found for reference `&MemoryNode` in the current scope
   --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:124:42
    |
124 |                 results.sort_by(|a, b| b.access_count().cmp(&a.access_count()));
    |                                          ^^^^^^^^^^^^ method not found in `&MemoryNode`

error[E0599]: no method named `access_count` found for reference `&MemoryNode` in the current scope
   --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:124:64
    |
124 |                 results.sort_by(|a, b| b.access_count().cmp(&a.access_count()));
    |                                                                ^^^^^^^^^^^^ method not found in `&MemoryNode`

error[E0599]: no method named `relevance_score` found for reference `&MemoryNode` in the current scope
   --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:128:23
    |
128 |                     b.relevance_score()
    |                       ^^^^^^^^^^^^^^^ method not found in `&MemoryNode`

error[E0599]: no method named `relevance_score` found for reference `&MemoryNode` in the current scope
   --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:129:41
    |
129 |                         .partial_cmp(&a.relevance_score())
    |                                         ^^^^^^^^^^^^^^^ method not found in `&MemoryNode`

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:165:33
    |
165 |         plan.complexity_score = complexity;
    |         ---------------------   ^^^^^^^^^^ expected `u32`, found `usize`
    |         |
    |         expected due to the type of this binding

error[E0609]: no field `text_query` on type `filter::MemoryFilter`
   --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:172:25
    |
172 |         if query.filter.text_query.is_some() {
    |                         ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `memory_types`, `user_id`, `agent_id`, `tags`, `time_range` ... and 4 others

error[E0609]: no field `metadata_filters` on type `filter::MemoryFilter`
   --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:180:26
    |
180 |         if !query.filter.metadata_filters.is_empty() {
    |                          ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `memory_types`, `user_id`, `agent_id`, `tags`, `time_range` ... and 4 others

error[E0609]: no field `sort_order` on type `&MemoryQuery`
   --> packages/sweetmcp-memory/src/memory/query/executor_optimization.rs:184:18
    |
184 |         if query.sort_order.is_some() {
    |                  ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `filter`, `sort`, `include_relationships`, `include_embeddings`, `min_similarity`

error[E0560]: struct `MemoryQuery` has no field named `sort_order`
   --> packages/sweetmcp-memory/src/memory/query/builder/core.rs:200:13
    |
200 |             sort_order: SortOrder::Relevance,
    |             ^^^^^^^^^^ `MemoryQuery` does not have this field
    |
    = note: available fields are: `text`, `sort`, `include_relationships`, `include_embeddings`, `min_similarity`

error[E0599]: no variant or associated item named `Relevance` found for enum `SortOrder` in the current scope
   --> packages/sweetmcp-memory/src/memory/query/builder/core.rs:200:36
    |
200 |             sort_order: SortOrder::Relevance,
    |                                    ^^^^^^^^^ variant or associated item not found in `SortOrder`
    |
   ::: packages/sweetmcp-memory/src/memory/query/core.rs:33:1
    |
33  | pub enum SortOrder {
    | ------------------ variant or associated item `Relevance` not found for this enum

error[E0560]: struct `MemoryQuery` has no field named `limit`
   --> packages/sweetmcp-memory/src/memory/query/builder/core.rs:201:13
    |
201 |             limit: None,
    |             ^^^^^ `MemoryQuery` does not have this field
    |
    = note: available fields are: `text`, `sort`, `include_relationships`, `include_embeddings`, `min_similarity`

error[E0560]: struct `MemoryQuery` has no field named `offset`
   --> packages/sweetmcp-memory/src/memory/query/builder/core.rs:202:13
    |
202 |             offset: 0,
    |             ^^^^^^ `MemoryQuery` does not have this field
    |
    = note: available fields are: `text`, `sort`, `include_relationships`, `include_embeddings`, `min_similarity`

error[E0609]: no field `sort_order` on type `MemoryQuery`
   --> packages/sweetmcp-memory/src/memory/query/builder/core.rs:209:15
    |
209 |         query.sort_order = sort_order;
    |               ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `text`, `filter`, `sort`, `include_relationships`, `include_embeddings`, `min_similarity`

error[E0609]: no field `limit` on type `MemoryQuery`
   --> packages/sweetmcp-memory/src/memory/query/builder/core.rs:216:15
    |
216 |         query.limit = Some(limit);
    |               ^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
216 |         query.filter.limit = Some(limit);
    |               +++++++

error[E0609]: no field `offset` on type `MemoryQuery`
   --> packages/sweetmcp-memory/src/memory/query/builder/core.rs:223:15
    |
223 |         query.offset = offset;
    |               ^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
223 |         query.filter.offset = offset;
    |               +++++++

error[E0609]: no field `limit` on type `MemoryQuery`
   --> packages/sweetmcp-memory/src/memory/query/builder/core.rs:230:15
    |
230 |         query.limit = Some(limit);
    |               ^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
230 |         query.filter.limit = Some(limit);
    |               +++++++

error[E0609]: no field `offset` on type `MemoryQuery`
   --> packages/sweetmcp-memory/src/memory/query/builder/core.rs:231:15
    |
231 |         query.offset = offset;
    |               ^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
231 |         query.filter.offset = offset;
    |               +++++++

error[E0609]: no field `limit` on type `&MemoryQuery`
  --> packages/sweetmcp-memory/src/memory/query/builder/executor.rs:54:18
   |
54 |         if query.limit.is_some() && query.limit.unwrap() == 0 {
   |                  ^^^^^ unknown field
   |
help: one of the expressions' fields has a field of the same name
   |
54 |         if query.filter.limit.is_some() && query.limit.unwrap() == 0 {
   |                  +++++++

error[E0609]: no field `limit` on type `&MemoryQuery`
  --> packages/sweetmcp-memory/src/memory/query/builder/executor.rs:54:43
   |
54 |         if query.limit.is_some() && query.limit.unwrap() == 0 {
   |                                           ^^^^^ unknown field
   |
help: one of the expressions' fields has a field of the same name
   |
54 |         if query.limit.is_some() && query.filter.limit.unwrap() == 0 {
   |                                           +++++++

error[E0609]: no field `limit` on type `&MemoryQuery`
  --> packages/sweetmcp-memory/src/memory/query/builder/executor.rs:65:45
   |
65 |         let complexity_factor = match query.limit {
   |                                             ^^^^^ unknown field
   |
help: one of the expressions' fields has a field of the same name
   |
65 |         let complexity_factor = match query.filter.limit {
   |                                             +++++++

error[E0599]: no variant or associated item named `Working` found for enum `MemoryType` in the current scope
   --> packages/sweetmcp-memory/src/memory/query/builder/convenience.rs:121:50
    |
121 |         Self::new().with_memory_type(MemoryType::Working)
    |                                                  ^^^^^^^ variant or associated item not found in `MemoryType`
    |
   ::: packages/sweetmcp-memory/src/memory/memory_node.rs:14:1
    |
14  | pub enum MemoryType {
    | ------------------- variant or associated item `Working` not found for this enum

error[E0599]: no variant or associated item named `Working` found for enum `MemoryType` in the current scope
   --> packages/sweetmcp-memory/src/memory/query/builder/convenience.rs:268:29
    |
268 |                 MemoryType::Working,
    |                             ^^^^^^^ variant or associated item not found in `MemoryType`
    |
   ::: packages/sweetmcp-memory/src/memory/memory_node.rs:14:1
    |
14  | pub enum MemoryType {
    | ------------------- variant or associated item `Working` not found for this enum

error[E0609]: no field `sort_by` on type `&filter::MemoryFilter`
  --> packages/sweetmcp-memory/src/memory/repository/search.rs:21:43
   |
21 |         if let Some(sort_field) = &filter.sort_by {
   |                                           ^^^^^^^ unknown field
   |
   = note: available fields are: `memory_types`, `user_id`, `agent_id`, `tags`, `time_range` ... and 4 others

error[E0609]: no field `sort_desc` on type `&filter::MemoryFilter`
  --> packages/sweetmcp-memory/src/memory/repository/search.rs:22:68
   |
22 |             self.sort_memories(&mut candidates, sort_field, filter.sort_desc.unwrap_or(false));
   |                                                                    ^^^^^^^^^ unknown field
   |
   = note: available fields are: `memory_types`, `user_id`, `agent_id`, `tags`, `time_range` ... and 4 others

error[E0609]: no field `start_time` on type `&filter::MemoryFilter`
  --> packages/sweetmcp-memory/src/memory/repository/search.rs:82:19
   |
82 |         if filter.start_time.is_some() || filter.end_time.is_some() {
   |                   ^^^^^^^^^^ unknown field
   |
   = note: available fields are: `memory_types`, `user_id`, `agent_id`, `tags`, `time_range` ... and 4 others

error[E0609]: no field `end_time` on type `&filter::MemoryFilter`
  --> packages/sweetmcp-memory/src/memory/repository/search.rs:82:50
   |
82 |         if filter.start_time.is_some() || filter.end_time.is_some() {
   |                                                  ^^^^^^^^ unknown field
   |
   = note: available fields are: `memory_types`, `user_id`, `agent_id`, `tags`, `time_range` ... and 4 others

error[E0609]: no field `start_time` on type `&filter::MemoryFilter`
   --> packages/sweetmcp-memory/src/memory/repository/search.rs:129:28
    |
129 |         let start = filter.start_time.unwrap_or_else(|| chrono::DateTime::from_timestamp(0, 0).unwrap_or_default());
    |                            ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `memory_types`, `user_id`, `agent_id`, `tags`, `time_range` ... and 4 others

error[E0609]: no field `end_time` on type `&filter::MemoryFilter`
   --> packages/sweetmcp-memory/src/memory/repository/search.rs:130:26
    |
130 |         let end = filter.end_time.unwrap_or_else(chrono::Utc::now);
    |                          ^^^^^^^^ unknown field
    |
    = note: available fields are: `memory_types`, `user_id`, `agent_id`, `tags`, `time_range` ... and 4 others

error[E0609]: no field `project_id` on type `&filter::MemoryFilter`
   --> packages/sweetmcp-memory/src/memory/repository/search.rs:152:43
    |
152 |         if let Some(project_id) = &filter.project_id {
    |                                           ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `memory_types`, `user_id`, `agent_id`, `tags`, `time_range` ... and 4 others

error[E0609]: no field `project_id` on type `memory_metadata::MemoryMetadata`
   --> packages/sweetmcp-memory/src/memory/repository/search.rs:153:32
    |
153 |             if memory.metadata.project_id.as_ref() != Some(project_id) {
    |                                ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `user_id`, `agent_id`, `context`, `keywords`, `tags` ... and 7 others

error[E0609]: no field `min_importance` on type `&filter::MemoryFilter`
   --> packages/sweetmcp-memory/src/memory/repository/search.rs:172:46
    |
172 |         if let Some(min_importance) = filter.min_importance {
    |                                              ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `memory_types`, `user_id`, `agent_id`, `tags`, `time_range` ... and 4 others

error[E0609]: no field `importance_score` on type `&MemoryNode`
   --> packages/sweetmcp-memory/src/memory/repository/search.rs:173:23
    |
173 |             if memory.importance_score < min_importance {
    |                       ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `embedding`, `memory_type`, `content`, `created_at` ... and 2 others

error[E0609]: no field `max_importance` on type `&filter::MemoryFilter`
   --> packages/sweetmcp-memory/src/memory/repository/search.rs:178:46
    |
178 |         if let Some(max_importance) = filter.max_importance {
    |                                              ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `memory_types`, `user_id`, `agent_id`, `tags`, `time_range` ... and 4 others

error[E0609]: no field `importance_score` on type `&MemoryNode`
   --> packages/sweetmcp-memory/src/memory/repository/search.rs:179:23
    |
179 |             if memory.importance_score > max_importance {
    |                       ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `embedding`, `memory_type`, `content`, `created_at` ... and 2 others

error[E0609]: no field `min_content_length` on type `&filter::MemoryFilter`
   --> packages/sweetmcp-memory/src/memory/repository/search.rs:185:42
    |
185 |         if let Some(min_length) = filter.min_content_length {
    |                                          ^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `memory_types`, `user_id`, `agent_id`, `tags`, `time_range` ... and 4 others

error[E0609]: no field `max_content_length` on type `&filter::MemoryFilter`
   --> packages/sweetmcp-memory/src/memory/repository/search.rs:191:42
    |
191 |         if let Some(max_length) = filter.max_content_length {
    |                                          ^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `memory_types`, `user_id`, `agent_id`, `tags`, `time_range` ... and 4 others

error[E0609]: no field `has_embeddings` on type `&filter::MemoryFilter`
   --> packages/sweetmcp-memory/src/memory/repository/search.rs:198:19
    |
198 |         if filter.has_embeddings.unwrap_or(false) {
    |                   ^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `memory_types`, `user_id`, `agent_id`, `tags`, `time_range` ... and 4 others

error[E0609]: no field `has_relationships` on type `&filter::MemoryFilter`
   --> packages/sweetmcp-memory/src/memory/repository/search.rs:205:19
    |
205 |         if filter.has_relationships.unwrap_or(false) {
    |                   ^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `memory_types`, `user_id`, `agent_id`, `tags`, `time_range` ... and 4 others

error[E0609]: no field `importance_score` on type `&std::sync::Arc<MemoryNode>`
   --> packages/sweetmcp-memory/src/memory/repository/search.rs:238:27
    |
238 |                         b.importance_score.partial_cmp(&a.importance_score).unwrap_or(std::cmp::Ordering::Equal)
    |                           ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `embedding`, `memory_type`, `content`, `created_at` ... and 2 others

error[E0609]: no field `importance_score` on type `&std::sync::Arc<MemoryNode>`
   --> packages/sweetmcp-memory/src/memory/repository/search.rs:238:59
    |
238 |                         b.importance_score.partial_cmp(&a.importance_score).unwrap_or(std::cmp::Ordering::Equal)
    |                                                           ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `embedding`, `memory_type`, `content`, `created_at` ... and 2 others

error[E0609]: no field `importance_score` on type `&std::sync::Arc<MemoryNode>`
   --> packages/sweetmcp-memory/src/memory/repository/search.rs:240:27
    |
240 |                         a.importance_score.partial_cmp(&b.importance_score).unwrap_or(std::cmp::Ordering::Equal)
    |                           ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `embedding`, `memory_type`, `content`, `created_at` ... and 2 others

error[E0609]: no field `importance_score` on type `&std::sync::Arc<MemoryNode>`
   --> packages/sweetmcp-memory/src/memory/repository/search.rs:240:59
    |
240 |                         a.importance_score.partial_cmp(&b.importance_score).unwrap_or(std::cmp::Ordering::Equal)
    |                                                           ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `embedding`, `memory_type`, `content`, `created_at` ... and 2 others

error[E0609]: no field `from_id` on type `MemoryRelationship`
  --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:16:54
   |
16 |         if !self.memories.contains_key(&relationship.from_id) {
   |                                                      ^^^^^^^ unknown field
   |
   = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0609]: no field `from_id` on type `MemoryRelationship`
  --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:19:30
   |
19 |                 relationship.from_id
   |                              ^^^^^^^ unknown field
   |
   = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0609]: no field `to_id` on type `MemoryRelationship`
  --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:23:54
   |
23 |         if !self.memories.contains_key(&relationship.to_id) {
   |                                                      ^^^^^ unknown field
   |
   = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0609]: no field `to_id` on type `MemoryRelationship`
  --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:26:30
   |
26 |                 relationship.to_id
   |                              ^^^^^ unknown field
   |
   = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0609]: no field `from_id` on type `MemoryRelationship`
  --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:32:33
   |
32 |             .entry(relationship.from_id.clone())
   |                                 ^^^^^^^ unknown field
   |
   = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0609]: no field `bidirectional` on type `MemoryRelationship`
  --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:37:25
   |
37 |         if relationship.bidirectional {
   |                         ^^^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0560]: struct `MemoryRelationship` has no field named `from_id`
  --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:39:17
   |
39 |                 from_id: relationship.to_id.clone(),
   |                 ^^^^^^^ `MemoryRelationship` does not have this field
   |
   = note: available fields are: `id`, `source_id`, `target_id`

error[E0609]: no field `to_id` on type `MemoryRelationship`
  --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:39:39
   |
39 |                 from_id: relationship.to_id.clone(),
   |                                       ^^^^^ unknown field
   |
   = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0560]: struct `MemoryRelationship` has no field named `to_id`
  --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:40:17
   |
40 |                 to_id: relationship.from_id.clone(),
   |                 ^^^^^ `MemoryRelationship` does not have this field
   |
   = note: available fields are: `id`, `source_id`, `target_id`

error[E0609]: no field `from_id` on type `MemoryRelationship`
  --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:40:37
   |
40 |                 to_id: relationship.from_id.clone(),
   |                                     ^^^^^^^ unknown field
   |
   = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0560]: struct `MemoryRelationship` has no field named `strength`
  --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:42:17
   |
42 |                 strength: relationship.strength,
   |                 ^^^^^^^^ `MemoryRelationship` does not have this field
   |
   = note: available fields are: `id`, `source_id`, `target_id`

error[E0609]: no field `strength` on type `MemoryRelationship`
  --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:42:40
   |
42 |                 strength: relationship.strength,
   |                                        ^^^^^^^^ unknown field
   |
   = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0560]: struct `MemoryRelationship` has no field named `bidirectional`
  --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:43:17
   |
43 |                 bidirectional: false, // Avoid infinite recursion
   |                 ^^^^^^^^^^^^^ `MemoryRelationship` does not have this field
   |
   = note: available fields are: `id`, `source_id`, `target_id`

error[E0560]: struct `MemoryRelationship` has no field named `created_at`
  --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:45:17
   |
45 |                 created_at: relationship.created_at,
   |                 ^^^^^^^^^^ `MemoryRelationship` does not have this field
   |
   = note: available fields are: `id`, `source_id`, `target_id`

error[E0609]: no field `created_at` on type `MemoryRelationship`
  --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:45:42
   |
45 |                 created_at: relationship.created_at,
   |                                          ^^^^^^^^^^ unknown field
   |
   = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0609]: no field `to_id` on type `MemoryRelationship`
  --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:49:37
   |
49 |                 .entry(relationship.to_id.clone())
   |                                     ^^^^^ unknown field
   |
   = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0609]: no field `to_id` on type `&MemoryRelationship`
  --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:88:50
   |
88 |             .filter_map(|r| self.memories.get(&r.to_id))
   |                                                  ^^^^^ unknown field
   |
   = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0609]: no field `to_id` on type `&MemoryRelationship`
   --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:102:50
    |
102 |             .filter_map(|r| self.memories.get(&r.to_id))
    |                                                  ^^^^^ unknown field
    |
    = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0609]: no field `to_id` on type `&MemoryRelationship`
   --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:121:21
    |
121 |                 !(r.to_id == to_id && type_matches)
    |                     ^^^^^ unknown field
    |
    = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0609]: no field `to_id` on type `&MemoryRelationship`
   --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:138:21
    |
138 |                 !(r.to_id == from_id && type_matches)
    |                     ^^^^^ unknown field
    |
    = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0609]: no field `bidirectional` on type `&MemoryRelationship`
   --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:164:33
    |
164 |                 if relationship.bidirectional {
    |                                 ^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0609]: no field `to_id` on type `&MemoryRelationship`
   --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:165:60
    |
165 |                     self.remove_relationship(&relationship.to_id, memory_id, Some(&relationship.relationship_type));
    |                                                            ^^^^^ unknown field
    |
    = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0609]: no field `to_id` on type `&MemoryRelationship`
   --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:174:40
    |
174 |             relationships.retain(|r| r.to_id != memory_id);
    |                                        ^^^^^ unknown field
    |
    = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0609]: no field `to_id` on type `&MemoryRelationship`
   --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:199:19
    |
199 |                 r.to_id == to_id && relationship_type.map_or(true, |t| r.relationship_type == t)
    |                   ^^^^^ unknown field
    |
    = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0609]: no field `to_id` on type `&&MemoryRelationship`
   --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:217:23
    |
217 |                     r.to_id == to_id && relationship_type.map_or(true, |t| r.relationship_type == t)
    |                       ^^^^^ unknown field
    |
    = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0609]: no field `strength` on type `&MemoryRelationship`
   --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:219:28
    |
219 |                 .map(|r| r.strength)
    |                            ^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0609]: no field `to_id` on type `&mut MemoryRelationship`
   --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:237:33
    |
237 |                 if relationship.to_id == to_id && relationship.relationship_type == relationship_type {
    |                                 ^^^^^ unknown field
    |
    = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0609]: no field `strength` on type `&mut MemoryRelationship`
   --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:238:34
    |
238 |                     relationship.strength = new_strength;
    |                                  ^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0609]: no field `to_id` on type `&mut MemoryRelationship`
   --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:249:37
    |
249 |                     if relationship.to_id == from_id && relationship.relationship_type == relationship_type {
    |                                     ^^^^^ unknown field
    |
    = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0609]: no field `strength` on type `&mut MemoryRelationship`
   --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:250:38
    |
250 |                         relationship.strength = new_strength;
    |                                      ^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0609]: no field `strength` on type `&MemoryRelationship`
   --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:359:48
    |
359 |                 total_strength += relationship.strength;
    |                                                ^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0609]: no field `bidirectional` on type `&MemoryRelationship`
   --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:361:33
    |
361 |                 if relationship.bidirectional {
    |                                 ^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0609]: no field `to_id` on type `&MemoryRelationship`
   --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:398:62
    |
398 |                 if !self.memories.contains_key(&relationship.to_id) {
    |                                                              ^^^^^ unknown field
    |
    = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0609]: no field `to_id` on type `&MemoryRelationship`
   --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:401:47
    |
401 |                         from_id, relationship.to_id
    |                                               ^^^^^ unknown field
    |
    = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0609]: no field `strength` on type `&MemoryRelationship`
   --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:406:33
    |
406 |                 if relationship.strength < 0.0 || relationship.strength > 1.0 {
    |                                 ^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0609]: no field `strength` on type `&MemoryRelationship`
   --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:406:64
    |
406 |                 if relationship.strength < 0.0 || relationship.strength > 1.0 {
    |                                                                ^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0609]: no field `to_id` on type `&MemoryRelationship`
   --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:409:47
    |
409 |                         from_id, relationship.to_id, relationship.strength
    |                                               ^^^^^ unknown field
    |
    = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0609]: no field `strength` on type `&MemoryRelationship`
   --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:409:67
    |
409 |                         from_id, relationship.to_id, relationship.strength
    |                                                                   ^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0609]: no field `from_id` on type `&MemoryRelationship`
   --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:414:33
    |
414 |                 if relationship.from_id == relationship.to_id {
    |                                 ^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0609]: no field `to_id` on type `&MemoryRelationship`
   --> packages/sweetmcp-memory/src/memory/repository/relationships.rs:414:57
    |
414 |                 if relationship.from_id == relationship.to_id {
    |                                                         ^^^^^ unknown field
    |
    = note: available fields are: `id`, `source_id`, `target_id`, `relationship_type`, `metadata`

error[E0599]: the method `join` exists for struct `Vec<&std::string::String>`, but its trait bounds were not satisfied
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata.rs:327:47
    |
327 |             format!("Metadata keys: {}", keys.join(", "))
    |                                               ^^^^ method cannot be called on `Vec<&std::string::String>` due to unsatisfied trait bounds
    |
    = note: the following trait bounds were not satisfied:
            `[&std::string::String]: std::slice::Join<_>`

error[E0599]: the method `join` exists for struct `Vec<&std::string::String>`, but its trait bounds were not satisfied
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_basic.rs:253:47
    |
253 |             format!("Metadata keys: {}", keys.join(", "))
    |                                               ^^^^ method cannot be called on `Vec<&std::string::String>` due to unsatisfied trait bounds
    |
    = note: the following trait bounds were not satisfied:
            `[&std::string::String]: std::slice::Join<_>`

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_stats.rs:65:18
    |
65  |             self.get_metadata_statistics();
    |                  ^^^^^^^^^^^^^^^^^^^^^^^ multiple `get_metadata_statistics` found
    |
note: candidate #1 is defined in an impl for the type `item_core::SemanticItem`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_advanced.rs:296:5
    |
296 |     pub fn get_metadata_statistics(&self) -> (usize, usize, usize, usize, usize, usize, usize) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `item_core::SemanticItem`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_stats.rs:16:5
    |
16  |     pub fn get_metadata_statistics(&self) -> (usize, usize, usize, usize, usize, usize, usize) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_stats.rs:259:18
    |
259 |             self.get_metadata_statistics();
    |                  ^^^^^^^^^^^^^^^^^^^^^^^ multiple `get_metadata_statistics` found
    |
note: candidate #1 is defined in an impl for the type `item_core::SemanticItem`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_advanced.rs:296:5
    |
296 |     pub fn get_metadata_statistics(&self) -> (usize, usize, usize, usize, usize, usize, usize) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `item_core::SemanticItem`
   --> packages/sweetmcp-memory/src/memory/semantic/item_metadata_stats.rs:16:5
    |
16  |     pub fn get_metadata_statistics(&self) -> (usize, usize, usize, usize, usize, usize, usize) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:281:18
    |
281 |         if !self.has_tag(tag) {
    |                  ^^^^^^^ multiple `has_tag` found
    |
note: candidate #1 is defined in an impl for the type `item_core::SemanticItem`
   --> packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:46:5
    |
46  |     pub fn has_tag(&self, tag: &str) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `item_core::SemanticItem`
   --> packages/sweetmcp-memory/src/memory/semantic/item_tags.rs:43:5
    |
43  |     pub fn has_tag(&self, tag: &str) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:298:17
    |
298 |         if self.has_tag(tag) {
    |                 ^^^^^^^ multiple `has_tag` found
    |
note: candidate #1 is defined in an impl for the type `item_core::SemanticItem`
   --> packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:46:5
    |
46  |     pub fn has_tag(&self, tag: &str) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `item_core::SemanticItem`
   --> packages/sweetmcp-memory/src/memory/semantic/item_tags.rs:43:5
    |
43  |     pub fn has_tag(&self, tag: &str) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:299:18
    |
299 |             self.remove_tag(tag);
    |                  ^^^^^^^^^^ multiple `remove_tag` found
    |
note: candidate #1 is defined in an impl for the type `item_core::SemanticItem`
   --> packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:29:5
    |
29  |     pub fn remove_tag(&mut self, tag: &str) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `item_core::SemanticItem`
   --> packages/sweetmcp-memory/src/memory/semantic/item_tags.rs:26:5
    |
26  |     pub fn remove_tag(&mut self, tag: &str) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/memory/semantic/item_tags.rs:121:18
    |
121 |         if !self.has_tag(tag) {
    |                  ^^^^^^^ multiple `has_tag` found
    |
note: candidate #1 is defined in an impl for the type `item_core::SemanticItem`
   --> packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:46:5
    |
46  |     pub fn has_tag(&self, tag: &str) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `item_core::SemanticItem`
   --> packages/sweetmcp-memory/src/memory/semantic/item_tags.rs:43:5
    |
43  |     pub fn has_tag(&self, tag: &str) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/memory/semantic/item_tags.rs:138:17
    |
138 |         if self.has_tag(tag) {
    |                 ^^^^^^^ multiple `has_tag` found
    |
note: candidate #1 is defined in an impl for the type `item_core::SemanticItem`
   --> packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:46:5
    |
46  |     pub fn has_tag(&self, tag: &str) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `item_core::SemanticItem`
   --> packages/sweetmcp-memory/src/memory/semantic/item_tags.rs:43:5
    |
43  |     pub fn has_tag(&self, tag: &str) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/memory/semantic/item_tags.rs:139:18
    |
139 |             self.remove_tag(tag);
    |                  ^^^^^^^^^^ multiple `remove_tag` found
    |
note: candidate #1 is defined in an impl for the type `item_core::SemanticItem`
   --> packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:29:5
    |
29  |     pub fn remove_tag(&mut self, tag: &str) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `item_core::SemanticItem`
   --> packages/sweetmcp-memory/src/memory/semantic/item_tags.rs:26:5
    |
26  |     pub fn remove_tag(&mut self, tag: &str) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/memory/semantic/item_tags.rs:231:45
    |
231 |         required_tags.iter().all(|tag| self.has_tag(tag))
    |                                             ^^^^^^^ multiple `has_tag` found
    |
note: candidate #1 is defined in an impl for the type `item_core::SemanticItem`
   --> packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:46:5
    |
46  |     pub fn has_tag(&self, tag: &str) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `item_core::SemanticItem`
   --> packages/sweetmcp-memory/src/memory/semantic/item_tags.rs:43:5
    |
43  |     pub fn has_tag(&self, tag: &str) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0034]: multiple applicable items in scope
   --> packages/sweetmcp-memory/src/memory/semantic/item_tags.rs:242:46
    |
242 |         candidate_tags.iter().any(|tag| self.has_tag(tag))
    |                                              ^^^^^^^ multiple `has_tag` found
    |
note: candidate #1 is defined in an impl for the type `item_core::SemanticItem`
   --> packages/sweetmcp-memory/src/memory/semantic/item_operations.rs:46:5
    |
46  |     pub fn has_tag(&self, tag: &str) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: candidate #2 is defined in an impl for the type `item_core::SemanticItem`
   --> packages/sweetmcp-memory/src/memory/semantic/item_tags.rs:43:5
    |
43  |     pub fn has_tag(&self, tag: &str) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0614]: type `usize` cannot be dereferenced
   --> packages/sweetmcp-memory/src/memory/semantic/memory_analysis.rs:186:31
    |
186 |             let percentage = (*count as f64 / self.total_items as f64) * 100.0;
    |                               ^^^^^^ can't be dereferenced

error[E0614]: type `usize` cannot be dereferenced
   --> packages/sweetmcp-memory/src/memory/semantic/memory_analysis.rs:193:31
    |
193 |             let percentage = (*count as f64 / self.total_relationships as f64) * 100.0;
    |                               ^^^^^^ can't be dereferenced

error[E0599]: no method named `trim` found for enum `serde_json::Value` in the current scope
    --> packages/sweetmcp-memory/src/memory/semantic/memory_health.rs:99:52
     |
99   |             self.items.retain(|item| !item.content.trim().is_empty());
     |                                                    ^^^^ method not found in `serde_json::Value`
     |
note: the method `trim` exists on the type `std::string::String`
    --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/str/mod.rs:2128:5
     |
2128 |     pub fn trim(&self) -> &str {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `to_lowercase` found for enum `serde_json::Value` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_multi_field_search.rs:20:29
    |
20  |             if item.content.to_lowercase().contains(&query_lower) {
    |                             ^^^^^^^^^^^^ method not found in `serde_json::Value`
    |
note: the method `to_lowercase` exists on the type `std::string::String`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/str.rs:380:5
    |
380 |     pub fn to_lowercase(&self) -> String {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `to_lowercase` found for enum `serde_json::Value` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_multi_field_search.rs:21:48
    |
21  |                 let match_count = item.content.to_lowercase().matches(&query_lower).count();
    |                                                ^^^^^^^^^^^^ method not found in `serde_json::Value`
    |
note: the method `to_lowercase` exists on the type `std::string::String`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/str.rs:380:5
    |
380 |     pub fn to_lowercase(&self) -> String {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/memory/semantic/memory_multi_field_search.rs:26:51
    |
26  |                     snippet: self.extract_snippet(&item.content, query, 100),
    |                                   --------------- ^^^^^^^^^^^^^ expected `&str`, found `&Value`
    |                                   |
    |                                   arguments to this method are incorrect
    |
    = note: expected reference `&str`
               found reference `&serde_json::Value`
note: method defined here
   --> packages/sweetmcp-memory/src/memory/semantic/memory_search.rs:282:12
    |
282 |     pub fn extract_snippet(&self, text: &str, query: &str, max_length: usize) -> String {
    |            ^^^^^^^^^^^^^^^        ----------

error[E0599]: no method named `to_lowercase` found for enum `serde_json::Value` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_multi_field_search.rs:104:29
    |
104 |             if item.content.to_lowercase().contains(&query_lower) {
    |                             ^^^^^^^^^^^^ method not found in `serde_json::Value`
    |
note: the method `to_lowercase` exists on the type `std::string::String`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/str.rs:380:5
    |
380 |     pub fn to_lowercase(&self) -> String {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `to_lowercase` found for enum `serde_json::Value` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_multi_field_search.rs:105:48
    |
105 |                 let match_count = item.content.to_lowercase().matches(&query_lower).count();
    |                                                ^^^^^^^^^^^^ method not found in `serde_json::Value`
    |
note: the method `to_lowercase` exists on the type `std::string::String`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/str.rs:380:5
    |
380 |     pub fn to_lowercase(&self) -> String {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/memory/semantic/memory_multi_field_search.rs:111:51
    |
111 |                     snippet: self.extract_snippet(&item.content, query, 100),
    |                                   --------------- ^^^^^^^^^^^^^ expected `&str`, found `&Value`
    |                                   |
    |                                   arguments to this method are incorrect
    |
    = note: expected reference `&str`
               found reference `&serde_json::Value`
note: method defined here
   --> packages/sweetmcp-memory/src/memory/semantic/memory_search.rs:282:12
    |
282 |     pub fn extract_snippet(&self, text: &str, query: &str, max_length: usize) -> String {
    |            ^^^^^^^^^^^^^^^        ----------

error[E0599]: no method named `validate` found for reference `&item_core::SemanticItem` in the current scope
  --> packages/sweetmcp-memory/src/memory/semantic/memory_operations.rs:69:18
   |
69 |             item.validate()?;
   |                  ^^^^^^^^ method not found in `&item_core::SemanticItem`
   |
   = help: items from traits can only be used if the trait is implemented and in scope
   = note: the following traits define an item `validate`, perhaps you need to implement one of them:
           candidate #1: `entity::core::Entity`
           candidate #2: `entity::types::Entity`
           candidate #3: `entity::validation::ValidationRule`
           candidate #4: `traits::Memory`
           candidate #5: `validator::ValidationRule`
           candidate #6: `tendril::fmt::Format`

error[E0277]: the trait bound `semantic::relationship_types::SemanticRelationshipType: Hash` is not satisfied
   --> packages/sweetmcp-memory/src/memory/semantic/memory_operations.rs:162:26
    |
162 |             *type_counts.entry(relationship.relationship_type).or_insert(0) += 1;
    |                          ^^^^^ the trait `Hash` is not implemented for `semantic::relationship_types::SemanticRelationshipType`
    |
note: required by a bound in `std::collections::HashMap::<K, V, S>::entry`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:763:13
    |
763 |     K: Eq + Hash,
    |             ^^^^ required by this bound in `HashMap::<K, V, S>::entry`
...
883 |     pub fn entry(&mut self, key: K) -> Entry<'_, K, V> {
    |            ----- required by a bound in this associated function
help: consider annotating `semantic::relationship_types::SemanticRelationshipType` with `#[derive(Hash)]`
   --> packages/sweetmcp-memory/src/memory/semantic/relationship_types.rs:11:1
    |
11  + #[derive(Hash)]
12  | pub enum SemanticRelationshipType {
    |

error[E0277]: the trait bound `semantic::types::ConfidenceLevel: Hash` is not satisfied
   --> packages/sweetmcp-memory/src/memory/semantic/memory_operations.rs:163:32
    |
163 |             *confidence_counts.entry(relationship.confidence).or_insert(0) += 1;
    |                                ^^^^^ the trait `Hash` is not implemented for `semantic::types::ConfidenceLevel`
    |
note: required by a bound in `std::collections::HashMap::<K, V, S>::entry`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:763:13
    |
763 |     K: Eq + Hash,
    |             ^^^^ required by this bound in `HashMap::<K, V, S>::entry`
...
883 |     pub fn entry(&mut self, key: K) -> Entry<'_, K, V> {
    |            ----- required by a bound in this associated function
help: consider annotating `semantic::types::ConfidenceLevel` with `#[derive(Hash)]`
   --> packages/sweetmcp-memory/src/memory/semantic/types.rs:14:1
    |
14  + #[derive(Hash)]
15  | pub enum ConfidenceLevel {
    |

error[E0277]: the trait bound `semantic::types::SemanticItemType: Hash` is not satisfied
   --> packages/sweetmcp-memory/src/memory/semantic/memory_operations.rs:199:26
    |
199 |             *type_counts.entry(item.item_type.clone()).or_insert(0) += 1;
    |                          ^^^^^ the trait `Hash` is not implemented for `semantic::types::SemanticItemType`
    |
note: required by a bound in `std::collections::HashMap::<K, V, S>::entry`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:763:13
    |
763 |     K: Eq + Hash,
    |             ^^^^ required by this bound in `HashMap::<K, V, S>::entry`
...
883 |     pub fn entry(&mut self, key: K) -> Entry<'_, K, V> {
    |            ----- required by a bound in this associated function
help: consider annotating `semantic::types::SemanticItemType` with `#[derive(Hash)]`
   --> packages/sweetmcp-memory/src/memory/semantic/types.rs:105:1
    |
105 + #[derive(Hash)]
106 | pub enum SemanticItemType {
    |

error[E0277]: the trait bound `semantic::types::ConfidenceLevel: Hash` is not satisfied
   --> packages/sweetmcp-memory/src/memory/semantic/memory_operations.rs:200:32
    |
200 |             *confidence_counts.entry(item.confidence).or_insert(0) += 1;
    |                                ^^^^^ the trait `Hash` is not implemented for `semantic::types::ConfidenceLevel`
    |
note: required by a bound in `std::collections::HashMap::<K, V, S>::entry`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:763:13
    |
763 |     K: Eq + Hash,
    |             ^^^^ required by this bound in `HashMap::<K, V, S>::entry`
...
883 |     pub fn entry(&mut self, key: K) -> Entry<'_, K, V> {
    |            ----- required by a bound in this associated function
help: consider annotating `semantic::types::ConfidenceLevel` with `#[derive(Hash)]`
   --> packages/sweetmcp-memory/src/memory/semantic/types.rs:14:1
    |
14  + #[derive(Hash)]
15  | pub enum ConfidenceLevel {
    |

error[E0599]: no method named `len` found for enum `serde_json::Value` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_operations.rs:206:55
    |
206 |             let content_length_bucket = (item.content.len() / 100) * 100; // Group by 100-char buckets
    |                                                       ^^^ method not found in `serde_json::Value`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `vector_index::VectorIndex` defines an item `len`, perhaps you need to implement it
   --> packages/sweetmcp-memory/src/vector/vector_index.rs:43:1
    |
43  | pub trait VectorIndex: Send + Sync {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `len` found for enum `serde_json::Value` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_operations.rs:210:85
    |
210 |         let total_content_length: usize = self.items.iter().map(|item| item.content.len()).sum();
    |                                                                                     ^^^ method not found in `serde_json::Value`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `vector_index::VectorIndex` defines an item `len`, perhaps you need to implement it
   --> packages/sweetmcp-memory/src/vector/vector_index.rs:43:1
    |
43  | pub trait VectorIndex: Send + Sync {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0689]: can't call method `min` on ambiguous numeric type `{float}`
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/health_check/health_report.rs:129:17
    |
129 |         penalty.min(0.8) // Cap penalty at 80%
    |                 ^^^
    |
help: you must specify a type for this binding, like `f32`
    |
118 |         let mut penalty: f32 = 0.0;
    |                        +++++

error[E0599]: no variant or associated item named `InvalidConfiguration` found for enum `utils::error::Error` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_core/optimization_executor.rs:235:31
    |
235 |             return Err(Error::InvalidConfiguration("Invalid optimization strategy".to_string()));
    |                               ^^^^^^^^^^^^^^^^^^^^ variant or associated item not found in `utils::error::Error`
    |
   ::: packages/sweetmcp-memory/src/utils/error.rs:14:1
    |
14  | pub enum Error {
    | -------------- variant or associated item `InvalidConfiguration` not found for this enum

error[E0599]: no variant or associated item named `InvalidConfiguration` found for enum `utils::error::Error` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_core/optimization_executor.rs:239:31
    |
239 |             return Err(Error::InvalidConfiguration("Safety constraints not satisfied".to_string()));
    |                               ^^^^^^^^^^^^^^^^^^^^ variant or associated item not found in `utils::error::Error`
    |
   ::: packages/sweetmcp-memory/src/utils/error.rs:14:1
    |
14  | pub enum Error {
    | -------------- variant or associated item `InvalidConfiguration` not found for this enum

error[E0599]: no variant or associated item named `InvalidConfiguration` found for enum `utils::error::Error` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_core/optimization_executor.rs:243:31
    |
243 |             return Err(Error::InvalidConfiguration("Cache capacity cannot be zero".to_string()));
    |                               ^^^^^^^^^^^^^^^^^^^^ variant or associated item not found in `utils::error::Error`
    |
   ::: packages/sweetmcp-memory/src/utils/error.rs:14:1
    |
14  | pub enum Error {
    | -------------- variant or associated item `InvalidConfiguration` not found for this enum

error[E0599]: the method `get` exists for struct `std::collections::HashMap<RecommendationType, CachedResult>`, but its trait bounds were not satisfied
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_core/operation_cache.rs:43:28
    |
43  |         match self.entries.get(recommendation_type) {
    |                            ^^^ method cannot be called due to unsatisfied trait bounds
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/memory_optimization/optimization_recommendations.rs:160:1
    |
160 | pub enum RecommendationType {
    | --------------------------- doesn't satisfy `RecommendationType: Hash`
    |
    = note: the following trait bounds were not satisfied:
            `RecommendationType: Hash`
help: consider annotating `RecommendationType` with `#[derive(Hash)]`
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/optimization_recommendations.rs:160:1
    |
160 + #[derive(Hash)]
161 | pub enum RecommendationType {
    |

error[E0599]: the method `remove` exists for struct `std::collections::HashMap<RecommendationType, CachedResult>`, but its trait bounds were not satisfied
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_core/operation_cache.rs:61:30
    |
61  |                 self.entries.remove(&oldest_key);
    |                              ^^^^^^ method cannot be called due to unsatisfied trait bounds
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/memory_optimization/optimization_recommendations.rs:160:1
    |
160 | pub enum RecommendationType {
    | --------------------------- doesn't satisfy `RecommendationType: Hash`
    |
    = note: the following trait bounds were not satisfied:
            `RecommendationType: Hash`
help: consider annotating `RecommendationType` with `#[derive(Hash)]`
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/optimization_recommendations.rs:160:1
    |
160 + #[derive(Hash)]
161 | pub enum RecommendationType {
    |

error[E0599]: the method `insert` exists for struct `std::collections::HashMap<RecommendationType, CachedResult>`, but its trait bounds were not satisfied
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_core/operation_cache.rs:70:22
    |
70  |         self.entries.insert(recommendation_type, cached_result);
    |                      ^^^^^^
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/memory_optimization/optimization_recommendations.rs:160:1
    |
160 | pub enum RecommendationType {
    | --------------------------- doesn't satisfy `RecommendationType: Hash`
    |
    = note: the following trait bounds were not satisfied:
            `RecommendationType: Hash`
help: consider annotating `RecommendationType` with `#[derive(Hash)]`
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/optimization_recommendations.rs:160:1
    |
160 + #[derive(Hash)]
161 | pub enum RecommendationType {
    |

error[E0599]: the method `remove` exists for struct `std::collections::HashMap<RecommendationType, CachedResult>`, but its trait bounds were not satisfied
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_core/operation_cache.rs:142:26
    |
142 |             self.entries.remove(&key);
    |                          ^^^^^^ method cannot be called due to unsatisfied trait bounds
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/memory_optimization/optimization_recommendations.rs:160:1
    |
160 | pub enum RecommendationType {
    | --------------------------- doesn't satisfy `RecommendationType: Hash`
    |
    = note: the following trait bounds were not satisfied:
            `RecommendationType: Hash`
help: consider annotating `RecommendationType` with `#[derive(Hash)]`
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/optimization_recommendations.rs:160:1
    |
160 + #[derive(Hash)]
161 | pub enum RecommendationType {
    |

error[E0599]: the method `contains_key` exists for struct `std::collections::HashMap<RecommendationType, CachedResult>`, but its trait bounds were not satisfied
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_core/operation_cache.rs:155:22
    |
155 |         self.entries.contains_key(recommendation_type)
    |                      ^^^^^^^^^^^^ method cannot be called due to unsatisfied trait bounds
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/memory_optimization/optimization_recommendations.rs:160:1
    |
160 | pub enum RecommendationType {
    | --------------------------- doesn't satisfy `RecommendationType: Hash`
    |
    = note: the following trait bounds were not satisfied:
            `RecommendationType: Hash`
help: consider annotating `RecommendationType` with `#[derive(Hash)]`
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/optimization_recommendations.rs:160:1
    |
160 + #[derive(Hash)]
161 | pub enum RecommendationType {
    |

error[E0599]: the method `remove` exists for struct `std::collections::HashMap<RecommendationType, CachedResult>`, but its trait bounds were not satisfied
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_core/operation_cache.rs:161:22
    |
161 |         self.entries.remove(recommendation_type)
    |                      ^^^^^^ method cannot be called due to unsatisfied trait bounds
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/memory_optimization/optimization_recommendations.rs:160:1
    |
160 | pub enum RecommendationType {
    | --------------------------- doesn't satisfy `RecommendationType: Hash`
    |
    = note: the following trait bounds were not satisfied:
            `RecommendationType: Hash`
help: consider annotating `RecommendationType` with `#[derive(Hash)]`
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/optimization_recommendations.rs:160:1
    |
160 + #[derive(Hash)]
161 | pub enum RecommendationType {
    |

error[E0599]: the method `get` exists for struct `std::collections::HashMap<RecommendationType, CachedResult>`, but its trait bounds were not satisfied
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_core/operation_cache.rs:167:22
    |
167 |         self.entries.get(recommendation_type)
    |                      ^^^ method cannot be called due to unsatisfied trait bounds
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/memory_optimization/optimization_recommendations.rs:160:1
    |
160 | pub enum RecommendationType {
    | --------------------------- doesn't satisfy `RecommendationType: Hash`
    |
    = note: the following trait bounds were not satisfied:
            `RecommendationType: Hash`
help: consider annotating `RecommendationType` with `#[derive(Hash)]`
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/optimization_recommendations.rs:160:1
    |
160 + #[derive(Hash)]
161 | pub enum RecommendationType {
    |

error[E0599]: the method `remove` exists for struct `std::collections::HashMap<RecommendationType, CachedResult>`, but its trait bounds were not satisfied
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_core/operation_cache.rs:179:30
    |
179 |                 self.entries.remove(&oldest_key);
    |                              ^^^^^^ method cannot be called due to unsatisfied trait bounds
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/memory_optimization/optimization_recommendations.rs:160:1
    |
160 | pub enum RecommendationType {
    | --------------------------- doesn't satisfy `RecommendationType: Hash`
    |
    = note: the following trait bounds were not satisfied:
            `RecommendationType: Hash`
help: consider annotating `RecommendationType` with `#[derive(Hash)]`
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/optimization_recommendations.rs:160:1
    |
160 + #[derive(Hash)]
161 | pub enum RecommendationType {
    |

error[E0599]: the method `remove` exists for struct `std::collections::HashMap<RecommendationType, CachedResult>`, but its trait bounds were not satisfied
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_core/operation_cache.rs:226:30
    |
226 |                 self.entries.remove(&oldest_key);
    |                              ^^^^^^ method cannot be called due to unsatisfied trait bounds
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/memory_optimization/optimization_recommendations.rs:160:1
    |
160 | pub enum RecommendationType {
    | --------------------------- doesn't satisfy `RecommendationType: Hash`
    |
    = note: the following trait bounds were not satisfied:
            `RecommendationType: Hash`
help: consider annotating `RecommendationType` with `#[derive(Hash)]`
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/optimization_recommendations.rs:160:1
    |
160 + #[derive(Hash)]
161 | pub enum RecommendationType {
    |

error[E0282]: type annotations needed
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_core/optimization_results.rs:274:13
    |
274 |         let total_execution_time = individual_results.iter()
    |             ^^^^^^^^^^^^^^^^^^^^
...
278 |         let efficiency_score = if total_execution_time.as_secs_f64() > 0.0 {
    |                                   -------------------- type must be known at this point
    |
help: consider giving `total_execution_time` an explicit type
    |
274 |         let total_execution_time: /* Type */ = individual_results.iter()
    |                                 ++++++++++++

error[E0616]: field `strategy` of struct `operations_core::optimization_executor::OptimizationExecutor` is private
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_implementations.rs:550:35
    |
550 |             let a_priority = self.strategy.priority_order.iter()
    |                                   ^^^^^^^^ private field
    |
help: a method `strategy` also exists, call it with parentheses
    |
550 |             let a_priority = self.strategy().priority_order.iter()
    |                                           ++

error[E0616]: field `strategy` of struct `operations_core::optimization_executor::OptimizationExecutor` is private
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_implementations.rs:553:35
    |
553 |             let b_priority = self.strategy.priority_order.iter()
    |                                   ^^^^^^^^ private field
    |
help: a method `strategy` also exists, call it with parentheses
    |
553 |             let b_priority = self.strategy().priority_order.iter()
    |                                           ++

error[E0616]: field `strategy` of struct `operations_core::optimization_executor::OptimizationExecutor` is private
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_implementations.rs:561:35
    |
561 |         prioritized.truncate(self.strategy.max_operations);
    |                                   ^^^^^^^^ private field
    |
help: a method `strategy` also exists, call it with parentheses
    |
561 |         prioritized.truncate(self.strategy().max_operations);
    |                                           ++

error[E0616]: field `strategy` of struct `operations_core::optimization_executor::OptimizationExecutor` is private
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_implementations.rs:568:52
    |
568 |         recommendation.expected_improvement < self.strategy.min_improvement_threshold
    |                                                    ^^^^^^^^ private field
    |
help: a method `strategy` also exists, call it with parentheses
    |
568 |         recommendation.expected_improvement < self.strategy().min_improvement_threshold
    |                                                            ++

error[E0616]: field `strategy` of struct `operations_core::optimization_executor::OptimizationExecutor` is private
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_implementations.rs:577:35
    |
577 |         total_improvement >= self.strategy.early_stop_threshold
    |                                   ^^^^^^^^ private field
    |
help: a method `strategy` also exists, call it with parentheses
    |
577 |         total_improvement >= self.strategy().early_stop_threshold
    |                                           ++

error[E0616]: field `safety_constraints` of struct `operations_core::optimization_executor::OptimizationExecutor` is private
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_implementations.rs:586:22
    |
586 |                 self.safety_constraints.require_backup == false || 
    |                      ^^^^^^^^^^^^^^^^^^ private field
    |
help: a method `safety_constraints` also exists, call it with parentheses
    |
586 |                 self.safety_constraints().require_backup == false || 
    |                                        ++

error[E0616]: field `safety_constraints` of struct `operations_core::optimization_executor::OptimizationExecutor` is private
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_implementations.rs:587:22
    |
587 |                 self.safety_constraints.enable_rollback
    |                      ^^^^^^^^^^^^^^^^^^ private field
    |
help: a method `safety_constraints` also exists, call it with parentheses
    |
587 |                 self.safety_constraints().enable_rollback
    |                                        ++

error[E0599]: no method named `as_ref` found for enum `serde_json::Value` in the current scope
  --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_utilities.rs:90:47
   |
90 |         let content_size = match item.content.as_ref() {
   |                                               ^^^^^^ method not found in `serde_json::Value`

error[E0599]: no method named `as_ref` found for struct `std::collections::HashMap` in the current scope
  --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_utilities.rs:96:43
   |
96 |         let metadata_size = item.metadata.as_ref()
   |                                           ^^^^^^ method not found in `std::collections::HashMap<std::string::String, serde_json::Value>`

error[E0282]: type annotations needed
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_utilities.rs:168:58
    |
168 |             let source_frequent = relationship.source_id.as_ref()
    |                                                          ^^^^^^
169 |                 .and_then(|id| items.get(id))
    |                  -------- type must be known at this point
    |
help: try using a fully qualified path to specify the expected types
    |
168 -             let source_frequent = relationship.source_id.as_ref()
168 +             let source_frequent = <std::string::String as AsRef<T>>::as_ref(&relationship.source_id)
    |

error[E0282]: type annotations needed
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_utilities.rs:173:58
    |
173 |             let target_frequent = relationship.target_id.as_ref()
    |                                                          ^^^^^^
174 |                 .and_then(|id| items.get(id))
    |                  -------- type must be known at this point
    |
help: try using a fully qualified path to specify the expected types
    |
173 -             let target_frequent = relationship.target_id.as_ref()
173 +             let target_frequent = <std::string::String as AsRef<T>>::as_ref(&relationship.target_id)
    |

error[E0282]: type annotations needed
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_utilities.rs:339:56
    |
339 |             let source_exists = relationship.source_id.as_ref()
    |                                                        ^^^^^^
340 |                 .map(|id| items.contains_key(id))
    |                  --- type must be known at this point
    |
help: try using a fully qualified path to specify the expected types
    |
339 -             let source_exists = relationship.source_id.as_ref()
339 +             let source_exists = <std::string::String as AsRef<T>>::as_ref(&relationship.source_id)
    |

error[E0282]: type annotations needed
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_utilities.rs:343:56
    |
343 |             let target_exists = relationship.target_id.as_ref()
    |                                                        ^^^^^^
344 |                 .map(|id| items.contains_key(id))
    |                  --- type must be known at this point
    |
help: try using a fully qualified path to specify the expected types
    |
343 -             let target_exists = relationship.target_id.as_ref()
343 +             let target_exists = <std::string::String as AsRef<T>>::as_ref(&relationship.target_id)
    |

error[E0599]: `f32` is not an iterator
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_utilities.rs:363:51
    |
363 |         let weak_strength = relationship.strength.map(|s| s < 0.1).unwrap_or(true);
    |                                                   ^^^ `f32` is not an iterator
    |
    = note: the following trait bounds were not satisfied:
            `f32: Iterator`
            which is required by `&mut f32: Iterator`

error[E0282]: type annotations needed
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_utilities.rs:365:53
    |
365 |         let missing_source = relationship.source_id.as_ref()
    |                                                     ^^^^^^
366 |             .map(|id| !items.contains_key(id))
    |              --- type must be known at this point
    |
help: try using a fully qualified path to specify the expected types
    |
365 -         let missing_source = relationship.source_id.as_ref()
365 +         let missing_source = <std::string::String as AsRef<T>>::as_ref(&relationship.source_id)
    |

error[E0282]: type annotations needed
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_utilities.rs:369:53
    |
369 |         let missing_target = relationship.target_id.as_ref()
    |                                                     ^^^^^^
370 |             .map(|id| !items.contains_key(id))
    |              --- type must be known at this point
    |
help: try using a fully qualified path to specify the expected types
    |
369 -         let missing_target = relationship.target_id.as_ref()
369 +         let missing_target = <std::string::String as AsRef<T>>::as_ref(&relationship.target_id)
    |

error[E0599]: no method named `as_ref` found for struct `std::collections::HashMap` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_utilities.rs:411:48
    |
411 |         let has_large_metadata = item.metadata.as_ref()
    |                                                ^^^^^^ method not found in `std::collections::HashMap<std::string::String, serde_json::Value>`

error[E0599]: no method named `is_none` found for enum `serde_json::Value` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_utilities.rs:415:46
    |
415 |         let has_unused_fields = item.content.is_none() || item.embedding.is_none();
    |                                              ^^^^^^^ method not found in `serde_json::Value`

error[E0609]: no field `embedding` on type `&semantic_item::SemanticItem`
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_utilities.rs:415:64
    |
415 |         let has_unused_fields = item.content.is_none() || item.embedding.is_none();
    |                                                                ^^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `content`, `item_type`, `confidence`, `metadata` ... and 4 others

error[E0599]: `f32` is not an iterator
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_utilities.rs:424:55
    |
424 |         let has_weak_strength = relationship.strength.map(|s| s < 0.1).unwrap_or(true);
    |                                                       ^^^ `f32` is not an iterator
    |
    = note: the following trait bounds were not satisfied:
            `f32: Iterator`
            which is required by `&mut f32: Iterator`

error[E0599]: no method named `is_none` found for struct `std::collections::HashMap` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_utilities.rs:425:58
    |
425 |         let has_missing_metadata = relationship.metadata.is_none();
    |                                                          ^^^^^^^ method not found in `std::collections::HashMap<std::string::String, serde_json::Value>`

error[E0277]: can't compare `&_` with `std::option::Option<&std::string::String>`
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_utilities.rs:441:36
    |
441 |             rel.source_id.as_ref() == Some(item_id) || 
    |                                    ^^ no implementation for `&_ == std::option::Option<&std::string::String>`
    |
    = help: the trait `PartialEq<std::option::Option<&std::string::String>>` is not implemented for `&_`
help: consider dereferencing here
    |
441 |             *rel.source_id.as_ref() == Some(item_id) || 
    |             +

error[E0277]: can't compare `&_` with `std::option::Option<&std::string::String>`
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_utilities.rs:442:36
    |
442 |             rel.target_id.as_ref() == Some(item_id)
    |                                    ^^ no implementation for `&_ == std::option::Option<&std::string::String>`
    |
    = help: the trait `PartialEq<std::option::Option<&std::string::String>>` is not implemented for `&_`
help: consider dereferencing here
    |
442 |             *rel.target_id.as_ref() == Some(item_id)
    |             +

error[E0616]: field `safety_constraints` of struct `operations_core::optimization_executor::OptimizationExecutor` is private
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_utilities.rs:516:57
    |
516 |         let within_memory_limits = memory_usage <= self.safety_constraints.max_memory_usage;
    |                                                         ^^^^^^^^^^^^^^^^^^ private field
    |
help: a method `safety_constraints` also exists, call it with parentheses
    |
516 |         let within_memory_limits = memory_usage <= self.safety_constraints().max_memory_usage;
    |                                                                           ++

error[E0616]: field `safety_constraints` of struct `operations_core::optimization_executor::OptimizationExecutor` is private
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_utilities.rs:517:51
    |
517 |         let reasonable_size = items.len() <= self.safety_constraints.max_items_per_operation;
    |                                                   ^^^^^^^^^^^^^^^^^^ private field
    |
help: a method `safety_constraints` also exists, call it with parentheses
    |
517 |         let reasonable_size = items.len() <= self.safety_constraints().max_items_per_operation;
    |                                                                     ++

error[E0616]: field `strategy` of struct `operations_core::optimization_executor::OptimizationExecutor` is private
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_utilities.rs:525:14
    |
525 |         self.strategy.priority_order.clone()
    |              ^^^^^^^^ private field
    |
help: a method `strategy` also exists, call it with parentheses
    |
525 |         self.strategy().priority_order.clone()
    |                      ++

error[E0599]: no function or associated item named `quality_focused` found for struct `optimization_strategy::OptimizationStrategy` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/mod.rs:108:84
    |
108 |             optimization_executor: OptimizationExecutor::new(OptimizationStrategy::quality_focused()),
    |                                                                                    ^^^^^^^^^^^^^^^ function or associated item not found in `optimization_strategy::OptimizationStrategy`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_core/optimization_strategy.rs:12:1
    |
12  | pub struct OptimizationStrategy {
    | ------------------------------- function or associated item `quality_focused` not found for this struct
    |
note: if you're trying to build a new `optimization_strategy::OptimizationStrategy` consider using one of the following associated functions:
      optimization_strategy::OptimizationStrategy::conservative
      optimization_strategy::OptimizationStrategy::balanced
      optimization_strategy::OptimizationStrategy::aggressive
      optimization_strategy::OptimizationStrategy::high_performance
      and 3 others
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_core/optimization_strategy.rs:32:5
    |
32  |     pub fn conservative() -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
50  |     pub fn balanced() -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^
...
70  |     pub fn aggressive() -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
95  |     pub fn high_performance() -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `memory_usage_mb` found for reference `&memory_manager_core::statistics::statistics::MemoryStatistics` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/mod.rs:236:38
    |
236 |             memory_usage: statistics.memory_usage_mb() as f64 / 1024.0, // Convert to GB
    |                                      ^^^^^^^^^^^^^^^
    |
help: there is a method `memory_usage_percent` with a similar name
    |
236 -             memory_usage: statistics.memory_usage_mb() as f64 / 1024.0, // Convert to GB
236 +             memory_usage: statistics.memory_usage_percent() as f64 / 1024.0, // Convert to GB
    |

error[E0599]: no method named `access_count` found for reference `&semantic_item::SemanticItem` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/mod.rs:278:68
    |
278 |         let total_accesses: usize = items.values().map(|item| item.access_count()).sum();
    |                                                                    ^^^^^^^^^^^^-- help: remove the arguments
    |                                                                    |
    |                                                                    field, not a method

error[E0599]: no method named `strength` found for reference `&&semantic_relationship::SemanticRelationship` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/mod.rs:295:31
    |
295 |             .filter(|rel| rel.strength() > 0.1 && !rel.is_expired())
    |                               ^^^^^^^^-- help: remove the arguments
    |                               |
    |                               field, not a method
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `traits::Memory` defines an item `strength`, perhaps you need to implement it
   --> packages/sweetmcp-memory/src/memory/memory_type/traits.rs:68:1
    |
68  | pub trait Memory: Send + Sync + Debug {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is a method `update_strength` with a similar name, but with different arguments
   --> packages/sweetmcp-memory/src/memory/semantic/semantic_relationship.rs:108:5
    |
108 |     pub fn update_strength(&mut self, strength: f32) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `is_expired` found for reference `&&semantic_relationship::SemanticRelationship` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/mod.rs:295:56
    |
295 |             .filter(|rel| rel.strength() > 0.1 && !rel.is_expired())
    |                                                        ^^^^^^^^^^ method not found in `&&semantic_relationship::SemanticRelationship`

error[E0599]: no method named `content` found for reference `&&semantic_item::SemanticItem` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/mod.rs:333:33
    |
333 |             .filter(|item| item.content().len() > 1000)
    |                                 ^^^^^^^ field, not a method
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `traits::Memory` defines an item `content`, perhaps you need to implement it
   --> packages/sweetmcp-memory/src/memory/memory_type/traits.rs:68:1
    |
68  | pub trait Memory: Send + Sync + Debug {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: remove the arguments
    |
333 -             .filter(|item| item.content().len() > 1000)
333 +             .filter(|item| item.content.len() > 1000)
    |
help: there is a method `content_size` with a similar name
    |
333 |             .filter(|item| item.content_size().len() > 1000)
    |                                        +++++

error[E0599]: no method named `access_count` found for reference `&&semantic_item::SemanticItem` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/mod.rs:360:33
    |
360 |             .filter(|item| item.access_count() > 100)
    |                                 ^^^^^^^^^^^^-- help: remove the arguments
    |                                 |
    |                                 field, not a method

error[E0599]: no method named `is_expired` found for reference `&&semantic_relationship::SemanticRelationship` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/mod.rs:456:31
    |
456 |             .filter(|rel| rel.is_expired())
    |                               ^^^^^^^^^^ method not found in `&&semantic_relationship::SemanticRelationship`

error[E0599]: no method named `get_metrics` found for struct `operations_core::optimization_executor::OptimizationExecutor` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/mod.rs:486:36
    |
486 |         self.optimization_executor.get_metrics()
    |                                    ^^^^^^^^^^^
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_core/optimization_executor.rs:27:1
    |
27  | pub struct OptimizationExecutor {
    | ------------------------------- method `get_metrics` not found for this struct
    |
help: there is a method `metrics` with a similar name
    |
486 -         self.optimization_executor.get_metrics()
486 +         self.optimization_executor.metrics()
    |

error[E0599]: no method named `update_strategy` found for struct `operations_core::optimization_executor::OptimizationExecutor` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/mod.rs:492:36
    |
492 |         self.optimization_executor.update_strategy(strategy);
    |                                    ^^^^^^^^^^^^^^^
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_core/optimization_executor.rs:27:1
    |
27  | pub struct OptimizationExecutor {
    | ------------------------------- method `update_strategy` not found for this struct
    |
help: there is a method `strategy` with a similar name, but with different arguments
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/operations_core/optimization_executor.rs:89:5
    |
89  |     pub fn strategy(&self) -> &OptimizationStrategy {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `Cleanup` found for enum `RecommendationType` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/mod.rs:594:54
    |
594 |             recommendation_type: RecommendationType::Cleanup,
    |                                                      ^^^^^^^ variant or associated item not found in `RecommendationType`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/memory_optimization/optimization_recommendations.rs:160:1
    |
160 | pub enum RecommendationType {
    | --------------------------- variant or associated item `Cleanup` not found for this enum

error[E0560]: struct `optimization_recommendations::OptimizationRecommendation` has no field named `complexity`
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/mod.rs:595:13
    |
595 |             complexity: ComplexityLevel::Low,
    |             ^^^^^^^^^^ `optimization_recommendations::OptimizationRecommendation` does not have this field
    |
    = note: available fields are: `priority`, `expected_improvement`, `estimated_duration`, `risks`, `prerequisites`

error[E0560]: struct `optimization_recommendations::OptimizationRecommendation` has no field named `risk`
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/mod.rs:596:13
    |
596 |             risk: RiskLevel::Low,
    |             ^^^^ unknown field
    |
help: a field with a similar name exists
    |
596 |             risks: RiskLevel::Low,
    |                 +

error[E0560]: struct `optimization_recommendations::OptimizationRecommendation` has no field named `urgency`
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/mod.rs:597:13
    |
597 |             urgency: UrgencyLevel::Low,
    |             ^^^^^^^ `optimization_recommendations::OptimizationRecommendation` does not have this field
    |
    = note: available fields are: `priority`, `expected_improvement`, `estimated_duration`, `risks`, `prerequisites`

error[E0560]: struct `optimization_recommendations::OptimizationRecommendation` has no field named `expected_benefit`
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/mod.rs:599:13
    |
599 |             expected_benefit: 0.1,
    |             ^^^^^^^^^^^^^^^^ `optimization_recommendations::OptimizationRecommendation` does not have this field
    |
    = note: available fields are: `priority`, `expected_improvement`, `estimated_duration`, `risks`, `prerequisites`

error[E0560]: struct `optimization_recommendations::OptimizationRecommendation` has no field named `estimated_duration_ms`
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/mod.rs:600:13
    |
600 |             estimated_duration_ms: 1000,
    |             ^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
600 -             estimated_duration_ms: 1000,
600 +             estimated_duration: 1000,
    |

error[E0599]: no method named `contains` found for enum `serde_json::Value` in the current scope
  --> packages/sweetmcp-memory/src/memory/semantic/memory_queries.rs:15:41
   |
15 |             .filter(|item| item.content.contains(substring))
   |                                         ^^^^^^^^ method not found in `serde_json::Value`

error[E0277]: the trait bound `semantic::relationship_types::SemanticRelationshipType: Hash` is not satisfied
   --> packages/sweetmcp-memory/src/memory/semantic/memory_queries.rs:122:21
    |
122 |             *counts.entry(relationship.relationship_type).or_insert(0) += 1;
    |                     ^^^^^ the trait `Hash` is not implemented for `semantic::relationship_types::SemanticRelationshipType`
    |
note: required by a bound in `std::collections::HashMap::<K, V, S>::entry`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:763:13
    |
763 |     K: Eq + Hash,
    |             ^^^^ required by this bound in `HashMap::<K, V, S>::entry`
...
883 |     pub fn entry(&mut self, key: K) -> Entry<'_, K, V> {
    |            ----- required by a bound in this associated function
help: consider annotating `semantic::relationship_types::SemanticRelationshipType` with `#[derive(Hash)]`
   --> packages/sweetmcp-memory/src/memory/semantic/relationship_types.rs:11:1
    |
11  + #[derive(Hash)]
12  | pub enum SemanticRelationshipType {
    |

error[E0599]: no method named `contains` found for enum `serde_json::Value` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_queries.rs:139:30
    |
139 |             if !item.content.contains(content_filter) {
    |                              ^^^^^^^^ method not found in `serde_json::Value`

error[E0599]: no method named `len` found for enum `serde_json::Value` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_queries.rs:228:44
    |
228 |             items.sort_by(|a, b| a.content.len().cmp(&b.content.len()));
    |                                            ^^^ method not found in `serde_json::Value`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `vector_index::VectorIndex` defines an item `len`, perhaps you need to implement it
   --> packages/sweetmcp-memory/src/vector/vector_index.rs:43:1
    |
43  | pub trait VectorIndex: Send + Sync {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `len` found for enum `serde_json::Value` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_queries.rs:228:65
    |
228 |             items.sort_by(|a, b| a.content.len().cmp(&b.content.len()));
    |                                                                 ^^^ method not found in `serde_json::Value`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `vector_index::VectorIndex` defines an item `len`, perhaps you need to implement it
   --> packages/sweetmcp-memory/src/vector/vector_index.rs:43:1
    |
43  | pub trait VectorIndex: Send + Sync {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `len` found for enum `serde_json::Value` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_queries.rs:230:44
    |
230 |             items.sort_by(|a, b| b.content.len().cmp(&a.content.len()));
    |                                            ^^^ method not found in `serde_json::Value`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `vector_index::VectorIndex` defines an item `len`, perhaps you need to implement it
   --> packages/sweetmcp-memory/src/vector/vector_index.rs:43:1
    |
43  | pub trait VectorIndex: Send + Sync {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `len` found for enum `serde_json::Value` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_queries.rs:230:65
    |
230 |             items.sort_by(|a, b| b.content.len().cmp(&a.content.len()));
    |                                                                 ^^^ method not found in `serde_json::Value`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `vector_index::VectorIndex` defines an item `len`, perhaps you need to implement it
   --> packages/sweetmcp-memory/src/vector/vector_index.rs:43:1
    |
43  | pub trait VectorIndex: Send + Sync {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `to_lowercase` found for enum `serde_json::Value` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_search.rs:15:68
    |
15  |             let distance = self.levenshtein_distance(&item.content.to_lowercase(), &query.to_lowercase());
    |                                                                    ^^^^^^^^^^^^ method not found in `serde_json::Value`
    |
note: the method `to_lowercase` exists on the type `std::string::String`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/str.rs:380:5
    |
380 |     pub fn to_lowercase(&self) -> String {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `to_lowercase` found for enum `serde_json::Value` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_search.rs:68:73
    |
68  |             let similarity = self.jaro_winkler_similarity(&item.content.to_lowercase(), &query.to_lowercase());
    |                                                                         ^^^^^^^^^^^^ method not found in `serde_json::Value`
    |
note: the method `to_lowercase` exists on the type `std::string::String`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/str.rs:380:5
    |
380 |     pub fn to_lowercase(&self) -> String {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/memory/semantic/memory_search.rs:169:52
    |
169 |             let item_ngrams = self.generate_ngrams(&item.content, n);
    |                                    --------------- ^^^^^^^^^^^^^ expected `&str`, found `&Value`
    |                                    |
    |                                    arguments to this method are incorrect
    |
    = note: expected reference `&str`
               found reference `&serde_json::Value`
note: method defined here
   --> packages/sweetmcp-memory/src/memory/semantic/memory_search.rs:183:8
    |
183 |     fn generate_ngrams(&self, text: &str, n: usize) -> std::collections::HashSet<String> {
    |        ^^^^^^^^^^^^^^^        ----------

error[E0599]: no method named `to_lowercase` found for enum `serde_json::Value` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_search.rs:221:46
    |
221 |             let content_lower = item.content.to_lowercase();
    |                                              ^^^^^^^^^^^^ method not found in `serde_json::Value`
    |
note: the method `to_lowercase` exists on the type `std::string::String`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/str.rs:380:5
    |
380 |     pub fn to_lowercase(&self) -> String {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0369]: binary operation `!=` cannot be applied to type `&item_core::SemanticItem`
  --> packages/sweetmcp-memory/src/memory/semantic/memory_snapshots.rs:41:25
   |
41 |                 if item != old_item {
   |                    ---- ^^ -------- &item_core::SemanticItem
   |                    |
   |                    &item_core::SemanticItem
   |
note: an implementation of `PartialEq` might be missing for `item_core::SemanticItem`
  --> packages/sweetmcp-memory/src/memory/semantic/item_core.rs:18:1
   |
18 | pub struct SemanticItem {
   | ^^^^^^^^^^^^^^^^^^^^^^^ must implement `PartialEq`
help: consider annotating `item_core::SemanticItem` with `#[derive(PartialEq)]`
  --> packages/sweetmcp-memory/src/memory/semantic/item_core.rs:18:1
   |
18 + #[derive(PartialEq)]
19 | pub struct SemanticItem {
   |

error[E0369]: binary operation `!=` cannot be applied to type `&semantic::relationship::SemanticRelationship`
  --> packages/sweetmcp-memory/src/memory/semantic/memory_snapshots.rs:52:33
   |
52 |                 if relationship != old_relationship {
   |                    ------------ ^^ ---------------- &semantic::relationship::SemanticRelationship
   |                    |
   |                    &semantic::relationship::SemanticRelationship
   |
note: an implementation of `PartialEq` might be missing for `semantic::relationship::SemanticRelationship`
  --> packages/sweetmcp-memory/src/memory/semantic/relationship.rs:18:1
   |
18 | pub struct SemanticRelationship {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ must implement `PartialEq`
help: consider annotating `semantic::relationship::SemanticRelationship` with `#[derive(PartialEq)]`
  --> packages/sweetmcp-memory/src/memory/semantic/relationship.rs:18:1
   |
18 + #[derive(PartialEq)]
19 | pub struct SemanticRelationship {
   |

error[E0599]: no method named `len` found for enum `serde_json::Value` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/memory_snapshots.rs:134:34
    |
134 |             size += item.content.len();
    |                                  ^^^ method not found in `serde_json::Value`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
note: `vector_index::VectorIndex` defines an item `len`, perhaps you need to implement it
   --> packages/sweetmcp-memory/src/vector/vector_index.rs:43:1
    |
43  | pub trait VectorIndex: Send + Sync {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0689]: can't call method `log2` on ambiguous numeric type `{float}`
   --> packages/sweetmcp-memory/src/memory/semantic/memory_statistics.rs:146:46
    |
146 |         let max_entropy = max_possible_types.log2();
    |                                              ^^^^
    |
help: you must specify a type for this binding, like `f32`
    |
131 |         let max_possible_types: f32 = 4.0; // Number of SemanticItemType variants
    |                               +++++

error[E0277]: the trait bound `semantic::relationships::relationship_types::SemanticRelationshipType: std::cmp::Ord` is not satisfied
   --> packages/sweetmcp-memory/src/memory/semantic/relationships/relationship_patterns.rs:367:36
    |
367 |         pattern.relationship_types.sort();
    |                                    ^^^^ the trait `std::cmp::Ord` is not implemented for `semantic::relationships::relationship_types::SemanticRelationshipType`
    |
note: required by a bound in `std::slice::<impl [T]>::sort`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/slice.rs:135:12
    |
133 |     pub fn sort(&mut self)
    |            ---- required by a bound in this associated function
134 |     where
135 |         T: Ord,
    |            ^^^ required by this bound in `std::slice::<impl [T]>::sort`
help: consider annotating `semantic::relationships::relationship_types::SemanticRelationshipType` with `#[derive(Ord)]`
   --> packages/sweetmcp-memory/src/memory/semantic/relationships/relationship_types.rs:10:1
    |
10  + #[derive(Ord)]
11  | pub enum SemanticRelationshipType {
    |

error[E0599]: no method named `validate_relationship` found for struct `RelationshipValidator` in the current scope
  --> packages/sweetmcp-memory/src/memory/semantic/relationships/mod.rs:57:24
   |
57 |           self.validator.validate_relationship(
   |           ---------------^^^^^^^^^^^^^^^^^^^^^ this is an associated function, not a method
   |  _________|
   | |
58 | |             source_id,
59 | |             target_id,
60 | |             &relationship_type,
61 | |             source_type,
62 | |             target_type,
63 | |         )?;
   | |_________- help: use associated function syntax instead: `RelationshipValidator::validate_relationship(source_id, target_id, &relationship_type, source_type, target_type)`
   |
  ::: packages/sweetmcp-memory/src/memory/semantic/relationships/relationship_validator.rs:10:1
   |
10 |   pub struct RelationshipValidator;
   |   -------------------------------- method `validate_relationship` not found for this struct
   |
   = note: found the following associated functions; to be used as methods, functions must have a `self` parameter
note: the candidate is defined in an impl for the type `RelationshipValidator`
  --> packages/sweetmcp-memory/src/memory/semantic/relationships/relationship_validator.rs:15:5
   |
15 | /     pub fn validate_relationship(
16 | |         source_id: &str,
17 | |         target_id: &str,
18 | |         relationship_type: &SemanticRelationshipType,
19 | |         source_type: &super::super::item_types::SemanticItemType,
20 | |         target_type: &super::super::item_types::SemanticItemType,
21 | |     ) -> Result<(), ValidationError> {
   | |____________________________________^

error[E0599]: no method named `batch_validate` found for struct `RelationshipValidator` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/relationships/mod.rs:82:37
    |
82  |         let report = self.validator.batch_validate(relationships, item_types, options);
    |                      ---------------^^^^^^^^^^^^^^------------------------------------
    |                      |              |
    |                      |              this is an associated function, not a method
    |                      help: use associated function syntax instead: `RelationshipValidator::batch_validate(relationships, item_types, options)`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/relationships/relationship_validator.rs:10:1
    |
10  | pub struct RelationshipValidator;
    | -------------------------------- method `batch_validate` not found for this struct
    |
    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter
note: the candidate is defined in an impl for the type `RelationshipValidator`
   --> packages/sweetmcp-memory/src/memory/semantic/relationships/relationship_validator.rs:291:5
    |
291 | /     pub fn batch_validate(
292 | |         relationships: &[(String, String, SemanticRelationshipType)],
293 | |         item_types: &std::collections::HashMap<String, super::super::item_types::SemanticItemType>,
294 | |         options: ValidationOptions,
295 | |     ) -> ValidationReport {
    | |_________________________^

error[E0599]: the method `entry` exists for struct `HashMap<SemanticRelationshipType, usize>`, but its trait bounds were not satisfied
   --> packages/sweetmcp-memory/src/memory/semantic/relationships/mod.rs:154:32
    |
154 |             *stats.type_counts.entry(relationship.relationship_type.clone()).or_insert(0) += 1;
    |                                ^^^^^ method cannot be called on `HashMap<SemanticRelationshipType, usize>` due to unsatisfied trait bounds
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/relationships/relationship_types.rs:10:1
    |
10  | pub enum SemanticRelationshipType {
    | --------------------------------- doesn't satisfy `_: Hash`
    |
    = note: the following trait bounds were not satisfied:
            `semantic::relationships::relationship_types::SemanticRelationshipType: Hash`
help: consider annotating `semantic::relationships::relationship_types::SemanticRelationshipType` with `#[derive(Hash)]`
   --> packages/sweetmcp-memory/src/memory/semantic/relationships/relationship_types.rs:10:1
    |
10  + #[derive(Hash)]
11  | pub enum SemanticRelationshipType {
    |

error[E0599]: no method named `is_bidirectional` found for enum `semantic::relationships::relationship_types::SemanticRelationshipType` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/semantic_relationship.rs:201:32
    |
201 |         self.relationship_type.is_bidirectional()
    |                                ^^^^^^^^^^^^^^^^
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/relationships/relationship_types.rs:10:1
    |
10  | pub enum SemanticRelationshipType {
    | --------------------------------- method `is_bidirectional` not found for this enum
    |
help: there is a method `is_directional` with a similar name
    |
201 -         self.relationship_type.is_bidirectional()
201 +         self.relationship_type.is_directional()
    |

error[E0599]: no method named `quality_weight` found for enum `semantic::relationships::relationship_types::SemanticRelationshipType` in the current scope
   --> packages/sweetmcp-memory/src/memory/semantic/semantic_relationship.rs:229:50
    |
229 |         let type_weight = self.relationship_type.quality_weight();
    |                                                  ^^^^^^^^^^^^^^ method not found in `semantic::relationships::relationship_types::SemanticRelationshipType`
    |
   ::: packages/sweetmcp-memory/src/memory/semantic/relationships/relationship_types.rs:10:1
    |
10  | pub enum SemanticRelationshipType {
    | --------------------------------- method `quality_weight` not found for this enum

error[E0283]: type annotations needed
   --> packages/sweetmcp-memory/src/vector/vector_search/hybrid_search.rs:171:39
    |
167 |                     surrealdb::sql::Value::Object(surrealdb::sql::Object::from([
    |                                                   ---------------------- type must be known at this point
...
171 |                     ].iter().cloned().collect()))
    |                                       ^^^^^^^ cannot infer type of the type parameter `B` declared on the method `collect`
    |
    = note: multiple `impl`s satisfying `surrealdb::sql::Object: std::convert::From<_>` found in the `surrealdb_core` crate:
            - impl std::convert::From<AccessGrant> for surrealdb::sql::Object;
            - impl std::convert::From<BTreeMap<std::string::String, std::string::String>> for surrealdb::sql::Object;
            - impl std::convert::From<BTreeMap<std::string::String, surrealdb::sql::Value>> for surrealdb::sql::Object;
            - impl std::convert::From<std::collections::HashMap<std::string::String, surrealdb::sql::Value>> for surrealdb::sql::Object;
            - impl std::convert::From<std::option::Option<surrealdb::sql::Object>> for surrealdb::sql::Object;
            - impl std::convert::From<surrealdb::sql::Operation> for surrealdb::sql::Object;
help: consider specifying the generic argument
    |
171 |                     ].iter().cloned().collect::<Vec<_>>()))
    |                                              ++++++++++

error[E0283]: type annotations needed
    --> packages/sweetmcp-memory/src/vector/vector_search/hybrid_search.rs:171:39
     |
171  |                     ].iter().cloned().collect()))
     |                                       ^^^^^^^ cannot infer type of the type parameter `B` declared on the method `collect`
     |
     = note: multiple `impl`s satisfying `_: FromIterator<(std::string::String, surrealdb::sql::Value)>` found in the `surrealdb_core` crate:
             - impl FromIterator<(std::string::String, surrealdb::sql::Value)> for surrealdb::sql::Object;
             - impl FromIterator<(std::string::String, surrealdb::sql::Value)> for surrealdb::sql::Value;
note: required by a bound in `std::iter::Iterator::collect`
    --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs:2014:19
     |
2014 |     fn collect<B: FromIterator<Self::Item>>(self) -> B
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::collect`
help: consider specifying the generic argument
     |
171  |                     ].iter().cloned().collect::<Vec<_>>()))
     |                                              ++++++++++

error[E0599]: no variant or associated item named `InvalidVector` found for enum `utils::error::Error` in the current scope
   --> packages/sweetmcp-memory/src/vector/async_vector_core.rs:110:31
    |
110 |             return Err(Error::InvalidVector("Vector cannot be empty".to_string()));
    |                               ^^^^^^^^^^^^^ variant or associated item not found in `utils::error::Error`
    |
   ::: packages/sweetmcp-memory/src/utils/error.rs:14:1
    |
14  | pub enum Error {
    | -------------- variant or associated item `InvalidVector` not found for this enum

error[E0599]: no variant or associated item named `InvalidVector` found for enum `utils::error::Error` in the current scope
   --> packages/sweetmcp-memory/src/vector/async_vector_core.rs:114:31
    |
114 |             return Err(Error::InvalidVector("Vector dimensions exceed maximum limit".to_string()));
    |                               ^^^^^^^^^^^^^ variant or associated item not found in `utils::error::Error`
    |
   ::: packages/sweetmcp-memory/src/utils/error.rs:14:1
    |
14  | pub enum Error {
    | -------------- variant or associated item `InvalidVector` not found for this enum

error[E0599]: no variant or associated item named `InvalidVector` found for enum `utils::error::Error` in the current scope
   --> packages/sweetmcp-memory/src/vector/async_vector_core.rs:120:35
    |
120 |                 return Err(Error::InvalidVector(
    |                                   ^^^^^^^^^^^^^ variant or associated item not found in `utils::error::Error`
    |
   ::: packages/sweetmcp-memory/src/utils/error.rs:14:1
    |
14  | pub enum Error {
    | -------------- variant or associated item `InvalidVector` not found for this enum

error[E0599]: no variant named `DimensionMismatch` found for enum `utils::error::Error`
   --> packages/sweetmcp-memory/src/vector/async_vector_core.rs:150:31
    |
150 |             return Err(Error::DimensionMismatch {
    |                               ^^^^^^^^^^^^^^^^^ variant not found in `utils::error::Error`
    |
   ::: packages/sweetmcp-memory/src/utils/error.rs:14:1
    |
14  | pub enum Error {
    | -------------- variant `DimensionMismatch` not found here

error[E0599]: no variant named `DimensionMismatch` found for enum `utils::error::Error`
   --> packages/sweetmcp-memory/src/vector/async_vector_core.rs:171:31
    |
171 |             return Err(Error::DimensionMismatch {
    |                               ^^^^^^^^^^^^^^^^^ variant not found in `utils::error::Error`
    |
   ::: packages/sweetmcp-memory/src/utils/error.rs:14:1
    |
14  | pub enum Error {
    | -------------- variant `DimensionMismatch` not found here

error[E0599]: no variant named `DimensionMismatch` found for enum `utils::error::Error`
   --> packages/sweetmcp-memory/src/vector/async_vector_core.rs:192:31
    |
192 |             return Err(Error::DimensionMismatch {
    |                               ^^^^^^^^^^^^^^^^^ variant not found in `utils::error::Error`
    |
   ::: packages/sweetmcp-memory/src/utils/error.rs:14:1
    |
14  | pub enum Error {
    | -------------- variant `DimensionMismatch` not found here

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:48:30
   |
48 |         PendingVectorOp::new(rx)
   |         -------------------- ^^ expected `Receiver<Result<(), Error>>`, found `Receiver<Result<Option<...>, ...>>`
   |         |
   |         arguments to this function are incorrect
   |
   = note: expected struct `tokio::sync::oneshot::Receiver<std::result::Result<(), _>>`
              found struct `tokio::sync::oneshot::Receiver<std::result::Result<std::option::Option<(Vec<f32>, std::option::Option<serde_json::Value>)>, _>>`
note: associated function defined here
  --> packages/sweetmcp-memory/src/vector/mod.rs:58:12
   |
58 |     pub fn new(rx: oneshot::Receiver<crate::utils::Result<()>>) -> Self {
   |            ^^^ -----------------------------------------------

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:60:30
   |
60 |         PendingVectorOp::new(rx)
   |         -------------------- ^^ expected `Receiver<Result<(), Error>>`, found `Receiver<Result<bool, Error>>`
   |         |
   |         arguments to this function are incorrect
   |
   = note: expected struct `tokio::sync::oneshot::Receiver<std::result::Result<(), _>>`
              found struct `tokio::sync::oneshot::Receiver<std::result::Result<bool, _>>`
note: associated function defined here
  --> packages/sweetmcp-memory/src/vector/mod.rs:58:12
   |
58 |     pub fn new(rx: oneshot::Receiver<crate::utils::Result<()>>) -> Self {
   |            ^^^ -----------------------------------------------

error[E0599]: no method named `search_vectors_internal` found for struct `async_vector_core::InMemoryVectorStore` in the current scope
  --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:73:32
   |
73 |             let result = store.search_vectors_internal(query_vector, limit, filter).await;
   |                                ^^^^^^^^^^^^^^^^^^^^^^^
   |
  ::: packages/sweetmcp-memory/src/vector/async_vector_core.rs:20:1
   |
20 | pub struct InMemoryVectorStore {
   | ------------------------------ method `search_vectors_internal` not found for this struct
   |
help: there is a method `add_vector_internal` with a similar name
   |
73 -             let result = store.search_vectors_internal(query_vector, limit, filter).await;
73 +             let result = store.add_vector_internal(query_vector, limit, filter).await;
   |

error[E0616]: field `vectors` of struct `async_vector_core::InMemoryVectorStore` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:486:39
    |
486 |             vectors: Arc::clone(&self.vectors),
    |                                       ^^^^^^^ private field

error[E0616]: field `metadata` of struct `async_vector_core::InMemoryVectorStore` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:487:40
    |
487 |             metadata: Arc::clone(&self.metadata),
    |                                        ^^^^^^^^ private field

error[E0616]: field `operation_counter` of struct `async_vector_core::InMemoryVectorStore` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:488:49
    |
488 |             operation_counter: Arc::clone(&self.operation_counter),
    |                                                 ^^^^^^^^^^^^^^^^^ private field

error[E0616]: field `dimension_cache` of struct `async_vector_core::InMemoryVectorStore` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:489:47
    |
489 |             dimension_cache: Arc::clone(&self.dimension_cache),
    |                                               ^^^^^^^^^^^^^^^ private field

error[E0616]: field `metrics` of struct `async_vector_core::InMemoryVectorStore` is private
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:490:39
    |
490 |             metrics: Arc::clone(&self.metrics),
    |                                       ^^^^^^^ private field

error[E0599]: no variant or associated item named `ApproximateNearestNeighbor` found for enum `search_strategies::SearchStrategy` in the current scope
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_types.rs:259:54
    |
259 |             default_search_strategy: SearchStrategy::ApproximateNearestNeighbor,
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ variant or associated item not found in `search_strategies::SearchStrategy`
    |
   ::: packages/sweetmcp-memory/src/vector/async_vector_optimization/search_strategies.rs:18:1
    |
18  | pub enum SearchStrategy {
    | ----------------------- variant or associated item `ApproximateNearestNeighbor` not found for this enum

error[E0609]: no field `improvement_percentage` on type `&DimensionReductionResult`
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_types.rs:432:29
    |
432 |             total += result.improvement_percentage;
    |                             ^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `original_dimensions`, `target_dimensions`, `compression_ratio`, `execution_time`

error[E0609]: no field `improvement_percentage` on type `&QuantizationResult`
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_types.rs:436:29
    |
436 |             total += result.improvement_percentage;
    |                             ^^^^^^^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `vectors_quantized`, `quantization_levels`, `compression_ratio`, `execution_time`

error[E0615]: attempted to take value of method `improvement_percentage` on type `&IndexOptimizationResult`
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_types.rs:440:29
    |
440 |             total += result.improvement_percentage;
    |                             ^^^^^^^^^^^^^^^^^^^^^^ method, not a field
    |
help: use parentheses to call the method
    |
440 |             total += result.improvement_percentage();
    |                                                   ++

error[E0615]: attempted to take value of method `improvement_percentage` on type `&CacheOptimizationResult`
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_types.rs:444:29
    |
444 |             total += result.improvement_percentage;
    |                             ^^^^^^^^^^^^^^^^^^^^^^ method, not a field
    |
help: use parentheses to call the method
    |
444 |             total += result.improvement_percentage();
    |                                                   ++

error[E0615]: attempted to take value of method `improvement_percentage` on type `&BatchOptimizationResult`
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_types.rs:448:29
    |
448 |             total += result.improvement_percentage;
    |                             ^^^^^^^^^^^^^^^^^^^^^^ method, not a field
    |
help: use parentheses to call the method
    |
448 |             total += result.improvement_percentage();
    |                                                   ++

error[E0615]: attempted to take value of method `improvement_percentage` on type `&MemoryLayoutResult`
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_types.rs:452:29
    |
452 |             total += result.improvement_percentage;
    |                             ^^^^^^^^^^^^^^^^^^^^^^ method, not a field
    |
help: use parentheses to call the method
    |
452 |             total += result.improvement_percentage();
    |                                                   ++

error[E0063]: missing field `performance_trend` in initializer of `coordinator_metrics::MetricsSummary`
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_metrics.rs:163:9
    |
163 |         MetricsSummary {
    |         ^^^^^^^^^^^^^^ missing `performance_trend`

error[E0599]: no variant or associated item named `ApproximateNearestNeighbor` found for enum `search_strategies::SearchStrategy` in the current scope
  --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_config.rs:86:62
   |
86 |             config.default_search_strategy = SearchStrategy::ApproximateNearestNeighbor;
   |                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ variant or associated item not found in `search_strategies::SearchStrategy`
   |
  ::: packages/sweetmcp-memory/src/vector/async_vector_optimization/search_strategies.rs:18:1
   |
18 | pub enum SearchStrategy {
   | ----------------------- variant or associated item `ApproximateNearestNeighbor` not found for this enum

error[E0599]: no variant or associated item named `Dot` found for enum `async_vector_operations::DistanceMetric` in the current scope
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/search_strategies.rs:233:29
    |
233 |             DistanceMetric::Dot => self.dot_product_simd(query_vector, target_vector),
    |                             ^^^ variant or associated item not found in `async_vector_operations::DistanceMetric`
    |
   ::: packages/sweetmcp-memory/src/vector/async_vector_operations.rs:497:1
    |
497 | pub enum DistanceMetric {
    | ----------------------- variant or associated item `Dot` not found for this enum

error[E0599]: no associated item named `ByType` found for struct `filter::MemoryFilter` in the current scope
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/search_strategies.rs:360:27
    |
360 |             MemoryFilter::ByType(filter_type) => {
    |                           ^^^^^^ associated item not found in `filter::MemoryFilter`
    |
   ::: packages/sweetmcp-memory/src/memory/filter.rs:11:1
    |
11  | pub struct MemoryFilter {
    | ----------------------- associated item `ByType` not found for this struct

error[E0223]: ambiguous associated type
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/search_strategies.rs:364:13
    |
364 |             MemoryFilter::ByTimeRange { start, end } => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: if there were a trait named `Example` with associated type `ByTimeRange` implemented for `filter::MemoryFilter`, you could use the fully-qualified path
    |
364 -             MemoryFilter::ByTimeRange { start, end } => {
364 +             <filter::MemoryFilter as Example>::ByTimeRange { start, end } => {
    |

error[E0599]: no associated item named `ByMetadata` found for struct `filter::MemoryFilter` in the current scope
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/search_strategies.rs:368:27
    |
368 |             MemoryFilter::ByMetadata(metadata) => {
    |                           ^^^^^^^^^^ associated item not found in `filter::MemoryFilter`
    |
   ::: packages/sweetmcp-memory/src/memory/filter.rs:11:1
    |
11  | pub struct MemoryFilter {
    | ----------------------- associated item `ByMetadata` not found for this struct

error[E0599]: no associated item named `Combined` found for struct `filter::MemoryFilter` in the current scope
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/search_strategies.rs:372:27
    |
372 |             MemoryFilter::Combined(filters) => {
    |                           ^^^^^^^^ associated item not found in `filter::MemoryFilter`
    |
   ::: packages/sweetmcp-memory/src/memory/filter.rs:11:1
    |
11  | pub struct MemoryFilter {
    | ----------------------- associated item `Combined` not found for this struct

error[E0308]: mismatched types
  --> packages/sweetmcp-memory/src/vector/async_vector_optimization/optimization_algorithms/optimization_executor.rs:72:40
   |
72 |         self.active_algorithms.retain(|&alg| alg != algorithm);
   |                                        ^^^^
   |                                        |
   |                                        types differ in mutability
   |                                        expected due to this
   |
   = note: expected mutable reference `&mut OptimizationAlgorithm`
                      found reference `&_`
help: consider removing `&` from the pattern
   |
72 -         self.active_algorithms.retain(|&alg| alg != algorithm);
72 +         self.active_algorithms.retain(|alg| alg != algorithm);
   |

error[E0308]: mismatched types
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/mod.rs:54:53
    |
54  |     AsyncVectorOptimizationCoordinator::with_config(config)
    |     ----------------------------------------------- ^^^^^^ expected `coordinator_types::CoordinatorConfig`, found `coordinator_config::CoordinatorConfig`
    |     |
    |     arguments to this function are incorrect
    |
    = note: `coordinator_config::CoordinatorConfig` and `coordinator_types::CoordinatorConfig` have similar names, but are actually distinct types
note: `coordinator_config::CoordinatorConfig` is defined in module `crate::vector::async_vector_optimization::coordinator_config` of the current crate
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_config.rs:10:1
    |
10  | pub struct CoordinatorConfig {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: `coordinator_types::CoordinatorConfig` is defined in module `crate::vector::async_vector_optimization::coordinator_types` of the current crate
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_types.rs:226:1
    |
226 | pub struct CoordinatorConfig {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: associated function defined here
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/coordinator_core.rs:50:12
    |
50  |     pub fn with_config(config: CoordinatorConfig) -> Self {
    |            ^^^^^^^^^^^ -------------------------

error[E0599]: no variant or associated item named `ApproximateNearestNeighbor` found for enum `search_strategies::SearchStrategy` in the current scope
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/mod.rs:114:63
    |
114 |                 .with_default_search_strategy(SearchStrategy::ApproximateNearestNeighbor)
    |                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ variant or associated item not found in `search_strategies::SearchStrategy`
    |
   ::: packages/sweetmcp-memory/src/vector/async_vector_optimization/search_strategies.rs:18:1
    |
18  | pub enum SearchStrategy {
    | ----------------------- variant or associated item `ApproximateNearestNeighbor` not found for this enum

warning: unused import: `Digest`
  --> packages/sweetmcp-memory/src/cognitive/committee/core/committee.rs:14:12
   |
14 | use sha2::{Digest, Sha256};
   |            ^^^^^^

warning: unused import: `llm_integration::LLMProvider`
 --> packages/sweetmcp-memory/src/cognitive/subsystem_coordinator.rs:6:5
  |
6 |     llm_integration::LLMProvider,
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `Entity`
 --> packages/sweetmcp-memory/src/graph/entity/relationships.rs:8:19
  |
8 | use super::core::{Entity, EntityFuture};
  |                   ^^^^^^

warning: unused import: `VectorStore`
  --> packages/sweetmcp-memory/src/vector/async_vector_optimization/search_strategies.rs:13:40
   |
13 | use super::super::{VectorSearchResult, VectorStore};
   |                                        ^^^^^^^^^^^

warning: unused import: `rand::Rng`
 --> packages/sweetmcp-memory/src/memory/memory_benchmarks.rs:6:5
  |
6 | use rand::Rng;
  |     ^^^^^^^^^

warning: unused variable: `code_state`
  --> packages/sweetmcp-memory/src/cognitive/committee/core/evaluators.rs:73:43
   |
73 |     pub fn evaluate_quality(action: &str, code_state: &CodeState) -> f64 {
   |                                           ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_code_state`

warning: unused variable: `code_state`
   --> packages/sweetmcp-memory/src/cognitive/committee/core/evaluators.rs:110:40
    |
110 |     pub fn evaluate_risk(action: &str, code_state: &CodeState) -> f64 {
    |                                        ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_code_state`

warning: unused variable: `event`
   --> packages/sweetmcp-memory/src/cognitive/committee/consensus/events.rs:278:29
    |
278 |     fn is_interested(&self, event: &CommitteeEvent) -> bool {
    |                             ^^^^^ help: if this is intentional, prefix it with an underscore: `_event`

warning: unused variable: `action`
  --> packages/sweetmcp-memory/src/cognitive/committee/evaluation/agent_simulation_core.rs:95:9
   |
95 |         action: &str,
   |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_action`

error[E0015]: cannot call non-const method `core::slice::<impl [u8]>::get::<usize>` in constant functions
   --> packages/sweetmcp-memory/src/cognitive/committee/evaluation/consensus.rs:196:35
    |
196 |         match agent_id.as_bytes().get(0) {
    |                                   ^^^^^^
    |
    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants

warning: unused variable: `settings`
  --> packages/sweetmcp-memory/src/cognitive/llm_integration.rs:26:28
   |
26 | pub fn create_llm_provider(settings: &CognitiveSettings) -> Result<Arc<dyn LLMProvider>> {
   |                            ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_settings`

error[E0382]: borrow of moved value: `action`
    --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_generator.rs:259:62
     |
254  |         for action in actions {
     |             ------ move occurs because `action` has type `std::string::String`, which does not implement the `Copy` trait
...
257  |                 action,
     |                 ------ value moved here
258  |                 priority,
259  |                 expected_impact: self.estimate_action_impact(&action, state),
     |                                                              ^^^^^^^ value borrowed here after move
     |
     = note: borrow occurs due to deref coercion to `str`
note: deref defined here
    --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/string.rs:2733:5
     |
2733 |     type Target = str;
     |     ^^^^^^^^^^^
help: consider cloning the value if the performance cost is acceptable
     |
257  |                 action: action.clone(),
     |                       ++++++++++++++++

warning: unused variable: `state`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_generator.rs:297:52
    |
297 |     fn estimate_action_impact(&self, action: &str, state: &CodeState) -> ActionImpact {
    |                                                    ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`

warning: unused variable: `state`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_validator.rs:251:53
    |
251 |     fn estimate_latency_impact(&self, action: &str, state: &CodeState) -> f64 {
    |                                                     ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`

warning: unused variable: `state`
   --> packages/sweetmcp-memory/src/cognitive/mcts/actions/action_validator.rs:267:52
    |
267 |     fn estimate_memory_impact(&self, action: &str, state: &CodeState) -> f64 {
    |                                                    ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`

error[E0382]: borrow of moved value: `bottlenecks`
   --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_mod.rs:186:35
    |
178 |         let bottlenecks = Self::find_bottleneck_nodes(tree);
    |             ----------- move occurs because `bottlenecks` has type `Vec<node_search_bottleneck::BottleneckNode>`, which does not implement the `Copy` trait
...
183 |             bottlenecks,
    |             ----------- value moved here
...
186 |             has_critical_issues: !bottlenecks.is_empty() || !anomalies.is_empty(),
    |                                   ^^^^^^^^^^^ value borrowed here after move
    |
help: consider cloning the value if the performance cost is acceptable
    |
183 |             bottlenecks: bottlenecks.clone(),
    |                        +++++++++++++++++++++

error[E0382]: borrow of moved value: `anomalies`
   --> packages/sweetmcp-memory/src/cognitive/mcts/analysis/node_search_mod.rs:186:62
    |
179 |         let anomalies = Self::find_anomalous_nodes(tree);
    |             --------- move occurs because `anomalies` has type `Vec<AnomalousNode>`, which does not implement the `Copy` trait
...
184 |             anomalies,
    |             --------- value moved here
185 |             total_nodes: stats.node_count,
186 |             has_critical_issues: !bottlenecks.is_empty() || !anomalies.is_empty(),
    |                                                              ^^^^^^^^^ value borrowed here after move
    |
help: consider cloning the value if the performance cost is acceptable
    |
184 |             anomalies: anomalies.clone(),
    |                      +++++++++++++++++++

warning: unused variable: `root_id`
   --> packages/sweetmcp-memory/src/cognitive/mcts/execution.rs:251:9
    |
251 |         root_id: &str,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_root_id`

warning: unused variable: `depth`
   --> packages/sweetmcp-memory/src/cognitive/mcts/tree_operations.rs:134:17
    |
134 |         let mut depth = 0;
    |                 ^^^^^ help: if this is intentional, prefix it with an underscore: `_depth`

warning: variable does not need to be mutable
   --> packages/sweetmcp-memory/src/cognitive/mcts/tree_operations.rs:133:13
    |
133 |         let mut current_state = node.state.clone();
    |             ----^^^^^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> packages/sweetmcp-memory/src/cognitive/mcts/tree_operations.rs:134:13
    |
134 |         let mut depth = 0;
    |             ----^^^^^
    |             |
    |             help: remove this `mut`

error[E0382]: borrow of moved value: `cluster_memories`
   --> packages/sweetmcp-memory/src/cognitive/attention/scoring.rs:236:27
    |
222 |             let cluster_memories: Vec<_> = scores.iter()
    |                 ---------------- move occurs because `cluster_memories` has type `Vec<(std::string::String, f32)>`, which does not implement the `Copy` trait
...
235 |                     memories: cluster_memories,
    |                               ---------------- value moved here
236 |                     size: cluster_memories.len(),
    |                           ^^^^^^^^^^^^^^^^ value borrowed here after move
    |
help: consider cloning the value if the performance cost is acceptable
    |
235 |                     memories: cluster_memories.clone(),
    |                                               ++++++++

warning: unused variable: `i`
  --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/quantum_error_correction.rs:64:14
   |
64 |         for (i, value) in quantum_state.iter_mut().enumerate() {
   |              ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `stab1`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/stabilizer_css_types.rs:222:28
    |
222 |     fn stabilizers_commute(stab1: &StabilizerGenerator, stab2: &StabilizerGenerator) -> bool {
    |                            ^^^^^ help: if this is intentional, prefix it with an underscore: `_stab1`

warning: unused variable: `stab2`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/stabilizer_css_types.rs:222:57
    |
222 |     fn stabilizers_commute(stab1: &StabilizerGenerator, stab2: &StabilizerGenerator) -> bool {
    |                                                         ^^^^^ help: if this is intentional, prefix it with an underscore: `_stab2`

warning: unused variable: `syndrome`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/stabilizer_decoders.rs:367:9
    |
367 |         syndrome: &[bool],
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_syndrome`

warning: unused variable: `weight`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/stabilizer_decoders.rs:368:9
    |
368 |         weight: usize,
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_weight`

warning: unused variable: `best_likelihood`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/stabilizer_decoders.rs:369:9
    |
369 |         best_likelihood: &mut f64,
    |         ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_best_likelihood`

error: reference patterns may only be written when the default binding mode is `move`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/surface_code/correction_algorithms.rs:503:30
    |
503 |             .min_by_key(|(_, &d)| d)
    |                              ^ reference pattern not allowed under `ref` default binding mode
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/match-ergonomics.html>
note: matching on a reference type with a non-reference pattern changes the default binding mode
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/surface_code/correction_algorithms.rs:503:26
    |
503 |             .min_by_key(|(_, &d)| d)
    |                          ^^^^^^^ this matches on type `&_`
help: make the implied reference pattern explicit
    |
503 |             .min_by_key(|&(_, &d)| d)
    |                          +

error[E0382]: use of moved value: `config.logical_operations`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/surface_code/mod.rs:278:50
    |
270 |         config: SurfaceCodeConfig,
    |         ------ move occurs because `config` has type `SurfaceCodeConfig`, which does not implement the `Copy` trait
...
273 |         coordinator.config = config;
    |                              ------ value moved here
...
278 |         coordinator.logical_engine.update_config(config.logical_operations);
    |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^ value used here after move

error[E0382]: use of moved value: `config.logical_operations`
   --> packages/sweetmcp-memory/src/cognitive/quantum/error_correction/surface_code/mod.rs:363:43
    |
359 |     pub fn update_config(&mut self, config: SurfaceCodeConfig) {
    |                                     ------ move occurs because `config` has type `SurfaceCodeConfig`, which does not implement the `Copy` trait
360 |         self.config = config;
    |                       ------ value moved here
...
363 |         self.logical_engine.update_config(config.logical_operations);
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^ value used here after move

warning: variable does not need to be mutable
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/core.rs:188:9
    |
188 |         mut state: Vec<f64>,
    |         ----^^^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `qubit_count`
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/core.rs:237:9
    |
237 |         qubit_count: usize,
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_qubit_count`

error[E0004]: non-exhaustive patterns: `&mut OptimizationBackend::QuantumOptimizer { .. }` not covered
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/training.rs:107:15
    |
107 |         match &mut self.inference_engine.optimization_backend {
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `&mut OptimizationBackend::QuantumOptimizer { .. }` not covered
    |
note: `OptimizationBackend` defined here
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/core.rs:72:10
    |
72  | pub enum OptimizationBackend {
    |          ^^^^^^^^^^^^^^^^^^^
...
77  |     QuantumOptimizer { method: String },
    |     ---------------- not covered
    = note: the matched value is of type `&mut OptimizationBackend`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
    |
119 ~             },
120 +             &mut OptimizationBackend::QuantumOptimizer { .. } => todo!()
    |

warning: unused variable: `syndrome_sum`
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/decoding.rs:124:13
    |
124 |         let syndrome_sum: usize = syndrome.iter().map(|&b| if b { 1 } else { 0 }).sum();
    |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_syndrome_sum`

warning: unused variable: `threshold`
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/decoding.rs:125:13
    |
125 |         let threshold = syndrome.len() / 2;
    |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_threshold`

warning: unused variable: `epoch`
  --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/optimizers.rs:57:13
   |
57 |         for epoch in 0..50 {
   |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_epoch`

error[E0382]: borrow of moved value: `state`
   --> packages/sweetmcp-memory/src/cognitive/quantum/ml_decoder/quantum_ops.rs:254:38
    |
245 |     pub(super) fn apply_quantum_error_correction(&self, state: &mut [f64], _qubit_count: usize) {
    |                                                         ----- move occurs because `state` has type `&mut [f64]`, which does not implement the `Copy` trait
...
250 |         for amplitude in state {
    |                          ----- `state` moved due to this implicit call to `.into_iter()`
...
254 |         self.normalize_quantum_state(state);
    |                                      ^^^^^ value borrowed here after move
    |
note: `into_iter` takes ownership of the receiver `self`, which moves `state`
   --> /Users/davidmaple/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/iter/traits/collect.rs:310:18
    |
310 |     fn into_iter(self) -> Self::IntoIter;
    |                  ^^^^
help: consider creating a fresh reborrow of `state` here
    |
250 |         for amplitude in &mut *state {
    |                          ++++++

warning: unused variable: `node`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/adaptive.rs:252:77
    |
252 |     fn calculate_objective_adaptation_factor(&self, objective_index: usize, node: &QuantumMCTSNode) -> f64 {
    |                                                                             ^^^^ help: if this is intentional, prefix it with an underscore: `_node`

warning: unused variable: `node`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/adaptive.rs:413:62
    |
413 |     fn calculate_temperature_factor(&self, temperature: f64, node: &QuantumMCTSNode, depth: usize) -> f64 {
    |                                                              ^^^^ help: if this is intentional, prefix it with an underscore: `_node`

error[E0596]: cannot borrow `self.engine` as mutable, as it is behind a `&` reference
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/backpropagation/mod.rs:176:27
    |
176 |         let cache_stats = self.engine.backpropagator().cache_stats();
    |                           ^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable
    |
help: consider changing this to be a mutable reference
    |
173 |     pub fn get_performance_analysis(&mut self) -> PerformanceAnalysis {
    |                                      +++

error[E0133]: call to unsafe function `set_var` is unsafe and requires unsafe block
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/config/environment.rs:270:13
    |
270 |             env::set_var(key, value);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
    |
    = note: consult the function's documentation for information on how to avoid undefined behavior

error[E0382]: use of moved value: `base`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/config/mod.rs:117:52
    |
111 |     fn merge_configs(&self, base: QuantumMCTSConfig, override_config: QuantumMCTSConfig) -> QuantumMCTSConfig {
    |                             ---- move occurs because `base` has type `quantum_mcts::config::core::QuantumMCTSConfig`, which does not implement the `Copy` trait
...
114 |         let mut merged = base;
    |                          ---- value moved here
...
117 |         if override_config.max_quantum_parallel != base.max_quantum_parallel {
    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^ value used here after move
    |
help: consider cloning the value if the performance cost is acceptable
    |
114 |         let mut merged = base.clone();
    |                              ++++++++

warning: unused variable: `entanglement_graph`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/factory.rs:172:9
    |
172 |         entanglement_graph: &Arc<RwLock<EntanglementGraph>>,
    |         ^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_entanglement_graph`

warning: unused variable: `total_visits`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/engine/pruning.rs:387:13
    |
387 |         let total_visits: u64 = tree.values().map(|node| node.visits).sum();
    |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_total_visits`

warning: variable does not need to be mutable
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/counters.rs:350:13
    |
350 |         let mut new_counters = Self::new();
    |             ----^^^^^^^^^^^^
    |             |
    |             help: remove this `mut`

error[E0596]: cannot borrow `self.rolling_monitor` as mutable, as it is behind a `&` reference
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/mod.rs:158:9
    |
158 |         self.rolling_monitor.add_sample(duration);
    |         ^^^^^^^^^^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable
    |
help: consider changing this to be a mutable reference
    |
156 |     pub fn record_operation(&mut self, duration: Duration) {
    |                              +++

error[E0596]: cannot borrow `self.active_benchmark` as mutable, as it is behind a `&` reference
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/mod.rs:160:34
    |
160 |         if let Some(benchmark) = &mut self.active_benchmark {
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable
    |
help: consider changing this to be a mutable reference
    |
156 |     pub fn record_operation(&mut self, duration: Duration) {
    |                              +++

error[E0596]: cannot borrow `self.rolling_monitor` as mutable, as it is behind a `&` reference
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/mod.rs:461:9
    |
461 |         self.rolling_monitor.add_sample(duration);
    |         ^^^^^^^^^^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable
    |
help: consider changing this to be a mutable reference
    |
456 |     pub fn time_operation<F, R>(&mut self, f: F) -> (R, Duration)
    |                                  +++

error[E0596]: cannot borrow `self.active_benchmark` as mutable, as it is behind a `&` reference
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/metrics/mod.rs:463:34
    |
463 |         if let Some(benchmark) = &mut self.active_benchmark {
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable
    |
help: consider changing this to be a mutable reference
    |
456 |     pub fn time_operation<F, R>(&mut self, f: F) -> (R, Duration)
    |                                  +++

error[E0382]: borrow of moved value: `urgency`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/entanglement/mod.rs:196:58
    |
189 |         let urgency = calculate_optimization_urgency(topology, issues);
    |             ------- move occurs because `urgency` has type `entanglement_types::OptimizationUrgency`, which does not implement the `Copy` trait
...
195 |             urgency,
    |             ------- value moved here
196 |             requires_attention: composite_score < 0.7 || urgency.is_critical(),
    |                                                          ^^^^^^^ value borrowed here after move
    |
help: consider cloning the value if the performance cost is acceptable
    |
195 |             urgency: urgency.clone(),
    |                    +++++++++++++++++

warning: unused variable: `start_time`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/improvement/memory_health.rs:148:13
    |
148 |         let start_time = self.usage_samples[0].0;
    |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_start_time`

warning: unused variable: `time`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/improvement/memory_health.rs:150:18
    |
150 |         for (i, (time, usage)) in self.usage_samples.iter().enumerate() {
    |                  ^^^^ help: if this is intentional, prefix it with an underscore: `_time`

error[E0382]: borrow of moved value: `performance`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/improvement/amplitude_amplifier.rs:191:38
    |
177 |         let performance = AmplificationPerformance {
    |             ----------- move occurs because `performance` has type `AmplificationPerformance`, which does not implement the `Copy` trait
...
188 |         self.performance_history.push(performance);
    |                                       ----------- value moved here
...
191 |         self.adaptation_stats.update(&performance);
    |                                      ^^^^^^^^^^^^ value borrowed here after move
    |
help: consider cloning the value if the performance cost is acceptable
    |
188 |         self.performance_history.push(performance.clone());
    |                                                  ++++++++

warning: unused variable: `result`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/improvement/amplitude_amplifier.rs:195:40
    |
195 |     pub fn adapt_parameters(&mut self, result: &AmplificationResult) {
    |                                        ^^^^^^ help: if this is intentional, prefix it with an underscore: `_result`

error: reference patterns may only be written when the default binding mode is `move`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/selection/types.rs:332:30
    |
332 |             .max_by_key(|(_, &count)| count)
    |                              ^ reference pattern not allowed under `ref` default binding mode
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/match-ergonomics.html>
note: matching on a reference type with a non-reference pattern changes the default binding mode
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/selection/types.rs:332:26
    |
332 |             .max_by_key(|(_, &count)| count)
    |                          ^^^^^^^^^^^ this matches on type `&_`
help: make the implied reference pattern explicit
    |
332 |             .max_by_key(|&(_, &count)| count)
    |                          +

error[E0596]: cannot borrow `self.selector` as mutable, as it is behind a `&` reference
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/selection/engine.rs:205:29
    |
205 |                 let score = self.selector.scorer().calculate_fast_score(child, root.visits as f64);
    |                             ^^^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable
    |
help: consider changing this to be a mutable reference
    |
190 |         &mut self,
    |          +++

error[E0596]: cannot borrow `self.selector` as mutable, as it is behind a `&` reference
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/selection/engine.rs:210:12
    |
210 |         Ok(self.selector.scorer().calculate_selection_entropy(&scores))
    |            ^^^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable
    |
help: consider changing this to be a mutable reference
    |
190 |         &mut self,
    |          +++

error[E0382]: borrow of moved value: `trends`
   --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/trends.rs:110:25
    |
96  |         let trends = self.analyze_trends(snapshots);
    |             ------ move occurs because `trends` has type `PerformanceTrends`, which does not implement the `Copy` trait
...
106 |             trends,
    |             ------ value moved here
...
110 |             is_healthy: trends.is_performing_well(),
    |                         ^^^^^^ value borrowed here after move
    |
help: consider cloning the value if the performance cost is acceptable
    |
106 |             trends: trends.clone(),
    |                   ++++++++++++++++

warning: unused variable: `is_healthy`
  --> packages/sweetmcp-memory/src/cognitive/quantum_mcts/statistics/tree_stats_mod.rs:74:22
   |
74 |         let (health, is_healthy) = health_check(stats);
   |                      ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_is_healthy`

warning: variable does not need to be mutable
  --> packages/sweetmcp-memory/src/graph/entity/base_entity.rs:57:13
   |
57 |         let mut entity = Self {
   |             ----^^^^^^
   |             |
   |             help: remove this `mut`

warning: unused variable: `entity`
   --> packages/sweetmcp-memory/src/graph/entity/queries.rs:361:21
    |
361 |                 for entity in &entities {
    |                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_entity`

warning: variable does not need to be mutable
   --> packages/sweetmcp-memory/src/graph/entity/queries.rs:360:21
    |
360 |                 let mut all_relationships = Vec::new();
    |                     ----^^^^^^^^^^^^^^^^^
    |                     |
    |                     help: remove this `mut`

warning: variable does not need to be mutable
   --> packages/sweetmcp-memory/src/memory/memory_type/base_memory.rs:128:13
    |
128 |         let mut memory = Self::new(id, name, description, memory_type, content.with_embedding(embedding));
    |             ----^^^^^^
    |             |
    |             help: remove this `mut`

warning: unused variable: `memory_type`
   --> packages/sweetmcp-memory/src/memory/memory_type/base_memory.rs:277:13
    |
277 |         let memory_type = if entity_type.starts_with("memory_") {
    |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_memory_type`

warning: unused variable: `exclude_user`
   --> packages/sweetmcp-memory/src/memory/query/builder/convenience.rs:158:9
    |
158 |         exclude_user: Option<String>,
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_exclude_user`

warning: unused variable: `validator`
  --> packages/sweetmcp-memory/src/memory/query/builder/mod.rs:39:13
   |
39 |         let validator = QueryValidator::with_limits(25, 5, 5000); // Stricter limits
   |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_validator`

warning: unused variable: `validator`
  --> packages/sweetmcp-memory/src/memory/query/builder/mod.rs:45:13
   |
45 |         let validator = QueryValidator::with_limits(100, 20, 50000); // Relaxed limits
   |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_validator`

error: lifetime may not live long enough
  --> packages/sweetmcp-memory/src/memory/semantic/memory_graph_analysis.rs:95:9
   |
84 |         v: &str,
   |            - let's call the lifetime of this reference `'1`
85 |         index: &mut usize,
86 |         stack: &mut Vec<&str>,
   |                         - let's call the lifetime of this reference `'2`
...
95 |         stack.push(v);
   |         ^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`
   |
   = note: requirement occurs because of a mutable reference to `Vec<&str>`
   = note: mutable references are invariant over their type parameter
   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance
help: consider introducing a named lifetime parameter and update trait if needed
   |
82 ~     fn tarjan_scc<'a>(
83 |         &self,
84 ~         v: &'a str,
85 |         index: &mut usize,
86 ~         stack: &mut Vec<&'a str>,
   |

error: lifetime may not live long enough
   --> packages/sweetmcp-memory/src/memory/semantic/memory_graph_analysis.rs:128:13
    |
86  |         stack: &mut Vec<&str>,
    |                         - let's call the lifetime of this reference `'2`
...
90  |         components: &mut Vec<Vec<&str>>,
    |                                  - let's call the lifetime of this reference `'3`
...
128 |             components.push(component);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'2` must outlive `'3`
    |
    = note: requirement occurs because of a mutable reference to `Vec<Vec<&str>>`
    = note: mutable references are invariant over their type parameter
    = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance
help: consider introducing a named lifetime parameter and update trait if needed
    |
82  ~     fn tarjan_scc<'a>(
83  |         &self,
84  |         v: &str,
85  |         index: &mut usize,
86  ~         stack: &mut Vec<&'a str>,
87  |         indices: &mut HashMap<&str, usize>,
88  |         lowlinks: &mut HashMap<&str, usize>,
89  |         on_stack: &mut HashSet<&str>,
90  ~         components: &mut Vec<Vec<&'a str>>,
    |

warning: unused variable: `statistics`
   --> packages/sweetmcp-memory/src/memory/semantic/memory_optimization/mod.rs:372:45
    |
372 |     fn calculate_performance_metrics(&self, statistics: &MemoryStatistics) -> PerformanceMetrics {
    |                                             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_statistics`

error[E0507]: cannot move out of `self.item_type` which is behind a shared reference
   --> packages/sweetmcp-memory/src/memory/semantic/semantic_item.rs:270:24
    |
270 |             item_type: self.item_type,
    |                        ^^^^^^^^^^^^^^ move occurs because `self.item_type` has type `item_types::SemanticItemType`, which does not implement the `Copy` trait
    |
help: consider cloning the value if the performance cost is acceptable
    |
270 |             item_type: self.item_type.clone(),
    |                                      ++++++++

error[E0507]: cannot move out of `self.relationship_type` which is behind a shared reference
   --> packages/sweetmcp-memory/src/memory/semantic/semantic_relationship.rs:282:32
    |
282 |             relationship_type: self.relationship_type,
    |                                ^^^^^^^^^^^^^^^^^^^^^^ move occurs because `self.relationship_type` has type `semantic::relationships::relationship_types::SemanticRelationshipType`, which does not implement the `Copy` trait
    |
help: consider cloning the value if the performance cost is acceptable
    |
282 |             relationship_type: self.relationship_type.clone(),
    |                                                      ++++++++

warning: variable does not need to be mutable
   --> packages/sweetmcp-memory/src/query/query_builder/operations.rs:118:21
    |
118 |     pub fn sort_asc(mut self, field: impl Into<String>) -> Self {
    |                     ----^^^^
    |                     |
    |                     help: remove this `mut`

warning: variable does not need to be mutable
   --> packages/sweetmcp-memory/src/query/query_builder/operations.rs:123:22
    |
123 |     pub fn sort_desc(mut self, field: impl Into<String>) -> Self {
    |                      ----^^^^
    |                      |
    |                      help: remove this `mut`

warning: variable does not need to be mutable
   --> packages/sweetmcp-memory/src/query/query_builder/operations.rs:214:9
    |
214 |         mut self,
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> packages/sweetmcp-memory/src/query/query_builder/operations.rs:227:9
    |
227 |         mut self,
    |         ----^^^^
    |         |
    |         help: remove this `mut`

warning: variable does not need to be mutable
   --> packages/sweetmcp-memory/src/query/query_builder/operations.rs:239:25
    |
239 |     pub fn string_exact(mut self, field: impl Into<String>, value: impl Into<String>) -> Self {
    |                         ----^^^^
    |                         |
    |                         help: remove this `mut`

warning: variable does not need to be mutable
   --> packages/sweetmcp-memory/src/query/query_builder/operations.rs:244:23
    |
244 |     pub fn bool_exact(mut self, field: impl Into<String>, value: bool) -> Self {
    |                       ----^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> packages/sweetmcp-memory/src/query/query_builder/operations.rs:249:22
    |
249 |     pub fn int_exact(mut self, field: impl Into<String>, value: i64) -> Self {
    |                      ----^^^^
    |                      |
    |                      help: remove this `mut`

warning: variable does not need to be mutable
   --> packages/sweetmcp-memory/src/query/query_builder/operations.rs:254:24
    |
254 |     pub fn float_exact(mut self, field: impl Into<String>, value: f64) -> Self {
    |                        ----^^^^
    |                        |
    |                        help: remove this `mut`

warning: variable does not need to be mutable
   --> packages/sweetmcp-memory/src/query/query_builder/operations.rs:260:27
    |
260 |     pub fn array_contains(mut self, field: impl Into<String>, value: serde_json::Value) -> Self {
    |                           ----^^^^
    |                           |
    |                           help: remove this `mut`

warning: variable does not need to be mutable
   --> packages/sweetmcp-memory/src/query/query_builder/operations.rs:271:20
    |
271 |     pub fn is_null(mut self, field: impl Into<String>) -> Self {
    |                    ----^^^^
    |                    |
    |                    help: remove this `mut`

warning: variable does not need to be mutable
   --> packages/sweetmcp-memory/src/query/query_builder/operations.rs:276:24
    |
276 |     pub fn is_not_null(mut self, field: impl Into<String>) -> Self {
    |                        ----^^^^
    |                        |
    |                        help: remove this `mut`

warning: variable does not need to be mutable
   --> packages/sweetmcp-memory/src/query/query_builder/operations.rs:281:22
    |
281 |     pub fn in_values(mut self, field: impl Into<String>, values: Vec<serde_json::Value>) -> Self {
    |                      ----^^^^
    |                      |
    |                      help: remove this `mut`

warning: variable does not need to be mutable
   --> packages/sweetmcp-memory/src/query/query_builder/operations.rs:304:23
    |
304 |     pub fn in_strings(mut self, field: impl Into<String>, values: Vec<String>) -> Self {
    |                       ----^^^^
    |                       |
    |                       help: remove this `mut`

warning: variable does not need to be mutable
   --> packages/sweetmcp-memory/src/query/query_builder/operations.rs:314:24
    |
314 |     pub fn in_integers(mut self, field: impl Into<String>, values: Vec<i64>) -> Self {
    |                        ----^^^^
    |                        |
    |                        help: remove this `mut`

warning: variable does not need to be mutable
   --> packages/sweetmcp-memory/src/query/query_builder/operations.rs:324:19
    |
324 |     pub fn prefix(mut self, field: impl Into<String>, prefix: impl Into<String>) -> Self {
    |                   ----^^^^
    |                   |
    |                   help: remove this `mut`

warning: variable does not need to be mutable
   --> packages/sweetmcp-memory/src/query/query_builder/operations.rs:331:19
    |
331 |     pub fn suffix(mut self, field: impl Into<String>, suffix: impl Into<String>) -> Self {
    |                   ----^^^^
    |                   |
    |                   help: remove this `mut`

warning: variable does not need to be mutable
   --> packages/sweetmcp-memory/src/query/query_builder/operations.rs:338:21
    |
338 |     pub fn wildcard(mut self, field: impl Into<String>, pattern: impl Into<String>) -> Self {
    |                     ----^^^^
    |                     |
    |                     help: remove this `mut`

warning: variable does not need to be mutable
   --> packages/sweetmcp-memory/src/query/query_builder/operations.rs:344:34
    |
344 |     pub fn text_case_insensitive(mut self, field: impl Into<String>, query: impl Into<String>) -> Self {
    |                                  ----^^^^
    |                                  |
    |                                  help: remove this `mut`

warning: unused variable: `vector_weight`
   --> packages/sweetmcp-memory/src/vector/vector_search/hybrid_search.rs:428:5
    |
428 |     vector_weight: f32,
    |     ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_vector_weight`

warning: unused variable: `existing_result`
   --> packages/sweetmcp-memory/src/vector/vector_search/hybrid_search.rs:530:19
    |
530 |             Some((existing_result, existing_score)) => {
    |                   ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_existing_result`

warning: unused variable: `meta_obj`
   --> packages/sweetmcp-memory/src/vector/async_vector_operations.rs:295:40
    |
295 |             (serde_json::Value::Object(meta_obj), _) => {
    |                                        ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_meta_obj`

warning: unused variable: `patterns`
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/optimization_algorithms/algorithm_implementations.rs:172:48
    |
172 |     pub(super) fn optimize_cache_layout(&self, patterns: &AccessPatterns, cache_size: usize) -> Result<CacheLayout, Error> {
    |                                                ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_patterns`

warning: unused variable: `current_batch_size`
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/optimization_algorithms/algorithm_implementations.rs:188:87
    |
188 |     pub(super) fn calculate_optimal_batch_size(&self, vectors: &[(String, Vec<f32>)], current_batch_size: usize) -> Result<usize, Error> {
    |                                                                                       ^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_current_batch_size`

warning: unused variable: `vectors`
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/optimization_algorithms/algorithm_implementations.rs:231:49
    |
231 |     pub(super) fn optimize_memory_layout(&self, vectors: &[(String, Vec<f32>)], analysis: &MemoryLayoutAnalysis) -> Result<OptimizedLayou...
    |                                                 ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_vectors`

warning: unused variable: `vectors`
   --> packages/sweetmcp-memory/src/vector/async_vector_optimization/optimization_algorithms/algorithm_implementations.rs:241:60
    |
241 | ...layout_optimizations(&self, vectors: &mut [(String, Vec<f32>)], layout: &OptimizedLayout) -> Result<(), Error> {
    |                                ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_vectors`

Some errors have detailed explanations: E0004, E0015, E0026, E0027, E0034, E0038, E0046, E0061, E0063...
For more information about an error, try `rustc --explain E0004`.
warning: `sweetmcp_memory` (lib) generated 362 warnings
error: could not compile `sweetmcp_memory` (lib) due to 2331 previous errors; 362 warnings emitted
